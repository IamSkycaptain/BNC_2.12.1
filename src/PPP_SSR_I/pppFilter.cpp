// Part of BNC, a utility for retrieving decoding and
// converting GNSS data streams from NTRIP broadcasters.
//
// Copyright (C) 2007
// German Federal Agency for Cartography and Geodesy (BKG)
// http://www.bkg.bund.de
// Czech Technical University Prague, Department of Geodesy
// http://www.fsv.cvut.cz
//
// Email: euref-ip@bkg.bund.de
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation, version 2.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

/* -------------------------------------------------------------------------
 * BKG NTRIP Client
 * -------------------------------------------------------------------------
 *
 * Class:      t_pppParam, t_pppFilter
 *
 * Purpose:    Model for PPP
 *
 * Author:     L. Mervart
 *
 * Created:    01-Dec-2009
 *
 * Changes:
 *
 * -----------------------------------------------------------------------*/

#include <iomanip>
#include <cmath>
#include <sstream>
#include <newmatio.h>
#include <newmatap.h>

#include "pppFilter.h"
#include "pppClient.h"
#include "bncutils.h"
#include "bncantex.h"
#include "pppOptions.h"
#include "pppModel.h"

using namespace BNC_PPP;
using namespace std;

const double   MAXRES_CODE           = 2.98 * 3.0;
const double   MAXRES_PHASE_GPS      = 0.04;
const double   MAXRES_PHASE_GLONASS  = 2.98 * 0.03;
const double   GLONASS_WEIGHT_FACTOR = 5.0;
const double   BDS_WEIGHT_FACTOR     = 2.0;

#define LOG (_pppClient->log())
#define OPT (_pppClient->opt())


//+++++++++++++++++++++++++++++++++++++++++++++
// Modified: Chaiyut Charoenphon 18-October-2019
// GPT3 Cofficient for Thailand
//+++++++++++++++++++++++++++++++++++++++++++++
static const double	 COFF_DATA[198][64]={
	{21.5,96.5,92024,400,-7,-13,-45,296.3,-1.5,1.5,-2,-0.3,13.28,-4.34,-3.01,0.23,-0.7,-5.8,-0.6,-0.9,0.3,-0.1,-45.35,801.33,1.27211,-0.00664,-0.00172,-0.00062,-0.00053,0.56213,-0.075,-0.03436,-0.00322,0.00284,3.0122,1.0544,0.2471,0.3619,-0.0198,284.7,0.3,1,-0.8,-0.4,-10.54,-8.62,-6.62,-0.86,-0.05,6.51,0.55,-0.46,0.07,-0.25,-1.7,0.57,6,-0.54,5.65,14.42,2.95,6.42,-0.13,-7.08,},
	{21.5,97.5,88076,354,-14,-29,-54,294.2,-1.7,1.4,-2,-0.2,12.55,-4.14,-2.93,0.41,-0.66,-6.4,-1.6,-1,0.2,-0.1,-42.37,1181.94,1.27197,-0.00717,-0.00217,-0.00041,-0.00043,0.54456,-0.07268,-0.02943,-0.00437,0.00073,3.1104,1.0644,0.1526,0.4327,-0.0338,282.9,0.2,0.7,-0.7,-0.3,-10.91,-9.28,-7.07,-0.82,-0.1,4.27,0.39,-0.49,-0.16,-0.22,-3.63,0.12,1.12,1.19,4.55,5.58,4.58,10.31,-0.4,-5.45,},
	{21.5,98.5,89055,373,-32,-22,-62,294.6,-1.6,1.4,-1.9,0,12.6,-4.07,-2.81,0.55,-0.55,-5.9,-1.7,-0.8,0.1,-0.1,-40.37,1086.33,1.27195,-0.00708,-0.00188,-0.00058,-0.00029,0.55053,-0.07237,-0.02644,-0.00529,-0.00069,2.8987,0.89,0.0937,0.3752,-0.0106,283.3,0.2,0.7,-0.6,-0.2,-10.8,-9.26,-7.29,-0.78,-0.13,4.19,0.77,-0.4,0.03,-0.16,-2.63,0.2,-1.74,1.42,3.69,1.08,2.97,7.95,0.47,-3.25,},
	{21.5,99.5,85734,340,-32,-43,-67,292.7,-1.9,1.2,-1.8,0.2,11.99,-3.75,-2.14,0.33,-0.47,-6,-1.6,-0.8,0.2,-0.1,-38.26,1416.63,1.27185,-0.00755,-0.00237,-0.00025,-0.00024,0.53386,-0.07123,-0.02625,-0.00372,-0.00228,3.1182,1.0291,0.1683,0.3873,-0.004,281.7,-0.1,0.6,-0.6,0,-10.96,-9.62,-7.71,-0.78,-0.08,4.17,0.99,-0.27,-0.38,-0.16,-1.2,0.42,-3.16,1.14,2.27,2.28,6.22,9.46,-1.65,-3.67,},
	{21.5,100.5,89119,394,-47,-34,-77,293.8,-2,0.8,-1.5,0.2,12.72,-3.75,-1.55,0.1,-0.28,-4.7,-1.1,0.1,-0.1,0.1,-36.51,1083.01,1.27203,-0.00735,-0.00212,-0.00037,-0.0001,0.55111,-0.06942,-0.02551,-0.00369,-0.00366,2.836,0.7846,0.2264,0.2133,0.0494,283.1,-0.1,0.8,-0.7,0.1,-11.33,-9.24,-8.1,-0.94,-0.14,4.64,0.76,0.05,-0.45,-0.12,-1.16,0.67,-5.24,1.44,1.63,-2.37,5.09,8.54,-0.58,-0.63,},
	{21.5,101.5,89464,413,-45,-38,-81,293.5,-2.5,0.3,-1.4,0.2,12.97,-3.77,-1.15,-0.09,-0.17,-4.8,-1.1,0.4,0.1,0.2,-34.78,1051.32,1.27195,-0.00749,-0.00235,-0.00029,-0.00007,0.55202,-0.06859,-0.02468,-0.00248,-0.00407,2.8511,0.7368,0.2313,0.1612,0.051,283.1,-0.4,0.7,-0.7,0.2,-11.46,-9.22,-8.3,-1.05,-0.16,5.01,1.18,0.36,-0.37,-0.05,-0.32,0.85,-4.73,0.38,0.93,-2.13,5.28,9.71,-0.53,-0.99,},
	{21.5,102.5,89645,433,-40,-40,-84,293.1,-3,-0.1,-1.4,0.1,13.05,-3.91,-0.97,-0.24,-0.06,-4.9,-0.6,0.4,0.3,0.3,-32.9,1036.26,1.27197,-0.00766,-0.00257,-0.00023,-0.00008,0.55276,-0.06729,-0.0226,-0.00177,-0.00484,2.8503,0.66,0.1983,0.1124,0.0446,283,-0.7,0.5,-0.8,0.2,-11.32,-9.04,-8.23,-1.12,-0.15,5.35,0.84,0.46,-0.32,-0.14,0.55,-0.59,-3.94,0.05,0.4,-3.59,4.58,6.93,-0.02,-0.62,},
	{21.5,103.5,90829,483,-35,-42,-86,293.2,-4,-0.4,-1.3,0,13.22,-4.18,-0.95,-0.34,0.01,-4.2,-0.8,0.9,-0.3,0.6,-31.16,925.87,1.27201,-0.00794,-0.00263,-0.00021,-0.00011,0.55914,-0.06505,-0.01986,-0.00124,-0.0055,2.7757,0.5392,0.1497,0.0672,0.0319,283.1,-1.2,0.3,-0.8,0.2,-11.3,-8.84,-8.36,-1.28,-0.12,5.34,1.76,0.04,-0.52,-0.19,-0.03,-1.26,-3.4,0.54,-0.46,-4.53,5.62,6.01,-0.88,-1.22,},
	{21.5,104.5,94263,600,-26,-41,-86,294.5,-5.1,-0.9,-1.3,-0.3,13.54,-4.52,-0.93,-0.35,0.1,-5.8,-0.1,0.4,0,0.4,-29.74,608.36,1.27204,-0.00838,-0.00259,-0.00026,-0.00017,0.57717,-0.06043,-0.01668,-0.00165,-0.00692,2.5629,0.3807,0.112,0.038,0.037,284.1,-1.9,0.1,-0.8,0.2,-11.95,-8.73,-8.43,-1.44,0.01,5.27,1.53,0.36,-0.52,-0.12,-2.9,-1.86,-4.53,2.07,-0.86,-10.96,7.69,4.32,-0.8,-2.74,},
	{21.5,105.5,99391,768,12,-24,-77,296.7,-5.8,-1.3,-1.2,-0.6,14.31,-5.12,-1.07,-0.37,0.19,-6.2,-0.1,0.1,-0.2,0.1,-28.45,148.95,1.27186,-0.00863,-0.00269,-0.00042,-0.00035,0.60357,-0.05618,-0.01512,-0.00179,-0.00651,2.3658,0.2184,0.0559,0.0097,0.0292,285.8,-2.6,-0.1,-0.8,0.1,-12,-8.35,-8.17,-1.33,0.11,5.91,1.13,1.94,0.22,0.11,-3.55,-4.47,-5.31,3.98,-0.52,-10.37,5.79,2.59,-1,0.31,},
	{21.5,106.5,98030,745,28,-28,-77,295.4,-5.9,-1.7,-1.1,-0.7,13.96,-5.24,-1.09,-0.36,0.22,-5.7,0,0.3,0.1,0.3,-26.23,269.42,1.27221,-0.00871,-0.00288,-0.00041,-0.00035,0.59681,-0.05519,-0.01519,-0.00204,-0.00624,2.4573,0.1899,0.0371,0.0053,0.0279,285.1,-2.6,-0.2,-0.7,0.1,-11.36,-8.08,-8.4,-1.33,0.12,6.55,0.65,1.67,0.29,0.03,-0.81,-5.7,-3.71,3.87,-0.48,-5.81,6.59,4.9,-2.28,-0.89,},
	{20.5,96.5,90470,359,0,-16,-41,295.5,-1.3,1.5,-1.9,-0.3,13.05,-4.33,-3.17,0.32,-0.84,-6,-0.5,-0.7,0.1,-0.1,-45.2,950.84,1.27359,-0.00576,-0.00133,-0.00056,-0.00056,0.55725,-0.07504,-0.036,-0.00192,0.00227,3.1985,1.1815,0.2994,0.3984,0.0161,284.1,0.7,1.1,-0.8,-0.4,-8.79,-7.06,-6.08,-1.01,-0.59,6.7,0.89,-0.16,-0.01,-0.21,0.91,0.46,3.97,-3.15,2.73,15.19,2.4,9.14,-2.27,-6.42,},
	{20.5,97.5,89160,351,-14,-18,-49,295.1,-1.2,1.7,-1.9,-0.1,12.85,-4.28,-3.23,0.59,-0.75,-6.5,-1.5,-0.9,0.1,-0.1,-42.11,1076.81,1.27364,-0.00599,-0.00133,-0.00057,-0.00043,0.55225,-0.07334,-0.03003,-0.00458,0.00008,3.0484,0.9883,0.1091,0.4323,-0.0131,283.6,0.6,1,-0.7,-0.3,-8.94,-7.54,-6.36,-0.93,-0.56,4.41,0.59,-0.28,-0.17,-0.19,1.6,0.97,3.08,-1.7,1.92,5.16,5.07,12.84,-1.47,-5.02,},
	{20.5,98.5,90350,372,-32,-10,-58,295.7,-1.3,1.7,-1.9,0.1,13.14,-4.03,-2.89,0.6,-0.65,-4.4,-0.3,0.3,-0.2,0.1,-40.04,961.59,1.27359,-0.00594,-0.00111,-0.00069,-0.00027,0.55872,-0.07306,-0.02721,-0.00506,-0.00158,2.8931,0.8865,0.0894,0.3737,0.0107,284.2,0.6,1,-0.7,-0.1,-9.25,-7.68,-6.61,-0.92,-0.57,4.47,0.99,-0.08,-0.04,-0.24,0.2,0.19,0.41,0.3,1.93,2.3,3.65,12.29,-0.77,-2.43,},
	{20.5,99.5,90348,385,-35,-15,-67,295.3,-1.3,1.3,-1.6,0.2,13.3,-3.79,-1.85,0.19,-0.43,-4.9,-1.1,0.1,-0.3,0.1,-37.89,962.84,1.27348,-0.00608,-0.00138,-0.00055,-0.00017,0.55795,-0.07183,-0.02731,-0.00331,-0.00366,2.88,0.8449,0.2241,0.2528,0.0578,284.1,0.5,1.1,-0.7,0,-9.48,-7.64,-6.94,-1.02,-0.6,4.79,0.95,0.12,-0.4,-0.21,0.26,-1.41,-2.22,0.79,1.12,1.46,8.67,14.13,-2.05,-2.2,},
	{20.5,100.5,92013,413,-35,-16,-74,295.5,-1.5,0.8,-1.4,0.2,13.77,-3.68,-1.12,-0.14,-0.21,-5,-0.8,0.2,-0.2,0.1,-36.01,806.06,1.27346,-0.00605,-0.00159,-0.00046,-0.00012,0.56619,-0.07005,-0.02645,-0.00234,-0.00489,2.77,0.7394,0.2674,0.1509,0.0765,284.7,0.3,1.1,-0.8,0.2,-9.75,-7.25,-7.26,-1.17,-0.75,5.37,0.87,0.45,-0.29,-0.09,1.04,-1.73,-2.2,0.08,-0.04,-1.75,4.1,8.7,0.13,0.58,},
	{20.5,101.5,90648,406,-27,-24,-75,294.3,-2,0.5,-1.3,0.2,13.6,-3.7,-0.83,-0.23,-0.08,-4.5,-0.9,0.4,-0.4,0.2,-34.28,937.84,1.27339,-0.00632,-0.00194,-0.00032,-0.00017,0.55855,-0.06925,-0.02445,-0.00158,-0.00514,2.8687,0.7338,0.2671,0.1347,0.0715,283.9,0.1,0.9,-0.8,0.2,-9.94,-7.21,-7.45,-1.17,-0.73,5.02,1,0.47,-0.43,-0.09,-0.28,-1.94,-1.54,-0.17,-0.47,-2.21,7.12,10.07,-0.23,-0.35,},
	{20.5,102.5,90406,416,-23,-31,-78,293.8,-2.4,0.2,-1.3,0.2,13.4,-3.81,-0.74,-0.3,0.01,-4.1,-0.6,0.7,-0.5,0.3,-32.45,964.1,1.27337,-0.00654,-0.00212,-0.00025,-0.00019,0.55678,-0.06683,-0.02148,-0.00137,-0.00541,2.839,0.6411,0.2169,0.102,0.0512,283.6,-0.2,0.7,-0.8,0.2,-10.03,-7.02,-7.45,-1.16,-0.62,5.52,0.7,0.33,-0.21,-0.21,-1.52,-3.18,-1.82,0.39,-1.28,-3.14,5.78,6.48,-0.62,0.45,},
	{20.5,103.5,89625,434,-21,-41,-81,292.9,-3.5,0,-1.3,0.1,13.12,-3.93,-0.77,-0.36,0.05,-4.8,-0.1,0.5,0.3,0.4,-30.7,1042.08,1.27338,-0.007,-0.00218,-0.00013,-0.0002,0.55301,-0.06548,-0.01929,-0.00133,-0.00527,2.8775,0.5945,0.1719,0.0885,0.029,283,-0.6,0.6,-0.7,0.2,-10.34,-7.15,-7.4,-1.19,-0.47,5.37,1.7,0.25,-0.39,-0.34,-2.14,-3.67,-2.14,1.9,-1.81,-3.38,5.55,5.99,-2.39,-0.75,},
	{20.5,104.5,93540,559,-15,-37,-84,294.4,-4.8,-0.5,-1.1,-0.3,13.55,-4.15,-0.81,-0.46,0.1,-6.2,0.3,0.2,0.1,0.2,-29.12,675.78,1.27345,-0.00755,-0.00207,-0.00017,-0.00022,0.57458,-0.06124,-0.01611,-0.00252,-0.00581,2.6167,0.434,0.109,0.0462,0.024,284.2,-1.4,0.4,-0.7,0.2,-10.61,-6.82,-7.48,-1.29,-0.39,5.92,1.83,0.5,-0.39,-0.25,-2.21,-4.88,-2.03,3.72,-2.08,-9.15,7.72,4.15,-2.19,-3.11,},
	{20.5,105.5,98607,730,19,-27,-77,296.5,-5.7,-1.2,-0.9,-0.6,14.46,-4.65,-0.92,-0.54,0.14,-6.1,0.2,0.5,-0.2,0.2,-27.16,217.44,1.2734,-0.00801,-0.00215,-0.00021,-0.00038,0.60072,-0.05713,-0.01468,-0.00319,-0.0055,2.4526,0.282,0.0699,0.0148,0.0218,285.8,-2.2,0.1,-0.7,0,-10.5,-6.31,-7.49,-1.46,-0.37,5.07,0.75,1.82,0.21,0.06,-1.79,-7.31,-0.8,4.98,-1.25,-12.67,7.58,0.95,-1.35,-0.95,},
	{20.5,106.5,100517,797,58,-19,-70,297.1,-5.7,-2,-0.6,-0.8,15.2,-5.1,-1.03,-0.44,0.06,-6.2,-0.4,0.9,-0.4,0.2,-24.72,48.55,1.27332,-0.008,-0.00236,-0.00027,-0.00046,0.60894,-0.05481,-0.01431,-0.00362,-0.00464,2.5273,0.2205,0.0496,0.0305,0.003,286.4,-2.3,-0.2,-0.6,0,-9.85,-5.94,-7.27,-1.54,-0.32,6.12,0.25,1.89,0.38,0.03,-0.03,-9.71,1.31,5.12,-0.15,-8.6,8.35,3,-1.94,-0.9,},
	{19.5,96.5,93985,365,-5,6,-30,297.4,-0.6,1.7,-1.7,-0.3,14.01,-4.46,-3.29,0.35,-0.99,-5.9,-0.5,-0.6,0,-0.2,-45.43,619.89,1.27494,-0.00435,-0.00037,-0.00081,-0.0005,0.57501,-0.07638,-0.03742,-0.00135,0.00069,3.0356,1.0005,0.3268,0.2593,0.0336,285.8,1.2,1.5,-0.9,-0.4,-7.75,-5.38,-5.48,-0.94,-0.96,7.1,0.81,-0.15,0.1,-0.2,0.95,-2.1,-0.77,-1.89,2.56,15.92,2.43,9.83,-2.73,-5.52,},
	{19.5,97.5,92903,360,-20,5,-41,297.4,-0.7,1.8,-1.8,-0.1,13.88,-4.38,-3.42,0.71,-0.86,-5.9,0.6,-0.2,0.3,-0.1,-42.16,721.04,1.27502,-0.00453,-0.00028,-0.00088,-0.00037,0.5716,-0.07459,-0.03165,-0.00376,-0.00078,2.9015,0.8702,0.1294,0.3547,0.0182,285.4,1.1,1.4,-0.7,-0.3,-8.09,-5.5,-5.74,-1.01,-1.02,4.5,1.09,-0.27,-0.14,-0.36,0.69,-1.4,-1.24,-0.66,1.21,7.36,5.98,15.2,-3.15,-4.64,},
	{19.5,98.5,91040,364,-26,-2,-52,296.1,-1,1.8,-1.8,0.1,13.63,-4.02,-2.8,0.58,-0.69,-5.9,-1.4,-0.2,-0.1,-0.1,-39.92,896.24,1.27484,-0.00502,-0.0006,-0.00071,-0.00024,0.5629,-0.0741,-0.02855,-0.00369,-0.00199,2.9506,0.8879,0.1172,0.3639,0.0236,284.6,1,1.3,-0.7,-0.1,-7.99,-5.89,-5.91,-0.95,-0.95,4.63,1.13,0.11,-0.08,-0.28,-0.32,-2.01,-2.72,0.49,0.38,4.1,5.85,16.39,-2.49,-1.91,},
	{19.5,99.5,93323,398,-33,2,-62,297,-1,1.4,-1.5,0.2,14.31,-3.7,-1.62,0.06,-0.38,-5.1,-0.5,0.3,-0.3,0.1,-37.87,681.21,1.2747,-0.00497,-0.00072,-0.00066,-0.00014,0.57383,-0.07249,-0.02764,-0.00247,-0.00412,2.8019,0.7788,0.253,0.1919,0.0824,285.6,0.9,1.4,-0.8,0.1,-8.22,-5.49,-5.98,-1,-0.99,5.44,0.75,0.56,-0.35,-0.18,0.66,-2.39,-2.5,0.75,-0.56,-0.47,9.19,15.38,-1.93,-0.17,},
	{19.5,100.5,93111,403,-23,-4,-65,296.3,-1.2,0.9,-1.3,0.1,14.38,-3.54,-0.84,-0.3,-0.16,-4.6,-0.9,0.3,-0.5,0.1,-35.72,702.61,1.27465,-0.00512,-0.00119,-0.00046,-0.0002,0.57248,-0.07174,-0.02652,-0.0013,-0.00468,2.8053,0.7428,0.3057,0.1212,0.0861,285.4,0.7,1.3,-0.8,0.1,-8.51,-5.33,-6.16,-1.1,-0.97,5.79,0.76,0.7,-0.22,-0.07,1,-2.33,-1.5,0.71,-1.09,-0.2,4.84,9.22,0.01,1.13,},
	{19.5,101.5,91478,393,-10,-15,-65,295.1,-1.3,0.6,-1.2,0.1,13.96,-3.54,-0.63,-0.33,-0.02,-5.5,-1.7,0.2,-0.3,0.2,-33.79,859.61,1.27453,-0.00538,-0.00156,-0.00032,-0.00028,0.56385,-0.07086,-0.02415,-0.00092,-0.00465,2.8608,0.7191,0.289,0.1157,0.0736,284.5,0.5,1.1,-0.8,0.1,-8.48,-5.35,-6.29,-1.14,-0.86,4.98,0.68,0.6,-0.43,-0.16,0.74,-2.75,-1.27,1.21,-1.68,-1.86,7.87,9.49,-0.64,0.73,},
	{19.5,102.5,89194,375,-2,-29,-66,293.5,-1.9,0.4,-1.3,0,13.39,-3.58,-0.52,-0.39,0.06,-5.4,-1.2,0.2,0.1,0.2,-31.83,1081.76,1.27452,-0.00576,-0.00182,-0.00015,-0.00032,0.55147,-0.06866,-0.02154,-0.00113,-0.00491,2.9833,0.7083,0.2778,0.1073,0.0576,283.3,0.3,0.9,-0.7,0.1,-8.32,-5.46,-6.43,-1.21,-0.79,5.43,0.55,0.4,-0.14,-0.23,0.5,-2.33,-0.43,1.9,-1.94,-1.83,6.44,6.61,-1.75,0.62,},
	{19.5,103.5,88469,388,-1,-37,-71,292.5,-2.9,0.3,-1.3,0,13.06,-3.62,-0.6,-0.39,0.1,-5,-0.2,0.4,0.2,0.4,-29.78,1154.42,1.27472,-0.00611,-0.00186,-0.00007,-0.0003,0.54775,-0.06607,-0.0193,-0.00209,-0.00493,3.0197,0.6868,0.2109,0.1217,0.0322,282.7,-0.1,0.7,-0.7,0.2,-8.28,-5.35,-6.65,-1.28,-0.8,5.28,1.33,0.34,-0.28,-0.39,1.94,-3.38,0.48,2.26,-1.4,-5.17,6.65,5.02,-3.28,-1.02,},
	{19.5,104.5,93712,532,2,-25,-78,294.6,-4.5,-0.1,-1.1,-0.2,13.82,-3.81,-0.76,-0.54,0.09,-5.9,0.4,0.2,0,0.3,-28.05,659.43,1.27464,-0.00669,-0.00164,-0.00017,-0.00028,0.57502,-0.0608,-0.01621,-0.00398,-0.00491,2.6791,0.4871,0.1141,0.0633,0.0165,284.5,-1,0.6,-0.7,0.1,-8.08,-4.52,-6.75,-1.49,-0.88,5.89,2.33,0.59,-0.33,-0.39,3.83,-6.34,2.36,2.87,-0.91,-9,9,2.3,-3.25,-3.7,},
	{19.5,105.5,99832,727,35,-14,-72,297.4,-5.4,-1.1,-0.6,-0.6,15.01,-4.17,-0.89,-0.63,0.02,-6.4,-0.3,0.8,-0.4,0.3,-25.6,109.01,1.27444,-0.00741,-0.00166,-0.00013,-0.0004,0.60619,-0.05611,-0.01499,-0.00483,-0.00464,2.4741,0.3244,0.0839,0.0321,0.0098,286.5,-1.9,0.3,-0.6,0,-8.13,-4.08,-6.36,-1.55,-0.68,5.32,0.86,1.59,0.16,-0.03,2.45,-11.7,4.55,4.22,0.35,-13.35,10.49,-0.86,-1.79,-2.37,},
	{19.5,106.5,101035,773,69,-12,-66,297.9,-5.3,-2.1,-0.2,-0.7,15.95,-4.51,-0.88,-0.48,-0.08,-6.4,-0.4,2.4,-1,0.2,-23.07,1.38,1.27436,-0.00743,-0.00187,-0.00012,-0.00044,0.61066,-0.05481,-0.01535,-0.00544,-0.00416,2.6379,0.2881,0.1115,0.059,0.0078,287,-2,0,-0.5,-0.1,-8.33,-3.71,-6.1,-1.58,-0.62,5.62,-0.28,1.79,0.55,0.04,-0.6,-13.01,5.71,4.53,1.32,-7.39,7.55,1.4,-1.47,-1.38,},
	{18.5,96.5,96843,358,-9,21,-19,298.6,-0.2,1.6,-1.5,-0.3,14.94,-4.35,-3.05,0.16,-1.09,-5.8,-1.2,-0.3,-0.5,0,-45.59,357.98,1.27605,-0.00322,0.00027,-0.00088,-0.00038,0.58978,-0.07666,-0.03863,-0.00002,-0.00053,2.969,0.9243,0.3851,0.1486,0.0559,287,1.6,1.7,-0.9,-0.4,-5.97,-3.76,-4.81,-0.85,-1.21,7.89,0.11,-0.1,0.25,-0.08,1.05,-5.09,-5.65,-0.03,2.44,14.7,2.12,10.78,-3.4,-3.81,},
	{18.5,97.5,94165,343,-15,14,-32,297.6,-0.3,1.8,-1.6,-0.1,14.49,-4.3,-3.09,0.48,-0.96,-5.3,0.1,-0.2,-0.1,0,-42.33,604.14,1.27598,-0.00358,0.00008,-0.00085,-0.0003,0.57865,-0.07594,-0.03391,-0.00147,-0.00095,2.9404,0.8571,0.2005,0.2771,0.0177,285.9,1.5,1.6,-0.8,-0.3,-6.44,-3.69,-5.01,-0.91,-1.28,4.87,1.28,-0.1,-0.07,-0.43,2.02,-3.75,-4.62,0.13,0.53,9.93,6.12,16.15,-4.41,-3.51,},
	{18.5,98.5,93698,362,-25,12,-46,297.4,-0.6,1.7,-1.6,0,14.6,-3.98,-2.52,0.43,-0.66,-4.8,0.2,0.4,-0.3,0.1,-39.91,646.86,1.27584,-0.00401,-0.00007,-0.00078,-0.00019,0.57672,-0.07413,-0.029,-0.00256,-0.00234,2.8967,0.8067,0.166,0.2841,0.0465,285.8,1.3,1.5,-0.8,-0.1,-6.91,-3.9,-5.2,-0.91,-1.21,4.8,1.48,0.19,-0.24,-0.48,1.98,-5.04,-4.81,1.26,-0.74,4.07,9.42,20.41,-4.41,-0.28,},
	{18.5,99.5,95392,394,-28,14,-55,298.1,-0.7,1.4,-1.4,0.1,15.04,-3.57,-1.39,-0.1,-0.29,-5.2,-0.1,0,0,0.1,-37.83,490.38,1.27573,-0.00415,-0.00032,-0.00064,-0.00018,0.58473,-0.0728,-0.02735,-0.00178,-0.00364,2.7741,0.7349,0.2657,0.1536,0.0861,286.6,1.2,1.6,-0.8,0.1,-7.17,-3.65,-5.24,-0.95,-1.21,5.85,0.37,0.7,-0.22,-0.13,4.33,-6.4,-3.29,1.64,-1.67,-2.8,7.92,12.21,-1.28,0.96,},
	{18.5,100.5,94894,398,-14,8,-56,297.4,-0.8,0.9,-1.2,0,14.92,-3.41,-0.7,-0.44,-0.09,-4.7,-0.1,-0.1,0.1,0,-35.42,537.64,1.27565,-0.00432,-0.00079,-0.00045,-0.00027,0.58224,-0.07217,-0.02597,-0.00074,-0.00387,2.7687,0.7014,0.3067,0.093,0.0817,286.2,1,1.4,-0.9,0.1,-7.09,-3.51,-5.17,-1.04,-1.2,6.02,0.81,0.88,-0.24,-0.14,5.32,-6.52,-1.07,0.82,-1.88,1.1,7.46,11.65,-0.68,1.65,},
	{18.5,101.5,94829,409,-3,3,-58,297,-1.2,0.6,-1.1,-0.1,14.63,-3.45,-0.58,-0.48,-0.01,-5.1,-0.1,0,-0.1,-0.1,-33.24,546.59,1.27548,-0.00451,-0.00109,-0.00038,-0.00035,0.58232,-0.06902,-0.02235,-0.0011,-0.00342,2.6825,0.6063,0.2332,0.0762,0.0409,285.9,0.8,1.2,-0.8,0.1,-7.09,-3.7,-5.12,-1.13,-1.05,5.37,0.72,0.74,-0.33,-0.29,5.43,-8.89,-3.07,1.37,-2.14,-2.86,9.35,10.56,-1.3,2.13,},
	{18.5,102.5,95299,427,6,2,-61,297.1,-1.7,0.4,-1.2,-0.1,14.32,-3.63,-0.63,-0.48,0.07,-5.6,0.2,0.1,-0.1,0.1,-31.6,506.14,1.27536,-0.00465,-0.00123,-0.00038,-0.00039,0.58494,-0.06548,-0.01968,-0.00183,-0.00273,2.5761,0.4998,0.1619,0.0621,0.0144,285.9,0.4,1,-0.8,0.1,-6.45,-3.5,-5.1,-1.23,-0.99,5.41,0.61,0.69,-0.12,-0.25,8.63,-9.52,-1.54,1.01,-2.08,-4.45,6.36,5.08,-1.78,0.66,},
	{18.5,103.5,94919,444,11,0,-63,296.4,-2.4,0.5,-1.4,-0.2,14.06,-3.75,-0.73,-0.44,0.12,-5.8,0.1,-0.1,0.2,0.1,-29.85,543.47,1.27537,-0.0049,-0.00124,-0.00041,-0.00041,0.58188,-0.06311,-0.01847,-0.00276,-0.00273,2.5986,0.4744,0.1232,0.075,0.0084,285.5,0.1,0.9,-0.8,0,-5.36,-2.41,-5.38,-1.33,-1.16,5.74,1.28,0.62,-0.17,-0.3,9.13,-7.34,2.36,0.21,-1.56,-7.18,6.95,3.01,-3.24,-1.44,},
	{18.5,104.5,93414,469,17,-9,-65,294.7,-3.6,0.2,-1.3,-0.3,13.96,-3.56,-0.75,-0.48,0.08,-5.4,0.4,0.3,0.1,0.5,-27.25,684.34,1.27541,-0.00555,-0.00129,-0.00028,-0.00036,0.57313,-0.06147,-0.01799,-0.0046,-0.00403,2.7876,0.5636,0.1328,0.1003,0.0192,284.6,-0.4,0.8,-0.7,0.1,-5.73,-1.62,-5.72,-1.5,-1.29,6.31,2.24,0.62,-0.23,-0.44,2.37,-3.53,3.72,1.08,-1.37,-3.46,7.73,1.07,-4.84,-4.11,},
	{18.5,105.5,98221,617,34,-3,-66,296.9,-4.7,-0.4,-0.9,-0.4,14.89,-3.44,-0.85,-0.7,-0.03,-6.4,0.1,0.5,-0.1,0.1,-23.81,250.64,1.27524,-0.0064,-0.0012,-0.00022,-0.00034,0.59792,-0.05653,-0.01642,-0.00638,-0.0047,2.5683,0.4474,0.1104,0.047,0.0207,286.2,-1.2,0.5,-0.6,0,-7.02,-0.81,-5.55,-1.71,-1.26,6.33,2.33,1.02,-0.13,-0.41,-6.43,-3.77,2.83,3.29,0.14,-8.05,14.63,-0.08,-3.72,-4.07,},
	{18.5,106.5,100967,708,66,-1,-60,298.5,-4.8,-1.4,-0.3,-0.6,15.99,-3.62,-0.77,-0.65,-0.14,-6.7,-0.4,1.9,-0.8,0.1,-21.14,6.47,1.2752,-0.00674,-0.00138,-0.00009,-0.00036,0.61082,-0.05351,-0.01616,-0.00717,-0.00452,2.6076,0.3678,0.1449,0.051,0.0268,287.3,-1.6,0.3,-0.5,-0.1,-8.34,-1.8,-5.1,-1.53,-0.97,6.12,-0.37,1.67,0.59,0.02,-9.36,-9.14,2.39,4.32,1.65,-7.16,7.89,0,-0.59,-1.47,},
	{17.5,96.5,99787,346,-11,31,-7,299.7,0,1.4,-1.3,-0.5,15.93,-4.02,-2.38,-0.25,-0.99,-4.4,1.1,0.3,0.2,0.5,-45.58,94.3,1.27661,-0.00228,0.00065,-0.00083,-0.0003,0.6058,-0.07563,-0.03851,0.00116,-0.00184,2.9188,0.8974,0.491,0.0327,0.1255,288.2,1.9,1.9,-0.9,-0.3,-4.11,-2.35,-4.23,-0.67,-1.37,8.33,-0.65,-0.02,0.2,-0.05,-0.64,-9.15,-9.27,2.45,2.83,11.47,1.3,12.33,-3.31,-1.8,},
	{17.5,97.5,96771,324,-11,22,-20,298.7,0.4,1.6,-1.3,-0.1,15.15,-4.14,-2.35,-0.07,-0.92,-5.6,-0.8,-0.3,-0.3,0,-42.3,366.33,1.2766,-0.00256,0.00036,-0.00075,-0.00025,0.59243,-0.07576,-0.03528,0.00059,-0.00143,2.8643,0.7869,0.3359,0.1077,0.0492,287,1.8,1.8,-0.8,-0.2,-4.86,-1.91,-4.3,-0.75,-1.49,6.14,0.76,-0.01,0.02,-0.38,2.66,-7.58,-5.84,1.14,1.07,11.07,6.38,14.88,-4.74,-1.59,},
	{17.5,98.5,93918,335,-10,12,-35,297.2,-0.1,1.6,-1.3,0,14.65,-3.71,-1.82,-0.04,-0.6,-5.8,-1.3,-0.2,-0.4,0.1,-39.56,627.99,1.27656,-0.00337,-0.00007,-0.00059,-0.00023,0.57866,-0.07453,-0.03027,-0.00102,-0.00261,2.9172,0.808,0.272,0.1837,0.0486,285.8,1.6,1.6,-0.8,-0.1,-5.64,-1.96,-4.36,-0.82,-1.45,5.21,1.84,0.35,-0.3,-0.64,1.66,-6.73,-3.53,1.31,-0.19,4.96,11.41,22,-6.2,0.92,},
	{17.5,99.5,97494,382,-22,23,-45,299.2,-0.4,1.3,-1.2,0,15.59,-3.28,-1.08,-0.29,-0.2,-5.2,-0.9,0,0,0,-37.35,300.53,1.2765,-0.00344,-0.00009,-0.00056,-0.00024,0.59622,-0.07094,-0.02695,-0.00169,-0.00363,2.707,0.6952,0.2648,0.1232,0.0778,287.4,1.4,1.7,-0.8,0.1,-6.14,-1.84,-4.47,-0.81,-1.4,5.91,0.29,0.65,-0.1,-0.14,1.13,-9.84,-4.06,2.15,-1.34,-5.38,9.45,8.6,-0.27,1.85,},
	{17.5,100.5,95371,375,-5,13,-46,297.8,-0.7,0.9,-1.1,-0.1,15.1,-3.22,-0.48,-0.58,0.01,-5.3,-0.9,0.3,-0.6,0.2,-34.86,494.78,1.27648,-0.00383,-0.00056,-0.00038,-0.00036,0.58595,-0.07075,-0.02619,-0.00059,-0.00335,2.7863,0.6743,0.3336,0.0682,0.0879,286.4,1.2,1.5,-0.8,0.1,-6.08,-2.03,-4.33,-0.97,-1.29,6.19,0.78,0.88,-0.18,-0.17,0.18,-11.17,-1.49,2.02,-1.24,3.38,9.29,12.26,-1.52,1.63,},
	{17.5,101.5,95447,397,3,9,-51,297.5,-1.3,0.6,-1,-0.1,14.85,-3.26,-0.37,-0.63,0.06,-5.2,-0.2,0.4,-0.5,0.2,-32.45,490.45,1.27634,-0.00413,-0.00081,-0.00032,-0.00039,0.58711,-0.06555,-0.02079,-0.0018,-0.00294,2.6854,0.5662,0.2491,0.0525,0.0393,286.2,0.8,1.3,-0.8,0,-5.8,-2.19,-4.29,-0.96,-1.18,5,1.17,0.69,-0.32,-0.52,-1.7,-12.14,-1.83,3.35,-1.04,-3.34,11.19,12.67,-2.48,2.42,},
	{17.5,102.5,98747,453,5,19,-56,299.3,-1.9,0.6,-1.1,-0.1,14.93,-3.53,-0.54,-0.66,0.08,-6.3,-0.5,0.1,-0.2,0.2,-30.96,194.34,1.27623,-0.00417,-0.00077,-0.00039,-0.00041,0.60433,-0.06052,-0.01739,-0.00288,-0.00153,2.4335,0.403,0.1392,0.0286,0.0026,287.3,0.4,1.1,-0.8,0,-5.62,-2.14,-4.2,-0.94,-1.08,5.14,0.15,0.75,0.01,-0.19,-2.24,-13.72,-2.1,4.89,-0.38,-8.01,4.76,1.29,-1.28,-0.23,},
	{17.5,103.5,98962,464,10,24,-54,299.1,-2.2,0.7,-1.3,-0.2,14.83,-3.71,-0.79,-0.58,0.1,-5.8,-0.1,0.2,-0.3,0.4,-29.22,175.46,1.27623,-0.00414,-0.00068,-0.00051,-0.00044,0.60457,-0.05951,-0.01775,-0.00356,-0.00127,2.4383,0.3802,0.094,0.0438,0.0019,287.2,0.2,1,-0.8,0,-5.95,-1.84,-4.18,-0.97,-1.07,5.95,0.42,0.89,-0.03,-0.14,-4.27,-12.61,-1.07,5.51,0.79,-3.97,4.79,1.52,-3.3,-2.08,},
	{17.5,104.5,97962,471,21,21,-52,297.8,-2.8,0.6,-1.3,-0.3,14.78,-3.56,-0.83,-0.55,0.06,-6.2,0,0,-0.1,0.4,-26.22,267.43,1.27604,-0.00438,-0.00073,-0.00052,-0.00042,0.59866,-0.05904,-0.01778,-0.00533,-0.00209,2.527,0.4325,0.0967,0.0709,0.0117,286.7,0,0.9,-0.7,0,-5.61,-0.65,-4.28,-1.12,-1.22,7.24,1.54,0.94,-0.01,-0.26,-3.51,-10.55,-0.2,4.13,0.42,-0.3,5.43,-0.19,-4.9,-4.2,},
	{17.5,105.5,96102,488,34,10,-54,296.1,-3.5,0.2,-1.1,-0.4,14.85,-3.17,-0.8,-0.6,-0.06,-5.5,0.3,0.5,-0.4,0.4,-22.25,436.92,1.27611,-0.00501,-0.00085,-0.00035,-0.00034,0.58857,-0.05778,-0.01795,-0.00733,-0.00388,2.7269,0.5366,0.1341,0.094,0.0326,285.8,-0.4,0.8,-0.6,0,-6.02,0.41,-4.4,-1.39,-1.41,7.79,2.67,0.73,-0.09,-0.54,-3.22,-5.72,2.05,2.2,-0.52,-1.81,12.39,-0.1,-4.49,-4.83,},
	{17.5,106.5,99148,582,54,9,-53,297.8,-4.2,-0.4,-0.6,-0.5,15.46,-2.87,-0.73,-0.74,-0.18,-6.3,0.2,0.8,-0.6,0.2,-19.16,166.2,1.2761,-0.0057,-0.00091,-0.00021,-0.0003,0.60329,-0.05273,-0.017,-0.00854,-0.00478,2.5923,0.4676,0.1497,0.0538,0.0351,286.8,-1,0.6,-0.5,-0.1,-7.56,0.57,-4.17,-1.47,-1.39,7.41,1.47,1.28,0.28,-0.29,-9.02,-5.29,2.43,2.64,0.29,-5.93,12.73,0.13,-1.1,-2.11,},
	{16.5,96.5,100783,330,3,26,2,300.3,-0.2,0.7,-0.9,-0.7,16.94,-2.85,-0.98,-0.73,-0.52,-5.2,2.1,0.5,0.4,1.1,-45.22,7.43,1.27713,-0.00189,0.00056,-0.0006,-0.00029,0.61332,-0.07448,-0.03789,0.00128,-0.00322,3.139,1.1744,0.816,-0.0402,0.3351,288.5,2,1.9,-0.8,-0.3,-3.93,-1.29,-3.5,-0.59,-1.33,8.39,-0.64,0.09,0.19,-0.06,-1.91,-12.87,-6.22,3.1,4.48,8.94,0.3,11.88,-2.57,-0.11,},
	{16.5,97.5,99893,305,-4,27,-5,299.8,0.2,1.1,-1,-0.3,16.46,-3.28,-1.24,-0.59,-0.6,-4.9,1,0,0.5,0.2,-41.8,87.86,1.277,-0.00175,0.00047,-0.00058,-0.00026,0.60971,-0.07436,-0.03572,0.00084,-0.0031,2.9101,0.916,0.5447,0.0176,0.1769,288.1,2.1,1.8,-0.7,-0.2,-4.41,-1.15,-3.57,-0.6,-1.4,7.76,-0.3,0.1,-0.02,-0.22,-2.78,-13.48,-6.79,4.02,3.02,13,8.58,16.13,-6.14,0.68,},
	{16.5,98.5,95436,306,-1,15,-23,297.7,0.3,1.2,-1,-0.1,15.14,-3.38,-1.2,-0.4,-0.48,-4.7,-1,0.2,-0.5,0.1,-38.59,490.04,1.27715,-0.00267,0.00003,-0.00047,-0.0003,0.58936,-0.07349,-0.03018,-0.00149,-0.00342,2.8593,0.7606,0.3448,0.1,0.0659,286.3,1.8,1.7,-0.7,-0.1,-5.15,-1.03,-3.58,-0.68,-1.38,5.98,2.12,0.49,-0.31,-0.76,-5.32,-12.12,-6.81,5.09,1.44,9.11,12.16,24.25,-7.94,3.15,},
	{16.5,99.5,97942,354,-12,24,-36,299.4,-0.2,1.2,-1,0,15.61,-2.95,-0.82,-0.42,-0.11,-6.3,-0.7,-0.1,0,0.1,-36.26,262.11,1.27715,-0.00304,-0.00004,-0.00044,-0.0003,0.60186,-0.06823,-0.02509,-0.00282,-0.00336,2.6468,0.6531,0.2439,0.1153,0.0632,287.4,1.5,1.6,-0.7,0,-5.8,-1.02,-3.66,-0.69,-1.31,5.67,0.89,0.49,0.02,-0.39,-6.41,-14.13,-8.8,6.25,0.07,-7.78,12.64,7.81,0.1,2.23,},
	{16.5,100.5,95808,353,1,17,-37,298.1,-0.6,0.9,-0.9,-0.1,15.18,-2.95,-0.37,-0.68,0.06,-6,-1.1,0.2,-0.4,0.3,-33.82,455.54,1.2772,-0.00348,-0.00038,-0.00031,-0.0004,0.59089,-0.06735,-0.02514,-0.00174,-0.00236,2.7561,0.6258,0.309,0.0571,0.0753,286.5,1.3,1.5,-0.7,0,-5.24,-1.1,-3.56,-0.77,-1.19,6.1,0.24,0.84,-0.1,-0.12,-1.61,-13.89,-5.79,5.38,0.41,1.86,9.43,8.56,-1.27,1.29,},
	{16.5,101.5,97868,385,5,19,-42,298.9,-1.2,0.7,-0.9,-0.1,15.41,-3.04,-0.26,-0.79,0.07,-6.1,-0.1,0,-0.1,0.2,-31.42,271.77,1.27698,-0.00354,-0.00049,-0.00029,-0.00042,0.60218,-0.06197,-0.02035,-0.00261,-0.00151,2.5762,0.4844,0.2278,0.025,0.029,287.1,0.9,1.3,-0.7,0,-5.15,-0.35,-3.54,-0.85,-1.31,4.85,1.71,0.75,-0.36,-0.65,1.54,-13.32,-0.76,4.19,0.96,-3.14,11.17,12.06,-2.79,2.37,},
	{16.5,102.5,98587,417,8,21,-48,299.3,-1.8,0.7,-0.9,-0.1,15.13,-3.16,-0.41,-0.78,0.05,-5.9,-0.1,0.3,-0.3,0.3,-29.93,207.82,1.27689,-0.00383,-0.00048,-0.00029,-0.00038,0.60547,-0.05842,-0.01745,-0.00388,-0.00075,2.4839,0.4113,0.1597,0.0231,0.0049,287.3,0.5,1.2,-0.7,0,-4.92,-0.17,-3.53,-0.91,-1.35,4.83,0.08,0.66,0.09,-0.23,-0.57,-12.83,0.97,3.92,1.58,-5.95,4.39,0.64,-1.95,-1.27,},
	{16.5,103.5,98749,423,12,24,-46,299.2,-2.1,0.8,-1,-0.1,14.91,-3.21,-0.68,-0.67,0.01,-5.9,0.1,0.3,-0.3,0.5,-27.92,192.95,1.27695,-0.00377,-0.00037,-0.00036,-0.00037,0.60635,-0.05802,-0.018,-0.00484,-0.00081,2.4574,0.4045,0.1076,0.052,0.0007,287.3,0.4,1.1,-0.6,0,-4.65,-0.14,-3.47,-0.98,-1.34,6.21,0.16,0.9,-0.02,-0.12,-3.45,-11.62,0.87,4.05,1.58,-0.95,2.69,1.33,-3.37,-2.27,},
	{16.5,104.5,98715,423,21,27,-43,298.8,-2.2,0.8,-1.1,-0.2,15,-3.27,-0.8,-0.59,-0.04,-5.8,0,0.3,-0.3,0.5,-25.1,197.36,1.27685,-0.00367,-0.00037,-0.00043,-0.00038,0.60509,-0.05671,-0.01764,-0.00614,-0.0015,2.4863,0.4093,0.0903,0.077,0.0054,287.1,0.3,1.1,-0.6,0,-5.18,-0.05,-3.42,-0.98,-1.32,7.27,0.36,0.95,0.13,-0.13,-5.5,-9.66,0.89,3.53,1.15,-1.79,3.99,-0.92,-2.99,-3.42,},
	{16.5,105.5,98489,431,33,28,-40,298.2,-2.4,0.6,-1.1,-0.3,15.21,-3.18,-0.8,-0.59,-0.11,-6,-0.1,0.2,-0.3,0.3,-21.37,220.51,1.27674,-0.00379,-0.0004,-0.00046,-0.00037,0.60289,-0.05578,-0.01838,-0.00709,-0.00285,2.5407,0.427,0.1138,0.0858,0.0214,286.9,0.1,1,-0.6,0,-5.68,0.93,-3.36,-1.04,-1.46,8.95,1.51,0.8,0.13,-0.27,-7.21,-7.51,0.74,2.67,0.33,1.68,8.01,-1.8,-3.69,-4.35,},
	{16.5,106.5,95336,428,49,11,-44,296.1,-3,0.3,-1,-0.3,14.86,-2.71,-0.72,-0.55,-0.22,-5.8,0,0.3,-0.2,0.4,-17.37,507.83,1.27703,-0.00441,-0.00061,-0.00029,-0.0003,0.58675,-0.05346,-0.01871,-0.00872,-0.00458,2.7548,0.5394,0.1612,0.1241,0.036,285.6,-0.2,0.9,-0.4,0,-6.81,0.6,-3.42,-1.07,-1.5,8.89,2.57,0.9,0.17,-0.51,-11.31,-4.53,0.92,2.7,-0.17,1.46,12.68,1.14,-2.67,-2.81,},
	{15.5,96.5,100888,310,18,18,11,300.5,-0.4,0.1,-0.5,-0.8,17.34,-2.01,-0.15,-0.78,-0.23,-7.3,1.6,0.6,0.4,0.9,-44.67,0,1.27769,-0.0018,0.00038,-0.00043,-0.00031,0.617,-0.07242,-0.03659,-0.00044,-0.00446,3.1986,1.2626,0.9218,-0.0226,0.4054,288.3,2,1.7,-0.5,-0.2,-3.7,0,-2.81,-0.52,-1.26,8.51,-0.54,0.09,0.21,-0.07,-5.68,-17.7,-10.05,6.3,5.73,9.62,0.1,11.63,-3.34,0.9,},
	{15.5,97.5,100096,280,11,20,6,299.8,0.2,0.4,-0.6,-0.5,16.93,-2.28,-0.39,-0.71,-0.34,-5.8,0.6,-0.2,0.7,0.3,-41,71.56,1.27749,-0.00161,0.00029,-0.00039,-0.00035,0.61438,-0.07221,-0.03469,-0.00107,-0.00469,2.9904,1.0521,0.6537,0.0363,0.2413,288,2.1,1.7,-0.5,-0.1,-4.14,0.01,-2.86,-0.52,-1.28,8.56,-0.65,0.29,-0.1,-0.08,-6.52,-16.86,-10.11,7.26,4.87,14.36,9.56,17.68,-7.44,2.17,},
	{15.5,98.5,95582,277,8,13,-12,297.4,0.4,0.8,-0.7,-0.2,15.32,-2.99,-0.61,-0.65,-0.31,-4.7,-1,0.5,-0.6,0.2,-37.49,478.4,1.27767,-0.00235,0.00001,-0.00032,-0.00037,0.59463,-0.07026,-0.02875,-0.00335,-0.00431,2.8503,0.7326,0.4102,0.0583,0.1005,286.1,1.8,1.6,-0.5,0,-4.08,-0.4,-2.83,-0.63,-1.14,6.48,2.06,0.61,-0.29,-0.78,-5.27,-14.72,-6.82,6.34,4.24,10.23,12.61,23.43,-8.11,4.67,},
	{15.5,99.5,98585,328,-5,24,-27,299.7,-0.2,1.1,-0.9,0,15.53,-2.7,-0.58,-0.55,-0.07,-7,-0.8,-0.2,0.1,0.2,-35.11,206.63,1.27767,-0.00274,-0.00001,-0.00031,-0.00034,0.60924,-0.06373,-0.02274,-0.00469,-0.0034,2.5365,0.5681,0.2173,0.0973,0.0564,287.5,1.5,1.6,-0.6,0.1,-4.34,-0.13,-2.92,-0.63,-1.17,5.57,1.24,0.39,0.12,-0.55,-4.13,-15.75,-5.69,6.23,4.14,-9.94,13.02,7.76,0.03,2.12,},
	{15.5,100.5,99407,349,-3,28,-29,300.1,-0.8,0.9,-0.8,-0.1,15.75,-2.67,-0.37,-0.79,0.05,-6,-0.7,0.3,-0.4,0.4,-32.75,130.99,1.27773,-0.00297,-0.00011,-0.00026,-0.00041,0.61219,-0.06041,-0.02242,-0.00381,-0.00222,2.5272,0.506,0.2179,0.0444,0.053,287.8,1.2,1.5,-0.6,0,-4.47,0.02,-2.83,-0.7,-1.2,6.23,-0.29,0.87,-0.09,0.01,-3.62,-15.47,-4.59,6.25,4.24,-1.07,9.9,5.8,-0.61,1.64,},
	{15.5,101.5,98458,351,8,23,-30,299.3,-1,0.7,-0.7,-0.1,15.56,-2.78,-0.12,-0.94,0.05,-5.4,0.1,0.5,-0.6,0.4,-30.32,217.87,1.27756,-0.0031,-0.00028,-0.00021,-0.00044,0.60723,-0.05799,-0.02048,-0.00378,-0.00134,2.5582,0.4477,0.2366,0.0071,0.0357,287.3,1,1.4,-0.6,0,-4.82,0.31,-2.74,-0.76,-1.29,5.34,1.19,0.77,-0.24,-0.52,-4.33,-14.62,-2.2,5.7,3.79,-2.25,9.47,7.96,-1.7,2.23,},
	{15.5,102.5,99131,372,11,23,-36,299.7,-1.5,0.8,-0.8,0,15.39,-2.86,-0.3,-0.92,-0.03,-5.4,0.2,0.6,-0.6,0.4,-28.64,158.8,1.2774,-0.00327,-0.00023,-0.0002,-0.00037,0.61036,-0.0553,-0.0182,-0.00442,-0.00063,2.4776,0.388,0.1762,0.009,0.0076,287.5,0.7,1.3,-0.6,0,-5.64,0.55,-2.73,-0.78,-1.33,4.99,0.43,0.62,0.08,-0.32,-6.04,-13.62,-0.18,4.95,3.33,-2.99,3.95,0.69,-1.76,-1.12,},
	{15.5,103.5,99439,376,14,26,-36,299.8,-1.6,0.9,-0.8,0,15.26,-2.92,-0.58,-0.81,-0.13,-5.9,0.3,0.4,-0.3,0.4,-26.58,130.95,1.27733,-0.0032,-0.00012,-0.00023,-0.00033,0.6126,-0.05529,-0.0185,-0.00511,-0.00065,2.443,0.3742,0.124,0.0348,-0.0066,287.6,0.6,1.2,-0.5,0,-6.14,0.43,-2.7,-0.76,-1.27,6.33,-0.02,0.86,0.05,-0.11,-7.43,-13.47,0.86,3.94,2.73,0.43,1.3,0.14,-2.48,-1.79,},
	{15.5,104.5,99441,369,21,28,-34,299.7,-1.5,0.9,-0.9,0,15.33,-3.07,-0.74,-0.71,-0.22,-5.9,0.2,0.2,-0.2,0.3,-23.62,131.27,1.27735,-0.00299,-0.00009,-0.00029,-0.00032,0.61257,-0.05467,-0.01833,-0.00588,-0.00134,2.4527,0.36,0.1013,0.06,-0.0114,287.5,0.6,1.2,-0.5,0,-6.25,0.72,-2.61,-0.76,-1.29,7.88,0.14,0.85,0.08,-0.12,-8.64,-13.13,2.25,2.7,2.36,0.4,2.81,-1.2,-2.07,-3.22,},
	{15.5,105.5,98236,351,33,26,-30,298.7,-1.3,0.9,-1,-0.1,15.21,-3.1,-0.79,-0.6,-0.28,-6,-0.1,0.1,-0.2,0.1,-19.83,241.12,1.27739,-0.00284,-0.00013,-0.00034,-0.00035,0.60586,-0.05374,-0.0188,-0.00669,-0.00278,2.5055,0.3659,0.1093,0.0882,-0.0027,287,0.6,1.1,-0.5,-0.1,-6.34,0.98,-2.59,-0.7,-1.32,8.87,0.12,0.81,0.15,-0.07,-9.86,-11.32,2.51,1.44,1.78,3.04,5.51,-1.67,-2.61,-3.39,},
	{15.5,106.5,93010,320,52,8,-31,295.4,-1.7,0.8,-1,-0.2,14.47,-2.75,-0.73,-0.47,-0.3,-5.4,-0.3,0.1,-0.2,0.1,-15.32,721.58,1.27756,-0.00332,-0.00042,-0.00023,-0.00037,0.57877,-0.05282,-0.01982,-0.00786,-0.00451,2.8258,0.5074,0.1623,0.1604,0.0205,284.8,0.4,1,-0.4,0,-6.09,0.72,-2.65,-0.66,-1.33,8.99,1.78,0.79,0.11,-0.4,-7.83,-7.62,2.91,-0.12,0.92,3.3,8.98,0.41,-2.55,-2.62,},
	{14.5,96.5,100902,284,24,14,18,300.7,-0.3,0,-0.3,-0.7,17.24,-1.88,-0.02,-0.7,-0.18,-8.5,0.8,0.2,0.3,0.5,-44.11,0,1.27811,-0.0017,0.00028,-0.00029,-0.00034,0.62106,-0.06823,-0.03443,-0.00249,-0.00629,3.0399,1.0733,0.7751,0.011,0.344,288.1,1.9,1.6,-0.4,-0.1,-3.19,0.24,-2.27,-0.45,-0.97,9,-0.61,0.05,0.19,-0.07,-9.8,-19.93,-12.72,7.98,6.84,10.12,0.08,11.45,-4.22,1.64,},
	{14.5,97.5,100561,258,18,17,16,300.2,0.1,0.2,-0.4,-0.6,17.08,-1.84,-0.03,-0.69,-0.15,-7.8,0.4,0,0.3,0.2,-40.18,31.51,1.27784,-0.00149,0.00016,-0.00023,-0.00044,0.62119,-0.06786,-0.03251,-0.00316,-0.0064,2.8915,0.9716,0.5943,0.0666,0.2405,287.9,2,1.6,-0.4,-0.1,-3.53,0.27,-2.23,-0.49,-0.97,8.92,-0.74,0.34,-0.07,-0.03,-8.38,-19.1,-10.61,7.18,5.86,13.76,8.73,16.42,-6.95,3.47,},
	{14.5,98.5,97178,255,12,15,-1,298.1,0.4,0.6,-0.6,-0.3,15.81,-2.62,-0.15,-0.8,-0.13,-5.2,-0.9,0.6,-0.5,0.5,-36.58,334.03,1.27794,-0.00193,0.00002,-0.0002,-0.00044,0.60686,-0.06468,-0.02741,-0.00491,-0.00553,2.7624,0.6722,0.4256,0.041,0.14,286.5,1.8,1.5,-0.4,0,-3.71,0.48,-2.17,-0.55,-1.02,6.86,2.02,0.6,-0.26,-0.81,-5.25,-16.16,-4.67,4.86,5.58,8.51,13.35,19.87,-6.82,5.21,},
	{14.5,99.5,98841,296,2,23,-16,299.7,-0.2,0.9,-0.7,-0.1,15.56,-2.54,-0.32,-0.71,-0.05,-6.5,-0.1,0,0.1,0.1,-34.15,184.07,1.27804,-0.00242,0.00003,-0.00019,-0.00038,0.61405,-0.0592,-0.02281,-0.00585,-0.00438,2.5021,0.5053,0.2421,0.0674,0.0746,287.3,1.4,1.5,-0.5,0.1,-4.08,0.93,-2.18,-0.57,-1.17,5.5,1.15,0.35,0.22,-0.54,-4.91,-15.08,-0.36,4.16,6.12,-9.13,11.08,5.65,-0.13,1.75,},
	{14.5,100.5,100088,316,4,27,-17,300.4,-0.8,0.8,-0.6,-0.1,15.91,-2.42,-0.17,-0.89,0.03,-5.5,0.9,-0.2,0.1,-0.1,-31.72,70.9,1.27805,-0.0026,-0.00002,-0.00016,-0.00043,0.61926,-0.05639,-0.02254,-0.00532,-0.0034,2.4888,0.4631,0.2373,0.0295,0.0697,287.9,1.2,1.5,-0.5,0.1,-4.41,1.17,-2.21,-0.6,-1.24,6.69,-0.38,0.84,-0.08,0.06,-7.03,-14.08,1.36,4.33,5.96,-0.06,9.62,4.81,-0.51,2.46,},
	{14.5,101.5,97747,301,17,19,-17,298.8,-0.8,0.6,-0.5,-0.1,15.54,-2.48,0.03,-0.96,0.01,-5.5,0.1,0.6,-0.7,0.4,-28.85,281.53,1.27798,-0.00269,-0.00018,-0.00013,-0.00047,0.60736,-0.05539,-0.02132,-0.00543,-0.00251,2.5951,0.4442,0.2739,0.0119,0.0575,286.9,1.1,1.4,-0.4,0,-4.87,0.91,-2.12,-0.65,-1.17,5.97,0.78,0.72,-0.21,-0.41,-8.09,-11.46,2.72,4.09,5.15,-1.01,7.55,5.37,-1.18,2.35,},
	{14.5,102.5,98477,317,18,21,-23,299.2,-1,0.7,-0.5,0,15.56,-2.61,-0.2,-0.95,-0.13,-5.3,0.2,0.6,-0.6,0.4,-26.39,216.41,1.27796,-0.00275,-0.00011,-0.00011,-0.00039,0.61027,-0.05334,-0.01963,-0.0055,-0.00158,2.5351,0.3818,0.2062,0.0145,0.0186,287.2,1,1.3,-0.4,0,-5.69,1.05,-2.07,-0.64,-1.2,5.83,0.56,0.57,0.09,-0.36,-7.93,-10.99,3.85,3.44,5.19,-2.75,3.68,-0.04,-0.69,-0.59,},
	{14.5,103.5,99484,322,19,24,-25,299.9,-1,0.9,-0.6,0.1,15.61,-2.74,-0.5,-0.93,-0.29,-6,0.2,0.4,-0.4,0.2,-23.99,126.4,1.27793,-0.0026,0.00003,-0.0001,-0.0003,0.61585,-0.05262,-0.01989,-0.00547,-0.00146,2.4655,0.3366,0.1501,0.0205,-0.0072,287.6,0.9,1.3,-0.4,0,-6.44,1.24,-1.95,-0.64,-1.23,6.59,-0.03,0.74,0.03,-0.13,-7.23,-12.22,4.82,2.16,5.28,0.78,2.07,-1.18,-1.05,-1.49,},
	{14.5,104.5,99471,313,24,25,-23,299.9,-0.7,1,-0.6,0.1,15.65,-2.92,-0.7,-0.85,-0.43,-6.1,-0.1,0.1,-0.3,0,-21.01,127.66,1.27794,-0.00235,0.0001,-0.00013,-0.00027,0.6162,-0.05185,-0.01993,-0.00559,-0.00186,2.4636,0.3072,0.1206,0.036,-0.0233,287.6,0.9,1.3,-0.4,0,-6.68,0.97,-1.86,-0.6,-1.15,7.98,0.13,0.78,0.04,-0.16,-7.03,-12.93,5.3,0.39,4.83,1.04,2.48,-1.73,-0.4,-2.64,},
	{14.5,105.5,99112,302,32,26,-19,299.6,-0.4,1.1,-0.7,0,15.66,-3.1,-0.85,-0.75,-0.49,-5.9,-0.3,-0.1,-0.3,-0.1,-17.27,161,1.27795,-0.00209,0.00013,-0.00021,-0.0003,0.61389,-0.05023,-0.01976,-0.00582,-0.00273,2.4769,0.2852,0.1076,0.0525,-0.0197,287.4,0.8,1.2,-0.4,-0.1,-6.57,0.53,-1.76,-0.55,-1.05,8.88,-0.1,0.76,0.03,-0.05,-4.4,-12.25,5.94,-2.11,4.24,1.45,3.82,-2.29,-0.5,-3.03,},
	{14.5,106.5,97020,296,46,23,-15,298.1,-0.5,1,-0.9,-0.2,15.22,-3.03,-0.92,-0.55,-0.39,-6,-0.7,-0.2,-0.2,0.1,-12.68,351.14,1.27791,-0.00222,0.00004,-0.00029,-0.00038,0.60162,-0.0483,-0.02042,-0.00627,-0.00401,2.5563,0.3086,0.1249,0.0891,0.0172,286.5,0.6,1.2,-0.4,-0.1,-6.31,0.81,-1.6,-0.48,-1.06,8.95,0.88,0.78,0.07,-0.19,0.51,-9.61,7.67,-4.72,4,0.21,6.59,-2.13,-0.49,-2.88,},
	{13.5,96.5,100912,257,25,12,24,300.8,-0.2,0.1,-0.3,-0.6,17.14,-1.81,-0.02,-0.64,-0.19,-9.1,0.2,-0.1,0.2,0.2,-43.54,0,1.27835,-0.0016,0.00021,-0.00016,-0.00037,0.62561,-0.06331,-0.03216,-0.00384,-0.00788,2.8702,0.8667,0.6097,0.0376,0.2775,288,1.8,1.6,-0.3,0,-2.98,0.94,-1.64,-0.44,-0.84,9.93,-0.5,0.07,0.17,-0.1,-10.2,-22.41,-11.55,6.01,5.81,9.63,-0.47,9.62,-4.08,2.47,},
	{13.5,97.5,100921,238,20,15,23,300.6,0.1,0.2,-0.3,-0.6,17.19,-1.62,0.09,-0.63,-0.08,-8.5,0.3,-0.1,0.2,0.2,-39.42,0,1.27819,-0.00141,0.00012,-0.00012,-0.00049,0.6272,-0.0625,-0.03029,-0.00444,-0.00758,2.7962,0.8507,0.5118,0.086,0.2208,287.9,1.9,1.5,-0.3,0,-3.52,0.67,-1.64,-0.47,-0.81,8.9,-0.66,0.27,0,-0.03,-7.35,-20.72,-7.78,4.61,5.22,10.12,6.9,12.38,-4.93,4.34,},
	{13.5,98.5,98084,228,15,15,10,298.5,0.3,0.5,-0.5,-0.4,16.21,-2.23,0.03,-0.8,-0.06,-5.8,0.4,0.1,0.1,0.3,-35.9,252.98,1.27819,-0.00162,0.00008,-0.00013,-0.0005,0.61541,-0.05973,-0.02697,-0.00569,-0.00667,2.7367,0.6518,0.4201,0.0541,0.161,286.7,1.7,1.5,-0.3,0,-3.65,0.86,-1.6,-0.55,-0.9,7.47,1.35,0.57,-0.22,-0.63,-6.08,-16.32,-2.19,2.95,5.54,8.61,11.24,14.27,-5.42,4.54,},
	{13.5,99.5,99039,258,10,21,-3,299.5,-0.1,0.7,-0.6,-0.2,15.94,-2.26,-0.08,-0.78,-0.04,-5.9,0.3,0.1,0.1,0.2,-33.05,167.27,1.27827,-0.00203,0.00008,-0.00012,-0.00044,0.61909,-0.05536,-0.02377,-0.00666,-0.00563,2.5463,0.5007,0.2959,0.0567,0.107,287.2,1.4,1.5,-0.3,0.1,-4.15,1.21,-1.65,-0.5,-1,5.57,1.35,0.38,0.2,-0.6,-7.68,-14.87,0.87,2.52,6.23,-7.8,9.99,3.94,-0.4,1.59,},
	{13.5,100.5,100813,282,14,25,-4,300.7,-0.7,0.5,-0.4,-0.2,16.56,-2.15,0.08,-0.93,0.03,-6,0.9,-0.1,0.1,0.1,-30.6,7.85,1.27817,-0.00218,0.00003,-0.00007,-0.00046,0.62651,-0.05268,-0.02314,-0.00643,-0.00468,2.5368,0.4585,0.2959,0.0248,0.1056,288,1.3,1.4,-0.3,0.1,-4.13,1.15,-1.59,-0.49,-0.98,6.75,-0.47,0.73,0,0.09,-7.48,-14.47,2.17,2.11,6.88,0.33,8.19,3.36,0.04,2.67,},
	{13.5,101.5,99852,270,23,21,-3,300,-0.6,0.4,-0.3,-0.2,16.51,-2.28,0.15,-1,0.01,-6.1,0.6,0.3,-0.1,0.1,-27.38,93.67,1.27803,-0.00211,-0.00009,-0.00004,-0.00052,0.62218,-0.05192,-0.02171,-0.00658,-0.00388,2.5741,0.4119,0.2931,0.0095,0.0874,287.6,1.2,1.3,-0.3,0,-4.24,1.34,-1.42,-0.6,-1.04,6.92,0.59,0.7,-0.2,-0.34,-8.22,-12.25,2.75,1.52,7.07,1.24,5.71,5.09,-1.05,2.39,},
	{13.5,102.5,99791,275,23,21,-9,299.9,-0.5,0.6,-0.4,-0.1,16.38,-2.41,-0.09,-1.04,-0.19,-5.9,0.4,0.4,-0.2,0.2,-24.23,99.47,1.27811,-0.00213,-0.00001,0,-0.00041,0.62053,-0.04975,-0.01984,-0.00664,-0.00308,2.5442,0.3585,0.2346,0.0051,0.0434,287.6,1.1,1.3,-0.3,0,-5.03,1.42,-1.4,-0.52,-1.08,6.59,0.68,0.46,0.02,-0.44,-9.83,-11.75,2.11,1.23,6.98,-3.88,4.67,-0.25,0.1,-0.59,},
	{13.5,103.5,100553,282,21,24,-13,300.3,-0.5,0.8,-0.3,0.1,16.36,-2.61,-0.36,-1.1,-0.44,-5.4,0.7,0.2,-0.2,0.1,-21.55,31.62,1.27813,-0.00205,0.00016,0.00004,-0.00027,0.6232,-0.04843,-0.02033,-0.00568,-0.00257,2.49,0.2983,0.1895,-0.0092,0.0059,287.9,1,1.3,-0.4,0,-5.39,1.2,-1.32,-0.45,-0.99,6.9,0.12,0.6,0.04,-0.19,-7.47,-12.66,2.85,-0.26,6.77,-1.97,2.62,-3.09,1.15,-1.3,},
	{13.5,104.5,100136,276,26,23,-12,300.1,-0.2,0.9,-0.3,0.1,16.2,-2.84,-0.63,-1.04,-0.6,-5.2,0.6,0.1,-0.3,-0.1,-18.5,68.12,1.27815,-0.00188,0.00024,0.00002,-0.00022,0.62116,-0.04801,-0.02135,-0.00456,-0.00263,2.485,0.2553,0.1542,-0.0062,-0.0172,287.8,1,1.3,-0.4,0,-5.38,1.24,-1.19,-0.42,-1,7.98,0.14,0.7,-0.05,-0.17,-4.96,-12.23,4.5,-2.28,6.11,1.12,2.25,-2.18,1.4,-1.91,},
	{13.5,105.5,100001,272,32,26,-8,299.9,-0.1,1,-0.5,0,16.24,-3.04,-0.85,-0.92,-0.62,-5.4,-0.1,-0.1,0,-0.1,-14.76,80.93,1.27819,-0.00164,0.0003,-0.00009,-0.00026,0.61986,-0.04616,-0.02143,-0.00384,-0.00321,2.5,0.2408,0.1321,0.0089,-0.0091,287.7,0.9,1.3,-0.4,-0.1,-5.4,1.41,-1.1,-0.34,-1.05,8.88,0.05,0.64,0,-0.05,-5.06,-11.18,4.72,-3.59,5.52,-1.08,2.26,-2.97,1.79,-2.74,},
	{13.5,106.5,99519,276,40,30,-2,299.4,-0.2,1,-0.8,-0.3,15.96,-3.07,-0.99,-0.68,-0.48,-5.8,-0.8,-0.1,-0.3,0.1,-10.24,125.7,1.2782,-0.00161,0.00035,-0.00028,-0.00037,0.61549,-0.04335,-0.02171,-0.00347,-0.00446,2.495,0.2473,0.1366,0.0364,0.0331,287.5,0.7,1.3,-0.5,-0.1,-5.4,1.33,-0.96,-0.31,-0.98,9.21,0.37,0.63,0.03,-0.08,-5.38,-10.35,4.39,-5.17,5.65,-1.87,5.13,-3.74,1.95,-3.54,},
	{12.5,96.5,100919,229,22,11,29,300.9,-0.1,0.2,-0.2,-0.5,17.17,-1.61,-0.03,-0.55,-0.21,-9.2,0,-0.2,0,0.1,-42.75,0,1.27843,-0.00152,0.00022,-0.0001,-0.00041,0.62953,-0.05739,-0.02998,-0.00475,-0.00897,2.7611,0.7159,0.4975,0.058,0.2373,287.8,1.6,1.5,-0.2,0,-2.89,1.18,-1.05,-0.38,-0.65,10.91,-0.41,0.09,0.13,-0.09,-8.96,-24.72,-8.5,3.67,5.47,8.68,-1.18,6.86,-3.32,3.06,},
	{12.5,97.5,100922,217,19,14,28,300.8,0,0.2,-0.3,-0.5,17.28,-1.43,0.1,-0.56,-0.12,-8.8,0.3,-0.1,0.2,0.1,-38.13,0,1.2785,-0.00137,0.00017,-0.00007,-0.00051,0.63071,-0.0565,-0.02857,-0.00497,-0.00836,2.7418,0.7374,0.4527,0.0911,0.2047,287.8,1.7,1.5,-0.2,0,-3.59,1.13,-1.01,-0.38,-0.63,9.04,-0.42,0.2,0.06,-0.08,-7.68,-23.35,-5.47,2.38,5.83,6.88,4.36,7.98,-2.87,3.96,},
	{12.5,98.5,99523,206,16,16,21,299.4,0.2,0.4,-0.4,-0.4,16.76,-1.79,0.04,-0.68,-0.11,-6.2,0,0,-0.1,0.3,-34.72,124.9,1.27831,-0.00135,0.00018,-0.00008,-0.00054,0.62564,-0.05448,-0.02644,-0.00574,-0.00763,2.6841,0.6161,0.3837,0.0745,0.1601,287.1,1.6,1.5,-0.2,0.1,-3.79,1.24,-1,-0.43,-0.69,7.86,0.7,0.53,-0.17,-0.43,-5.24,-20.09,-1.32,0.57,6.74,9.14,8.63,9.86,-4.21,3.62,},
	{12.5,99.5,97987,222,19,17,9,298.6,0,0.6,-0.5,-0.3,16.15,-1.97,0,-0.75,-0.07,-6.2,0,0.1,-0.1,0.2,-31.5,261.26,1.27844,-0.00178,0.00014,-0.00009,-0.00048,0.61747,-0.05167,-0.0244,-0.00653,-0.00694,2.6701,0.52,0.3529,0.0553,0.1516,286.5,1.4,1.4,-0.3,0.1,-3.89,1.43,-1.04,-0.42,-0.8,5.88,1.29,0.47,0.1,-0.56,-4.56,-16.83,1.81,-0.77,7.18,-6.46,8.16,2.5,0.07,1.43,},
	{12.5,100.5,100877,250,23,21,9,300.8,-0.6,0.3,-0.4,-0.3,17.12,-1.63,0.2,-0.77,0,-7.4,0.6,0.1,0.1,0.1,-29.05,3.2,1.27826,-0.00191,0.00007,-0.00005,-0.00049,0.62973,-0.04892,-0.02335,-0.00634,-0.00617,2.6273,0.5164,0.3439,0.0552,0.144,287.8,1.2,1.4,-0.2,0.1,-4.34,1.66,-1.11,-0.35,-0.91,6.42,-0.29,0.53,0.07,0.02,-6,-15.65,3.04,-1.74,7.88,-0.19,6.11,2.31,0.77,2.29,},
	{12.5,101.5,100420,238,30,19,12,300.5,-0.5,0.2,-0.2,-0.3,17.14,-1.67,0.17,-0.79,-0.03,-7.4,0.8,0,0.2,0.1,-26,43.45,1.27808,-0.0018,-0.00001,-0.00002,-0.00056,0.62826,-0.04925,-0.02266,-0.00596,-0.00554,2.6371,0.4854,0.3202,0.0485,0.1225,287.7,1.2,1.3,-0.2,0,-4.28,1.69,-1.02,-0.38,-0.91,7.39,0.07,0.64,-0.16,-0.16,-6.25,-13.37,4.11,-2.66,7.61,3.16,3.78,4.38,-0.19,2.51,},
	{12.5,102.5,98576,226,31,16,6,299.2,-0.1,0.4,-0.2,-0.2,16.47,-1.98,0.01,-0.9,-0.17,-6.4,0.1,0.4,-0.5,0.1,-22.43,208.82,1.27818,-0.00181,0.00001,0.00001,-0.0005,0.61921,-0.04822,-0.02115,-0.00598,-0.00501,2.631,0.4044,0.2855,0.0206,0.0908,286.9,1.2,1.3,-0.3,0,-4.74,2.08,-0.92,-0.37,-1.01,7.49,0.45,0.45,-0.14,-0.36,-10.41,-11.41,3.62,-2.73,6.66,0.52,4.86,1.59,-0.07,0.14,},
	{12.5,103.5,98902,234,30,17,-1,299.4,0,0.7,-0.2,0,16.25,-2.23,-0.25,-0.95,-0.42,-5.5,-0.4,0.2,-0.5,-0.1,-19.42,180.36,1.27815,-0.00181,0.00013,0.00006,-0.00034,0.61909,-0.04561,-0.02078,-0.00526,-0.00444,2.553,0.3208,0.2291,0.0045,0.0453,287.1,1.1,1.3,-0.3,0,-5.34,2.11,-0.86,-0.24,-0.99,6.67,0.62,0.48,0.02,-0.35,-14.64,-11.62,1.75,-2.12,6.51,-4.41,3.12,-3.48,2.26,-1.12,},
	{12.5,104.5,100229,245,30,20,-3,300.1,0,0.8,-0.2,0.1,16.49,-2.57,-0.53,-1,-0.65,-5,0.2,0,-0.2,0,-16.42,60.86,1.2781,-0.00164,0.00027,0.00009,-0.00022,0.62418,-0.04386,-0.02208,-0.00359,-0.00426,2.497,0.2461,0.1843,-0.0127,0.01,287.7,0.9,1.3,-0.4,0,-5.13,1.78,-0.78,-0.21,-0.92,7.76,0.02,0.6,-0.07,-0.07,-12.42,-13.23,2.02,-2.45,6.92,-1.5,2.66,-3.49,2.5,-1.54,},
	{12.5,105.5,100358,242,34,22,2,299.9,0,0.9,-0.4,-0.1,16.59,-2.84,-0.77,-0.93,-0.67,-4.7,0.1,-0.2,-0.3,-0.1,-12.67,49.03,1.27813,-0.00139,0.00035,0.00001,-0.00027,0.62433,-0.0424,-0.0229,-0.00238,-0.00483,2.5021,0.2083,0.1579,-0.0138,0.0122,287.7,0.8,1.3,-0.4,0,-4.77,1.92,-0.67,-0.18,-0.98,8.78,-0.18,0.52,-0.09,-0.04,-11.24,-15.12,2.15,-2.77,6.36,0.53,2.55,-2.06,2.35,-1.98,},
	{12.5,106.5,99161,233,40,22,6,299.2,-0.1,1,-0.7,-0.3,16.07,-2.82,-0.9,-0.68,-0.53,-5.7,-0.7,-0.1,-0.2,0.1,-8.22,157.46,1.27826,-0.0013,0.00041,-0.00017,-0.00037,0.6178,-0.04012,-0.02312,-0.00165,-0.00601,2.501,0.2236,0.1617,0.0135,0.0517,287.2,0.7,1.3,-0.5,-0.1,-4.63,2.47,-0.46,-0.12,-1.03,9.21,-0.07,0.4,-0.04,-0.07,-14.62,-15.17,0.79,-2.5,5.03,0.92,4.72,-2.84,2.72,-3.27,},
	{11.5,96.5,100923,201,17,10,32,300.9,-0.1,0.3,-0.2,-0.4,17.24,-1.38,-0.02,-0.46,-0.25,-9.2,0,-0.2,0,0,-41.47,0,1.27847,-0.00147,0.00027,-0.00009,-0.00042,0.63289,-0.05063,-0.02799,-0.00533,-0.0098,2.6919,0.5934,0.4292,0.0624,0.2193,287.7,1.5,1.5,-0.1,0.1,-3.52,1.65,-0.58,-0.27,-0.49,11.48,-0.3,0.07,0.12,-0.11,-7.86,-25.34,-7.42,1.69,5.9,7.35,-1.37,4.38,-2.27,2.86,},
	{11.5,97.5,100924,194,15,14,31,300.8,-0.1,0.3,-0.2,-0.4,17.33,-1.27,0.06,-0.5,-0.2,-9,0.2,-0.1,0.1,0,-36.3,0,1.27868,-0.00135,0.00025,-0.00006,-0.00048,0.63412,-0.04989,-0.02713,-0.00522,-0.0093,2.6827,0.6101,0.4053,0.0785,0.1958,287.6,1.5,1.4,-0.2,0.1,-3.82,1.4,-0.58,-0.26,-0.44,9.45,-0.23,0.17,0.07,-0.13,-6.72,-25.13,-4.94,0.45,6.59,5.72,2.94,4.77,-1.28,3.04,},
	{11.5,98.5,100056,186,13,16,27,299.8,0,0.5,-0.3,-0.3,17.08,-1.47,-0.03,-0.58,-0.23,-7.1,-0.5,-0.2,0.4,0,-32.7,77.21,1.27847,-0.0013,0.00029,-0.00008,-0.0005,0.63104,-0.04837,-0.02573,-0.00527,-0.00885,2.6589,0.543,0.3565,0.0657,0.1626,287.2,1.4,1.4,-0.2,0.1,-4.13,1.26,-0.56,-0.33,-0.45,8.08,0.44,0.48,-0.08,-0.32,-5.33,-23.68,-1.69,-1.5,7.43,6.98,6.65,5.87,-1.95,2.45,},
	{11.5,99.5,99565,200,18,18,21,299.4,-0.1,0.5,-0.4,-0.3,16.98,-1.48,0,-0.61,-0.18,-6.4,-0.2,0,-0.2,0.2,-29.56,120.55,1.27846,-0.00154,0.00027,-0.0001,-0.00047,0.62797,-0.04623,-0.02449,-0.00531,-0.00828,2.6724,0.5014,0.3517,0.0535,0.1642,287,1.2,1.4,-0.2,0.1,-4.34,1.52,-0.51,-0.41,-0.56,6.09,1.16,0.54,0.08,-0.45,-4.96,-22.06,1.02,-3.64,7.99,-5.47,6.68,0.52,1.59,1.19,},
	{11.5,100.5,100921,218,26,19,21,300.8,-0.4,0.3,-0.3,-0.4,17.45,-1.22,0.15,-0.57,-0.1,-8.5,0.4,0,0.1,0.1,-27.05,0,1.27829,-0.00173,0.00019,-0.0001,-0.00049,0.63349,-0.04502,-0.02404,-0.00474,-0.0076,2.6518,0.4991,0.3583,0.0535,0.1656,287.7,1.1,1.3,-0.2,0.1,-4.47,1.84,-0.46,-0.4,-0.69,6.4,-0.16,0.44,0.07,-0.03,-6.83,-21.35,2.32,-4.95,8.27,1.14,4.07,2.01,1.15,2.41,},
	{11.5,101.5,100920,213,32,17,23,301,-0.4,0.2,-0.2,-0.4,17.37,-1.26,0.1,-0.57,-0.12,-8.9,0.4,0,0.1,0,-24.19,0,1.27811,-0.00166,0.00011,-0.00006,-0.00056,0.6339,-0.04574,-0.02394,-0.00389,-0.00682,2.609,0.464,0.3262,0.0474,0.1414,287.7,1.1,1.3,-0.2,0,-4.26,1.64,-0.36,-0.44,-0.64,7.21,0.03,0.55,-0.09,-0.13,-7.01,-19.31,3.63,-5.58,8.33,2.59,1.54,2.17,1.13,2.53,},
	{11.5,102.5,100521,199,34,15,22,300.4,-0.1,0.2,-0.1,-0.3,17.36,-1.35,0.04,-0.64,-0.19,-8.1,0.3,-0.1,0.2,0,-20.55,36.32,1.27806,-0.00148,0.00009,0,-0.00056,0.63211,-0.04519,-0.02329,-0.00347,-0.00635,2.6068,0.4418,0.2956,0.0413,0.1166,287.5,1.2,1.3,-0.3,0,-3.99,1.66,-0.32,-0.51,-0.72,8.11,-0.21,0.41,-0.19,-0.17,-4.78,-16.81,5.5,-6.66,7.99,3.96,3.55,2.29,-0.08,0.94,},
	{11.5,103.5,97761,194,36,13,13,298.4,0.1,0.5,-0.1,-0.2,16.42,-1.95,-0.18,-0.8,-0.35,-5.7,-0.1,0,-0.4,-0.1,-17.14,282.16,1.27821,-0.00159,0.00013,0,-0.00045,0.6181,-0.04354,-0.0233,-0.00299,-0.00654,2.6403,0.3248,0.2773,-0.0047,0.0972,286.4,1,1.3,-0.3,0,-4.13,1.93,-0.32,-0.44,-0.82,7.03,0.72,0.47,-0.13,-0.36,-6.43,-14.52,4.66,-6.07,6.72,-1.36,3.41,-1.61,1.46,-0.84,},
	{11.5,104.5,99999,212,34,17,10,299.7,0,0.8,-0.3,0,16.75,-2.21,-0.51,-0.79,-0.59,-5.4,0,-0.1,0.1,0,-14.16,82.06,1.27805,-0.00148,0.00028,0.00004,-0.00029,0.62707,-0.03996,-0.02357,-0.00208,-0.00662,2.5125,0.2406,0.202,-0.0066,0.049,287.4,0.9,1.3,-0.4,0,-4.59,2.12,-0.32,-0.31,-0.92,7.2,0.29,0.47,-0.06,-0.12,-10.46,-16.77,3.05,-5.98,6.62,-3.57,5.08,-3.71,2.86,-1.69,},
	{11.5,105.5,100766,214,35,18,13,300,0,0.9,-0.4,-0.1,16.8,-2.42,-0.76,-0.74,-0.66,-4.8,0.1,-0.4,0,0,-10.51,13.3,1.27805,-0.0013,0.00041,-0.00001,-0.00029,0.62999,-0.03752,-0.02419,-0.00091,-0.00698,2.4617,0.1842,0.1689,-0.0157,0.0403,287.7,0.7,1.3,-0.4,0,-4.35,1.9,-0.16,-0.36,-0.85,8.65,-0.35,0.37,-0.09,-0.01,-10.88,-19.83,3.17,-7.29,6.67,1.72,4.71,-1.95,3.35,-1.22,},
	{11.5,106.5,100020,198,39,17,16,299.7,0.1,0.9,-0.5,-0.3,16.49,-2.47,-0.85,-0.62,-0.58,-5.7,-0.2,-0.4,0.2,0,-6.05,80.37,1.27826,-0.00104,0.00051,-0.00011,-0.00038,0.62628,-0.03538,-0.02449,0.00027,-0.00752,2.4588,0.1798,0.1792,-0.0182,0.061,287.4,0.7,1.3,-0.5,0,-4.02,1.64,-0.08,-0.39,-0.75,9.01,-0.43,0.25,-0.09,-0.08,-8.14,-20.28,4.54,-9.29,5.74,0.87,4.22,-3.15,3.93,-1.97,},
	{10.5,96.5,100925,172,10,9,34,301,-0.2,0.4,-0.2,-0.3,17.3,-1.14,-0.01,-0.38,-0.3,-9.3,-0.1,-0.1,0,0,-39.66,0,1.27856,-0.00142,0.00034,-0.0001,-0.00038,0.63588,-0.04381,-0.02583,-0.00533,-0.01071,2.6409,0.486,0.3799,0.0558,0.213,287.5,1.3,1.4,-0.1,0.2,-3.95,1.97,-0.16,-0.24,-0.37,11.69,-0.23,0.03,0.13,-0.13,-7.49,-26.24,-7.22,-0.7,5.74,5.54,-1.03,2.74,-1.14,2.37,},
	{10.5,97.5,100926,168,9,12,33,300.9,-0.2,0.4,-0.2,-0.3,17.4,-1.05,0.04,-0.4,-0.28,-9.2,0.1,-0.1,0,0,-34.36,0,1.27877,-0.00134,0.00035,-0.00009,-0.00041,0.63696,-0.04318,-0.02549,-0.00496,-0.01036,2.6409,0.4989,0.3694,0.0602,0.1968,287.5,1.2,1.4,-0.1,0.2,-4.24,2.05,-0.07,-0.25,-0.38,9.82,-0.15,0.11,0.06,-0.14,-6.14,-26.59,-5.74,-1.71,6.25,4.91,2.88,2.36,-0.04,2.24,},
	{10.5,98.5,100004,165,9,15,29,299.8,-0.2,0.5,-0.3,-0.2,17.22,-1.13,-0.08,-0.46,-0.35,-7.2,-0.4,-0.2,0,-0.1,-30.54,81.63,1.27857,-0.00136,0.00041,-0.00012,-0.00042,0.63316,-0.04175,-0.02486,-0.00439,-0.01017,2.6525,0.4653,0.3397,0.0469,0.171,287,1.2,1.4,-0.2,0.1,-4.25,1.89,-0.04,-0.27,-0.39,8.1,0.56,0.45,0.01,-0.29,-4.61,-25.91,-3.38,-3.08,6.78,5.09,5.75,2.69,0.38,1.52,},
	{10.5,99.5,100657,180,14,18,28,300.2,-0.3,0.5,-0.3,-0.2,17.51,-1.06,-0.02,-0.49,-0.31,-7.6,0.4,-0.1,0,0,-27.44,24.01,1.27837,-0.00154,0.00041,-0.00017,-0.00041,0.6354,-0.03972,-0.0243,-0.0037,-0.00975,2.6411,0.4299,0.3418,0.0255,0.1671,287.3,1.1,1.3,-0.2,0.1,-4.33,1.84,-0.01,-0.33,-0.44,6.29,0.92,0.54,0.14,-0.31,-4.37,-25.54,-0.97,-4.79,7.37,-4.45,5.76,-1.57,3.21,0.92,},
	{10.5,100.5,100926,191,23,18,29,300.8,-0.4,0.3,-0.2,-0.3,17.52,-1,0.1,-0.47,-0.22,-9,0.2,0,0,0,-24.85,0,1.27823,-0.00169,0.00033,-0.00017,-0.00045,0.63641,-0.03936,-0.02453,-0.0029,-0.00908,2.6253,0.4104,0.364,0.0108,0.1759,287.5,1,1.3,-0.2,0.1,-4.56,1.89,0,-0.35,-0.49,6.38,-0.11,0.42,0.04,-0.03,-4.45,-24.24,0.94,-5.72,7.69,1.6,2.35,0.97,1.55,2.4,},
	{10.5,101.5,100925,189,29,16,30,301.1,-0.4,0.2,-0.1,-0.3,17.29,-1.11,0.02,-0.48,-0.24,-9.3,0.1,-0.1,0,0,-21.95,0,1.27808,-0.00163,0.00027,-0.00014,-0.0005,0.63655,-0.03977,-0.02447,-0.00215,-0.00844,2.5621,0.3723,0.3327,0.0048,0.154,287.5,1,1.3,-0.2,0,-4.47,1.97,0.02,-0.32,-0.53,6.92,0.11,0.45,-0.06,-0.13,-3.49,-22.62,2.52,-6.12,7.9,1.4,-0.47,0.26,1.81,2.23,},
	{10.5,102.5,100928,184,32,16,31,301,-0.3,0.2,-0.1,-0.4,17.33,-1.13,-0.02,-0.5,-0.24,-8.9,0.2,-0.1,0,0,-18.41,0,1.27803,-0.00149,0.00023,-0.00009,-0.00053,0.63572,-0.03925,-0.02437,-0.0011,-0.00808,2.5556,0.3763,0.3169,0.0045,0.1416,287.6,0.9,1.3,-0.3,0,-4.25,1.88,0.11,-0.35,-0.55,7.9,-0.25,0.37,-0.13,-0.07,-2.49,-20.59,4.16,-7.05,7.89,1.93,1.17,0.63,1.35,1.46,},
	{10.5,103.5,100518,179,34,16,28,300.5,-0.2,0.4,-0.1,-0.3,17.32,-1.31,-0.15,-0.55,-0.33,-8,0.3,-0.1,0.1,-0.1,-14.81,36.54,1.27804,-0.00136,0.00025,-0.00006,-0.00048,0.6334,-0.03804,-0.02458,-0.00019,-0.00814,2.5735,0.3544,0.2929,0.0005,0.1253,287.4,0.9,1.3,-0.3,0,-4.16,1.92,0.2,-0.4,-0.62,7.64,0.36,0.43,-0.21,-0.23,-1.9,-18.88,4.88,-8.27,7.14,1.97,2.83,-0.48,1.35,-0.08,},
	{10.5,104.5,100446,185,33,17,23,300.1,-0.2,0.7,-0.3,-0.2,17.08,-1.66,-0.46,-0.55,-0.51,-6.4,0.5,-0.3,0.2,-0.1,-11.64,42.5,1.27798,-0.00136,0.00037,-0.00009,-0.00037,0.63236,-0.03543,-0.02483,0.00072,-0.00828,2.5228,0.2657,0.2386,-0.0122,0.0937,287.4,0.7,1.3,-0.4,0,-4.5,2.26,0.27,-0.38,-0.75,7.27,0.4,0.35,-0.11,-0.2,-4.02,-18.32,3.83,-8.9,5.91,-0.89,6.31,-2.32,3.05,-1.2,},
	{10.5,105.5,100874,189,35,17,24,300.1,-0.2,0.8,-0.4,-0.2,16.96,-1.85,-0.69,-0.5,-0.61,-5.5,0.2,-0.6,0.3,-0.1,-8.04,4.52,1.27798,-0.00129,0.00051,-0.00015,-0.00034,0.63352,-0.03236,-0.02489,0.00198,-0.00848,2.4673,0.2053,0.2138,-0.0285,0.0794,287.5,0.6,1.3,-0.5,0,-4.63,2.24,0.34,-0.35,-0.71,8.3,-0.12,0.26,-0.03,-0.09,-4.66,-17.28,4.01,-9.7,5.29,-0.13,4.94,-3.57,5.05,-1.04,},
	{10.5,106.5,100807,186,43,15,28,300.1,-0.3,0.6,-0.4,-0.5,17.1,-1.77,-0.58,-0.49,-0.54,-6.4,0.2,-0.5,0.3,0.1,-3.91,10.77,1.27813,-0.00111,0.00056,-0.00019,-0.0004,0.632,-0.02939,-0.0253,0.00373,-0.0085,2.5327,0.2411,0.2848,-0.058,0.1076,287.5,0.5,1.2,-0.5,-0.1,-3.97,1.89,0.37,-0.36,-0.66,8.47,-0.14,0.24,-0.11,-0.11,-0.52,-15.6,6.38,-11.25,4.84,-4.3,3.33,-5.47,6.18,-0.87,},
	{9.5,96.5,100924,144,3,8,35,301,-0.2,0.4,-0.2,-0.2,17.33,-0.92,-0.01,-0.29,-0.34,-9.3,0,-0.1,0,0,-37.38,0,1.2787,-0.00142,0.0004,-0.00011,-0.00033,0.63891,-0.03672,-0.02348,-0.00471,-0.0114,2.5898,0.3758,0.3288,0.0462,0.2066,287.4,1,1.3,-0.1,0.2,-4.29,1.87,0.01,-0.13,-0.22,11.54,-0.22,-0.05,0.13,-0.11,-8.72,-28.45,-8.7,-1.3,4.2,3.34,-0.48,2.16,-0.56,2.21,},
	{9.5,97.5,100925,139,0,11,34,300.9,-0.2,0.5,-0.2,-0.2,17.42,-0.87,-0.04,-0.3,-0.37,-9,0,-0.1,0,0,-32.29,0,1.27883,-0.00133,0.00045,-0.00012,-0.00034,0.63966,-0.03601,-0.02313,-0.00433,-0.01107,2.5915,0.3805,0.3109,0.0493,0.1856,287.4,1,1.3,-0.1,0.2,-4.21,1.86,0.06,-0.14,-0.25,10.12,-0.24,0.04,0.07,-0.12,-7.78,-28.57,-8.83,-1.28,4.03,4.75,2.96,1.6,0.42,2.02,},
	{9.5,98.5,99593,136,1,14,30,299.5,-0.2,0.7,-0.3,-0.1,17.12,-0.91,-0.19,-0.32,-0.47,-6.9,0.2,-0.3,-0.2,-0.2,-28.14,118.1,1.2787,-0.00137,0.00051,-0.00018,-0.00035,0.63376,-0.03452,-0.02279,-0.00357,-0.01094,2.6257,0.3645,0.2906,0.0395,0.1616,286.8,1,1.3,-0.2,0.2,-4.57,1.94,0.12,-0.17,-0.31,8.2,0.54,0.37,0.03,-0.25,-6.95,-26.68,-7.71,-1.59,3.96,3.12,4.61,0.28,1.85,0.97,},
	{9.5,99.5,100496,154,8,17,31,299.9,-0.4,0.5,-0.3,-0.1,17.44,-0.82,-0.11,-0.39,-0.48,-7.1,0.2,-0.1,-0.1,-0.1,-24.73,38.34,1.27843,-0.00158,0.00051,-0.00022,-0.00034,0.6367,-0.03258,-0.02285,-0.00229,-0.01062,2.6044,0.3374,0.3081,0.0014,0.1525,287.2,0.8,1.3,-0.2,0.2,-5.05,2.12,0.22,-0.19,-0.38,6.62,0.83,0.51,0.18,-0.23,-6.24,-25.55,-5.64,-3.04,4.65,-3.79,4.4,-3.77,4.64,0.36,},
	{9.5,100.5,100929,168,19,17,34,300.8,-0.6,0.3,-0.1,-0.3,17.49,-0.76,0.04,-0.42,-0.39,-8.8,0.1,-0.1,-0.1,0,-22.11,0,1.27826,-0.00173,0.00042,-0.00022,-0.00039,0.6378,-0.03241,-0.02396,-0.00098,-0.01015,2.5942,0.327,0.3504,-0.0251,0.1671,287.4,0.7,1.2,-0.3,0.1,-5.05,2.03,0.26,-0.23,-0.41,6.13,0.03,0.4,0.06,-0.03,-4.16,-24.55,-2.78,-4.8,5.57,-1.25,0.99,-1.68,2.7,1.8,},
	{9.5,101.5,100928,168,25,16,36,301.1,-0.6,0.2,-0.1,-0.3,17.26,-0.86,0,-0.4,-0.35,-9.3,0,-0.1,0,-0.1,-19.36,0,1.27812,-0.00165,0.00039,-0.00021,-0.00045,0.63746,-0.03289,-0.02452,-0.00015,-0.00976,2.5514,0.3131,0.3473,-0.0318,0.1637,287.4,0.7,1.2,-0.3,0.1,-4.85,1.94,0.35,-0.28,-0.43,6.8,0,0.35,-0.05,-0.08,-1.54,-23.8,-0.09,-6.08,6.16,0.66,-1.52,-1.45,2.39,2.01,},
	{9.5,102.5,100931,167,29,16,37,301.1,-0.6,0.2,-0.1,-0.4,17.21,-0.93,-0.04,-0.41,-0.33,-9.3,0,-0.1,0,-0.1,-15.92,0,1.2781,-0.00153,0.00038,-0.0002,-0.00048,0.63699,-0.03243,-0.02455,0.00104,-0.00932,2.5395,0.3155,0.3455,-0.0381,0.1592,287.4,0.7,1.2,-0.3,0,-4.69,1.9,0.42,-0.29,-0.46,7.61,-0.02,0.3,-0.09,-0.08,-1.11,-23.02,1.56,-6.93,6.03,1.25,-0.58,-0.94,2.57,1.81,},
	{9.5,103.5,100933,167,32,17,37,301,-0.6,0.2,-0.1,-0.4,17.29,-0.97,-0.1,-0.4,-0.34,-9.1,0.2,-0.2,0,-0.1,-12.25,0,1.27811,-0.00141,0.00039,-0.00019,-0.00048,0.63674,-0.03135,-0.02464,0.00229,-0.00898,2.5475,0.3224,0.3395,-0.0377,0.1542,287.4,0.6,1.2,-0.4,0,-4.62,1.91,0.52,-0.32,-0.5,7.74,0.06,0.3,-0.17,-0.1,-0.98,-21.72,2.73,-7.92,5.26,1.95,1.73,-0.9,2.5,1.02,},
	{9.5,104.5,100880,167,32,17,36,300.6,-0.6,0.3,-0.3,-0.3,17.26,-1.1,-0.27,-0.37,-0.42,-8.3,0.5,-0.2,0.2,-0.1,-8.84,4.73,1.27803,-0.00133,0.00047,-0.00022,-0.00043,0.63632,-0.02959,-0.02481,0.00346,-0.00869,2.5395,0.295,0.3176,-0.0428,0.1384,287.4,0.5,1.2,-0.5,0,-4.63,2.13,0.67,-0.34,-0.55,7.56,0.13,0.25,-0.13,-0.15,-1.05,-19.5,3.37,-8.74,4.2,1.31,4.64,-1.62,3.49,0.02,},
	{9.5,105.5,100698,168,35,17,35,300.2,-0.7,0.4,-0.4,-0.4,17.16,-1.25,-0.4,-0.37,-0.5,-7.3,0.3,-0.4,0.3,-0.1,-5.42,20.88,1.27798,-0.00125,0.00056,-0.00026,-0.0004,0.63503,-0.02714,-0.02486,0.00493,-0.00859,2.5442,0.2654,0.321,-0.0646,0.1308,287.3,0.4,1.2,-0.5,0,-4.46,2.27,0.73,-0.27,-0.59,7.91,0.06,0.22,-0.12,-0.16,-1.5,-17.62,2.8,-8.48,3.28,-1.22,3.43,-3.88,5.08,-0.66,},
	{9.5,106.5,100897,174,44,15,37,300.1,-0.9,0.1,-0.4,-0.6,17.37,-1.15,-0.25,-0.38,-0.45,-7.7,0.2,-0.2,0.2,0.1,-1.6,3.63,1.27803,-0.00121,0.00055,-0.00028,-0.00043,0.63502,-0.0243,-0.02521,0.00668,-0.00843,2.611,0.3025,0.3985,-0.0983,0.1544,287.3,0.2,1.2,-0.6,-0.1,-4.56,2.28,0.73,-0.18,-0.61,8.22,0.02,0.24,-0.12,-0.07,-4.33,-17.88,0.26,-7.04,2.62,-4.33,3.22,-4.92,6.17,-0.12,},
	{8.5,96.5,100923,119,-4,5,35,301.1,-0.3,0.5,-0.1,-0.1,17.35,-0.76,0,-0.22,-0.37,-9.3,-0.1,-0.1,0,0,-34.84,0,1.27885,-0.00142,0.00045,-0.00009,-0.0003,0.64197,-0.02931,-0.021,-0.0038,-0.01163,2.5427,0.2651,0.2813,0.0376,0.1986,287.2,0.8,1.2,-0.1,0.2,-3.86,1.8,0.18,-0.12,-0.12,11.09,-0.24,-0.09,0.14,-0.07,-8.58,-27.24,-7.34,-1.74,2.94,1.17,-0.26,1.78,-0.44,1.89,},
	{8.5,97.5,100921,115,-6,9,35,301.1,-0.3,0.5,-0.2,-0.1,17.4,-0.73,-0.05,-0.23,-0.42,-9,0.1,-0.1,0,0,-30.19,0,1.27882,-0.00133,0.00049,-0.0001,-0.0003,0.6418,-0.02886,-0.02061,-0.00353,-0.01123,2.548,0.2713,0.2648,0.0395,0.1779,287.3,0.8,1.2,-0.1,0.2,-3.7,1.78,0.19,-0.15,-0.16,10.24,-0.18,0.01,0.1,-0.08,-5.78,-26.21,-6.63,-1.85,3.4,3.11,1.89,1.38,0.41,2.04,},
	{8.5,98.5,99670,111,-6,12,32,299.7,-0.3,0.7,-0.3,0,17.1,-0.8,-0.26,-0.21,-0.55,-6.8,0.3,-0.3,-0.2,-0.3,-25.7,110.9,1.27879,-0.00133,0.00057,-0.00017,-0.00029,0.63609,-0.02778,-0.02037,-0.00289,-0.01095,2.5819,0.2559,0.2376,0.0368,0.15,286.7,0.7,1.2,-0.2,0.2,-3.81,1.78,0.24,-0.17,-0.21,8.58,0.29,0.24,0.04,-0.18,-3.67,-23.98,-6.15,-1.85,3.21,2.06,3.22,-0.66,2.34,0.95,},
	{8.5,99.5,98816,124,3,14,32,299,-0.5,0.6,-0.3,-0.1,16.82,-0.64,-0.2,-0.25,-0.54,-6.9,-0.1,-0.3,-0.2,-0.3,-21.78,187.4,1.27867,-0.00157,0.00054,-0.00024,-0.00032,0.63082,-0.02619,-0.02084,-0.00138,-0.01076,2.6065,0.2727,0.2773,0.0053,0.1559,286.3,0.6,1.2,-0.2,0.2,-4.42,1.75,0.3,-0.17,-0.25,7.17,0.77,0.39,0.19,-0.2,-4.51,-22.53,-6.05,-1.84,2.99,-2.68,2.86,-4.82,5.41,-0.05,},
	{8.5,100.5,100902,148,14,16,37,300.7,-0.8,0.2,-0.1,-0.2,17.36,-0.59,0.01,-0.36,-0.49,-8.3,0.1,-0.1,-0.1,-0.1,-19.02,2.34,1.27839,-0.00174,0.00046,-0.00026,-0.00034,0.63865,-0.02514,-0.02217,0.00054,-0.01056,2.553,0.2531,0.3252,-0.043,0.158,287.3,0.5,1.2,-0.3,0.1,-5.19,1.76,0.39,-0.18,-0.28,6.07,0.11,0.32,0.12,-0.01,-4.54,-22.96,-5.16,-2.69,3.57,-4.54,0.44,-4.54,4.2,0.94,},
	{8.5,101.5,100929,151,20,16,41,301.1,-0.8,0.1,-0.1,-0.3,17.25,-0.65,0.02,-0.33,-0.41,-9.4,0,-0.1,0,-0.1,-16.61,0,1.27821,-0.00166,0.00047,-0.00027,-0.00041,0.63819,-0.02547,-0.02324,0.00172,-0.01016,2.5507,0.257,0.3563,-0.0557,0.1721,287.3,0.4,1.1,-0.3,0.1,-5.22,1.79,0.46,-0.19,-0.33,6.65,-0.02,0.27,-0.05,-0.03,-3.59,-23.13,-3.75,-3.56,4.12,0.42,-1.59,-2.72,3.06,1.73,},
	{8.5,102.5,100933,151,24,17,43,301.1,-0.8,0.1,-0.1,-0.4,17.22,-0.72,-0.02,-0.33,-0.39,-9.3,0,-0.1,0,-0.1,-13.38,0,1.27814,-0.00154,0.0005,-0.00029,-0.00045,0.63816,-0.02519,-0.02355,0.00271,-0.00949,2.5482,0.2655,0.3668,-0.066,0.1716,287.3,0.4,1.1,-0.4,0,-4.98,1.81,0.52,-0.18,-0.37,7.33,0.02,0.25,-0.09,-0.05,-3.32,-22.95,-2.88,-4.11,4.22,0.78,-1.41,-2.19,3.3,2.13,},
	{8.5,103.5,100937,151,28,17,44,300.9,-0.9,0,-0.2,-0.5,17.24,-0.75,-0.05,-0.32,-0.37,-9.3,0,-0.1,0,0,-9.72,0,1.27816,-0.00143,0.00051,-0.00031,-0.00046,0.63799,-0.02423,-0.02353,0.00383,-0.00875,2.5536,0.2768,0.3788,-0.0754,0.1721,287.3,0.3,1.1,-0.4,0,-4.8,1.82,0.57,-0.17,-0.39,7.71,-0.01,0.18,-0.16,-0.08,-2.67,-21.96,-2.12,-4.67,3.84,1.66,0.32,-1.61,3.28,1.83,},
	{8.5,104.5,100916,151,31,17,45,300.7,-1,0,-0.3,-0.5,17.29,-0.77,-0.07,-0.3,-0.37,-9.1,0.2,-0.1,0.1,0,-6.13,2.14,1.2781,-0.00133,0.00054,-0.00033,-0.00047,0.63804,-0.02269,-0.02344,0.00508,-0.00825,2.5655,0.283,0.3882,-0.0835,0.1701,287.2,0.2,1.1,-0.5,-0.1,-4.83,1.87,0.61,-0.12,-0.4,7.65,-0.07,0.16,-0.17,-0.1,-2.67,-20.65,-2.17,-4.9,3.16,1.65,2.58,-1.56,3.77,0.94,},
	{8.5,105.5,100921,151,34,16,44,300.5,-1.1,-0.1,-0.3,-0.6,17.33,-0.8,-0.1,-0.29,-0.39,-8.8,0.3,0,0.1,0.1,-2.74,1.84,1.27798,-0.00126,0.00056,-0.00034,-0.00047,0.63825,-0.02084,-0.0236,0.00662,-0.00803,2.5779,0.2804,0.3982,-0.0965,0.1664,287.2,0.1,1.1,-0.6,-0.1,-4.97,2,0.68,-0.07,-0.43,7.78,-0.01,0.19,-0.2,-0.11,-4.27,-20.08,-3.67,-4.47,2.15,0.48,3.06,-1.94,4.15,0.32,},
	{8.5,106.5,100942,152,38,14,44,300.4,-1.3,-0.2,-0.4,-0.6,17.38,-0.79,-0.09,-0.28,-0.4,-8.9,0.3,0,0.1,0.1,1.08,0,1.27799,-0.00125,0.00053,-0.00035,-0.00049,0.63833,-0.01897,-0.02396,0.0081,-0.00789,2.5914,0.2755,0.4141,-0.114,0.1645,287.1,0,1.1,-0.6,-0.1,-4.91,2.18,0.75,-0.02,-0.48,8.34,-0.09,0.2,-0.18,-0.05,-7.99,-20.62,-6.53,-3.36,1.16,0.65,4.24,-1.42,4.49,0.55,},
	{7.5,96.5,100923,99,-10,2,34,301.1,-0.3,0.5,-0.1,0,17.37,-0.61,0.02,-0.16,-0.39,-9.3,0,-0.1,0,-0.1,-32.8,0,1.27879,-0.00145,0.00049,-0.00007,-0.00027,0.64555,-0.02188,-0.01867,-0.00297,-0.01176,2.5062,0.166,0.2433,0.0302,0.1904,287.1,0.5,1.1,-0.1,0.3,-3.08,1.33,0.2,-0.05,0.02,10.98,-0.18,-0.09,0.15,-0.04,-10.06,-25.57,-7.54,-1.54,0.77,-0.31,-0.38,0.95,-0.37,0.99,},
	{7.5,97.5,100919,99,-10,5,34,301.2,-0.4,0.5,-0.1,0,17.39,-0.59,0.01,-0.19,-0.41,-9.2,0.1,-0.1,-0.1,-0.1,-28.31,0,1.27871,-0.00138,0.0005,-0.00007,-0.00026,0.64448,-0.02173,-0.01812,-0.00277,-0.01139,2.5166,0.1803,0.2426,0.0297,0.1834,287.1,0.5,1.1,-0.1,0.2,-3.24,1.22,0.2,-0.06,0.01,10.42,-0.11,0.01,0.12,-0.05,-8.73,-24.14,-6.69,-1.55,1.81,0.35,-0.43,0.63,0.44,1.45,},
	{7.5,98.5,100844,97,-11,9,34,300.9,-0.4,0.6,-0.2,0,17.4,-0.61,-0.11,-0.2,-0.51,-8.4,0.2,-0.1,-0.1,-0.1,-23.66,6.34,1.27874,-0.00128,0.00058,-0.00012,-0.00025,0.64307,-0.0213,-0.01798,-0.00225,-0.0109,2.5241,0.1852,0.2287,0.024,0.1609,287.1,0.5,1.1,-0.1,0.2,-3.67,1.45,0.29,-0.06,-0.06,9.09,-0.06,0.09,0.04,-0.1,-6.82,-21.08,-6.31,-0.98,2.16,0.88,1.05,-0.75,1.88,1.21,},
	{7.5,99.5,99735,102,-5,12,34,299.9,-0.5,0.6,-0.2,0,17.09,-0.58,-0.16,-0.2,-0.56,-7,0.2,-0.2,-0.2,-0.3,-19.43,104.68,1.27867,-0.00139,0.00059,-0.0002,-0.00028,0.63699,-0.02005,-0.01857,-0.00116,-0.01063,2.5596,0.1917,0.2439,0.0083,0.153,286.7,0.4,1.1,-0.2,0.2,-4.31,1.95,0.48,-0.01,-0.15,8.06,0.64,0.31,0.13,-0.14,-6.94,-18.79,-7.45,0.74,1.41,-0.4,2.32,-3.57,4.39,0.51,},
	{7.5,100.5,100700,124,4,15,38,300.5,-0.8,0.3,-0.2,-0.1,17.28,-0.49,-0.04,-0.27,-0.54,-7.8,0,-0.2,-0.1,-0.2,-16.21,19.73,1.27852,-0.00161,0.00056,-0.00026,-0.00031,0.63996,-0.01856,-0.01954,0.00042,-0.01049,2.5292,0.1929,0.2839,-0.0311,0.1515,287.1,0.2,1.1,-0.3,0.1,-5.19,1.97,0.56,0.03,-0.16,6.69,0.46,0.32,0.16,-0.02,-10.1,-19.49,-9.38,1.75,0.95,-3.78,1.13,-5.08,5,0.46,},
	{7.5,101.5,100929,136,14,17,43,300.8,-0.9,0.1,-0.1,-0.3,17.32,-0.55,0.03,-0.29,-0.47,-8.8,-0.1,-0.1,-0.1,-0.1,-13.8,0,1.27828,-0.00167,0.00052,-0.0003,-0.00038,0.64016,-0.01845,-0.02061,0.00189,-0.01006,2.5406,0.1884,0.3285,-0.0604,0.1642,287.2,0.1,1,-0.3,0.1,-5.76,1.41,0.42,-0.06,-0.18,6.57,0.18,0.34,0,0.04,-10.12,-21.12,-9.25,0.31,1.16,-1.1,-0.59,-3.65,4.45,1.47,},
	{7.5,102.5,100935,137,20,17,47,300.9,-0.9,0,-0.2,-0.4,17.29,-0.63,0.02,-0.28,-0.43,-9.2,0,-0.1,0,-0.1,-10.9,0,1.2781,-0.00158,0.00052,-0.00033,-0.00043,0.64026,-0.01836,-0.02114,0.00298,-0.00935,2.5455,0.1918,0.3504,-0.075,0.1705,287.2,0.1,1,-0.4,0,-5.57,1.25,0.36,-0.08,-0.26,6.99,-0.04,0.21,-0.14,-0.01,-8.44,-22.27,-8.9,-0.66,1.55,0.45,-1.4,-2.4,3.38,1.91,},
	{7.5,103.5,100940,136,24,18,49,300.8,-1,-0.1,-0.2,-0.5,17.25,-0.61,0,-0.26,-0.4,-9.3,0.1,-0.1,0,0,-7.54,0,1.27805,-0.00146,0.00054,-0.00035,-0.00046,0.6404,-0.01767,-0.02106,0.00405,-0.00842,2.5421,0.2125,0.3652,-0.0827,0.1734,287.1,0,1,-0.4,-0.1,-5.04,1.4,0.41,-0.01,-0.29,7.34,-0.12,0.12,-0.2,-0.07,-8.45,-22.09,-9.19,-0.29,1.77,1.27,-0.78,-1.83,3.35,2.19,},
	{7.5,104.5,100942,134,26,17,50,300.7,-1.1,-0.2,-0.3,-0.6,17.31,-0.61,0.01,-0.25,-0.38,-9.2,0.2,0,0,0.1,-3.95,0,1.27802,-0.00135,0.00054,-0.00037,-0.00049,0.64047,-0.01651,-0.02083,0.00526,-0.00769,2.5529,0.2245,0.379,-0.0915,0.1728,287.1,0,1,-0.5,-0.1,-4.76,1.56,0.5,0.03,-0.3,7.71,-0.19,0.09,-0.21,-0.08,-8.26,-21.1,-9.54,-0.1,1.28,1.84,1.42,-0.95,3.73,1.73,},
	{7.5,105.5,100943,132,28,16,50,300.5,-1.3,-0.2,-0.3,-0.6,17.35,-0.6,0.01,-0.23,-0.37,-9.2,0.3,0.1,0.1,0.1,-0.07,0,1.27801,-0.0013,0.00052,-0.00039,-0.00051,0.64087,-0.01519,-0.02095,0.00664,-0.0073,2.554,0.2229,0.3802,-0.1005,0.1655,287,-0.1,1,-0.5,-0.1,-4.98,1.68,0.58,0.06,-0.32,8.02,-0.15,0.13,-0.23,-0.08,-9.19,-20.46,-10.47,0,0.48,2.82,3,-0.12,3.65,1.34,},
	{7.5,106.5,100941,129,30,13,48,300.5,-1.3,-0.2,-0.4,-0.6,17.37,-0.58,-0.01,-0.21,-0.38,-9.1,0.3,0.1,0.1,0.1,3.95,0,1.27797,-0.00129,0.00048,-0.0004,-0.00053,0.64134,-0.01418,-0.02133,0.00775,-0.00717,2.5424,0.2067,0.3673,-0.1098,0.1523,287,-0.1,0.9,-0.6,-0.1,-5.08,1.75,0.66,0.07,-0.31,8.14,-0.21,0.1,-0.21,-0.04,-10.71,-19.98,-11.39,0.35,-0.09,3.5,4.4,0.59,3.53,1.11,},
	{6.5,96.5,100921,88,-14,0,32,301.1,-0.5,0.4,0,0,17.47,-0.48,0.05,-0.12,-0.39,-9.1,0,-0.1,0,-0.1,-31.65,0,1.27851,-0.00156,0.0005,-0.00007,-0.00027,0.64818,-0.01578,-0.01655,-0.00229,-0.01137,2.4827,0.075,0.2034,0.0236,0.1706,286.9,0.3,1,0,0.2,-3.06,0.75,0.05,0,0.07,11.37,-0.14,-0.1,0.19,-0.02,-12.6,-23.17,-9.63,-1.73,-3.75,-1.52,-0.76,-0.09,-0.09,-0.2,},
	{6.5,97.5,100915,88,-13,2,33,301.2,-0.5,0.4,0,0,17.46,-0.51,0.04,-0.15,-0.4,-9.2,0,-0.1,-0.1,-0.1,-26.78,0,1.27846,-0.00146,0.00051,-0.00007,-0.00026,0.64815,-0.01572,-0.01585,-0.00221,-0.01119,2.4814,0.0879,0.2064,0.0198,0.1691,287,0.3,1,-0.1,0.2,-3.57,0.85,0.08,-0.03,0.02,10.75,-0.15,0,0.11,-0.01,-13.78,-22.28,-9.28,-1.88,-2.91,1.64,-2.36,0.54,0.23,0.8,},
	{6.5,98.5,100912,84,-13,5,34,301.3,-0.4,0.4,-0.1,0,17.46,-0.52,0.03,-0.19,-0.44,-9.2,0.1,-0.1,-0.1,0,-21.7,0,1.27867,-0.00128,0.00055,-0.00008,-0.00027,0.64727,-0.01543,-0.01519,-0.00223,-0.01044,2.4784,0.111,0.2103,0.0148,0.1594,287.1,0.3,1,-0.1,0.2,-3.86,0.82,0.06,0,-0.03,9.5,-0.22,0.02,0.01,-0.03,-16.2,-20.87,-10.32,-1.14,-2.85,0.22,-1.43,0.05,0.66,1.44,},
	{6.5,99.5,100723,83,-14,7,35,300.9,-0.4,0.5,-0.1,0,17.34,-0.54,-0.06,-0.19,-0.53,-8.5,0.1,-0.1,-0.1,-0.1,-17.42,16.55,1.27864,-0.00118,0.00062,-0.0001,-0.00028,0.64489,-0.0147,-0.01534,-0.00203,-0.00994,2.473,0.1172,0.2005,0.0139,0.1368,287,0.2,1,-0.1,0.2,-4.17,1.07,0.16,0.11,-0.06,8.71,0.05,0.09,-0.01,-0.08,-15.92,-19.72,-12.43,0.94,-3.05,0.41,1.85,-0.98,1.82,1.22,},
	{6.5,100.5,99058,89,-8,10,35,299.4,-0.7,0.5,-0.2,-0.1,16.65,-0.46,-0.18,-0.16,-0.53,-6.6,0.3,-0.1,-0.1,-0.1,-13.55,165.83,1.27863,-0.00135,0.00066,-0.0002,-0.00034,0.63712,-0.01356,-0.01596,-0.00116,-0.00972,2.4782,0.1287,0.2046,0.0012,0.1343,286.2,0.1,1,-0.2,0.1,-5.11,1.42,0.32,0.16,-0.09,7.85,0.53,0.24,0.16,-0.05,-17.84,-18.36,-13.71,2.65,-2.81,1.03,1.15,-3.92,4.61,0.24,},
	{6.5,101.5,99384,113,5,15,39,299.5,-1.1,0.2,-0.2,-0.2,16.59,-0.24,0,-0.21,-0.53,-6.4,0,-0.1,-0.2,-0.1,-10.45,138.19,1.2784,-0.00167,0.00056,-0.00032,-0.00038,0.63673,-0.01286,-0.01717,0.00065,-0.00941,2.4604,0.1669,0.2694,-0.0407,0.1375,286.4,-0.1,0.9,-0.3,0.1,-6.18,1.14,0.28,0.06,-0.1,6.74,0.81,0.49,0.17,0.07,-18.75,-17.57,-13.13,1.98,-1.85,-4.85,-0.02,-5.23,6.52,0.46,},
	{6.5,102.5,100889,130,17,18,48,300.6,-1.1,-0.1,-0.2,-0.3,17.21,-0.43,0.11,-0.24,-0.5,-8.4,-0.2,-0.1,-0.1,0,-7.82,4.75,1.2781,-0.00172,0.00042,-0.00036,-0.00042,0.64231,-0.01245,-0.01828,0.00248,-0.00896,2.4787,0.1336,0.3008,-0.0678,0.1417,287,-0.2,0.9,-0.3,0,-6.48,0.73,0.2,-0.06,-0.14,6.66,-0.19,0.14,-0.19,0.05,-15.35,-18.44,-11.75,0.45,-0.64,-1.29,-0.6,-2.95,3.61,1.27,},
	{6.5,103.5,100940,125,20,17,52,300.7,-1,-0.1,-0.2,-0.5,17.36,-0.59,0.04,-0.21,-0.42,-9.1,0,-0.1,0,0,-5.16,0,1.27791,-0.00152,0.00046,-0.00037,-0.00047,0.64348,-0.01227,-0.0183,0.00365,-0.0081,2.5109,0.1247,0.3074,-0.0718,0.1595,286.9,-0.2,0.8,-0.4,-0.1,-5.83,0.93,0.28,0,-0.17,6.5,-0.32,0.05,-0.27,-0.07,-12.86,-19.14,-11.13,0.39,0.19,0.35,-1.07,-1.56,2.82,1.77,},
	{6.5,104.5,100941,119,21,16,53,300.6,-1.1,-0.2,-0.3,-0.6,17.34,-0.54,0.05,-0.2,-0.4,-9.2,0.2,0,0,0,-1.95,0,1.27777,-0.00139,0.00047,-0.00038,-0.00051,0.64344,-0.01175,-0.01805,0.00467,-0.00712,2.5087,0.1439,0.3177,-0.0775,0.1589,286.9,-0.2,0.8,-0.4,-0.1,-5.02,1.17,0.38,0.06,-0.16,7.41,-0.4,-0.03,-0.25,-0.07,-11.73,-18.94,-11.61,0.94,0.5,1.49,0.52,-0.35,3.51,2.31,},
	{6.5,105.5,100940,113,21,14,52,300.6,-1.2,-0.2,-0.4,-0.6,17.38,-0.5,0.05,-0.18,-0.38,-9.1,0.3,0,0.1,0.1,2.37,0,1.27788,-0.00132,0.00045,-0.00041,-0.00054,0.64369,-0.01086,-0.01785,0.00561,-0.00659,2.5069,0.1461,0.3162,-0.0868,0.1496,286.9,-0.2,0.8,-0.5,-0.1,-4.7,1.37,0.49,0.09,-0.17,8.19,-0.27,0.04,-0.25,-0.07,-11.16,-18.17,-12.11,1.41,0.18,3.53,2.51,0.74,3.29,1.88,},
	{6.5,106.5,100937,108,22,11,50,300.6,-1.3,-0.2,-0.4,-0.5,17.4,-0.45,0.03,-0.15,-0.38,-9.1,0.3,0,0.1,0.1,6.73,0,1.27792,-0.00131,0.00042,-0.00043,-0.00056,0.64443,-0.01026,-0.01786,0.00627,-0.00647,2.493,0.1359,0.302,-0.094,0.1366,286.9,-0.2,0.8,-0.5,-0.1,-4.7,1.49,0.56,0.1,-0.19,8,-0.28,0.02,-0.22,-0.05,-10.99,-17.6,-12.76,2.16,-0.16,4.07,3.9,1.36,2.76,1.48,},
	{5.5,96.5,99579,71,-14,-3,29,299.7,-0.6,0.3,-0.1,0,17.01,-0.27,0.1,-0.08,-0.34,-7.3,0,-0.2,-0.1,-0.2,-29.21,123.08,1.27872,-0.0016,0.00047,-0.00008,-0.00036,0.64721,-0.01097,-0.01343,-0.00236,-0.00935,2.4102,0.0185,0.1547,0.0235,0.1311,286.1,0.1,0.9,0,0.2,-4.77,0.71,0.08,0.07,0.06,11.35,0.16,0.02,0.23,-0.01,-28.94,-17.24,-12.96,0.42,-8.74,-0.79,-1.5,-1.84,0.55,-1.41,},
	{5.5,97.5,100821,81,-13,1,31,300.8,-0.6,0.3,-0.1,0,17.35,-0.38,0.08,-0.11,-0.36,-8.2,0,-0.1,0,0,-24.49,10.89,1.27828,-0.00151,0.00049,-0.00011,-0.00034,0.65118,-0.01053,-0.01332,-0.00185,-0.00989,2.3756,0.0299,0.1612,0.0129,0.1292,286.8,0,0.9,0,0.2,-3.96,0.33,-0.08,-0.02,0.05,10.26,-0.19,0,0.16,0.04,-26.99,-15.2,-9.72,-1.24,-7.15,-0.68,-4.81,-1.53,1.4,-0.67,},
	{5.5,98.5,100915,76,-14,3,34,301.1,-0.4,0.3,-0.1,0,17.67,-0.48,0.08,-0.14,-0.38,-8.9,0,0,-0.1,0,-19.64,0,1.27826,-0.00125,0.00055,-0.00012,-0.00035,0.65183,-0.01048,-0.01265,-0.00183,-0.00946,2.4225,0.0448,0.1708,0.0061,0.1286,286.9,0,0.8,-0.1,0.2,-3.53,0.54,-0.01,-0.05,-0.01,9.64,-0.37,-0.04,-0.05,0.02,-21.27,-14.49,-8.04,-2.94,-5.53,-0.64,-1.07,1.55,0.38,1.22,},
	{5.5,99.5,100908,68,-17,2,34,301.1,-0.3,0.4,-0.1,0,17.6,-0.48,0.05,-0.16,-0.44,-8.7,0.1,0,0,0,-15.42,0,1.27833,-0.00112,0.00057,-0.00008,-0.00037,0.65041,-0.0097,-0.01174,-0.00222,-0.0088,2.4162,0.0452,0.155,0.0105,0.1111,287,0.1,0.9,-0.1,0.2,-3.82,0.64,-0.03,0.04,-0.06,9.11,-0.16,0.08,-0.14,-0.04,-18.67,-17.84,-10.97,-2.78,-5.35,-1.43,3.76,2.6,-0.15,1.43,},
	{5.5,100.5,98290,65,-14,4,33,299.1,-0.4,0.5,-0.1,0,16.63,-0.51,-0.16,-0.15,-0.51,-6.8,0.3,-0.1,0,-0.1,-11.01,234.81,1.27842,-0.00123,0.0006,-0.00013,-0.00042,0.63799,-0.00935,-0.01209,-0.00188,-0.0086,2.4371,0.0243,0.1242,0.0091,0.0992,285.8,0,0.8,-0.1,0.1,-4.25,0.63,-0.03,0.12,-0.05,8.89,0.18,0.1,0.05,-0.07,-16.42,-18.35,-13.45,-0.65,-4.34,4.31,0.3,-2.12,2.75,-0.41,},
	{5.5,101.5,94927,78,1,8,34,297,-0.9,0.3,-0.3,-0.1,15.42,-0.09,-0.06,-0.12,-0.51,-5.6,0.1,-0.1,-0.1,-0.2,-6.84,541.32,1.27843,-0.00152,0.0005,-0.00028,-0.00048,0.62042,-0.00934,-0.01361,-0.00024,-0.00835,2.4875,0.1303,0.1986,-0.0136,0.1202,284.3,-0.1,0.8,-0.2,0,-4.84,0.61,0.02,0.14,-0.04,6.94,0.71,0.28,0.16,-0.01,-15.51,-15.29,-12.93,1.53,-2.97,-5.66,-1.9,-6.24,5.76,-0.43,},
	{5.5,102.5,98941,113,14,16,43,299.1,-1.3,-0.1,-0.3,-0.2,16.35,0.01,0.21,-0.16,-0.56,-6.1,-0.4,-0.1,-0.1,-0.1,-3.88,178.82,1.27824,-0.00178,0.00036,-0.0004,-0.00045,0.63726,-0.00868,-0.01501,0.00169,-0.00825,2.3877,0.1457,0.2597,-0.0482,0.1105,286,-0.3,0.7,-0.3,0,-5.74,0.74,0.08,0.15,0.02,6.89,-0.12,0.07,-0.16,0.02,-17.53,-14.7,-13.23,2.28,-2.29,-2.83,-0.79,-4.41,4.4,-0.01,},
	{5.5,103.5,100869,116,18,16,51,300.4,-1,-0.2,-0.3,-0.4,17.36,-0.49,0.07,-0.18,-0.49,-8.5,-0.1,-0.1,-0.1,0,-1.86,6.56,1.27789,-0.00157,0.00036,-0.00039,-0.00047,0.64664,-0.00779,-0.01535,0.00307,-0.00776,2.4428,0.0646,0.2423,-0.0592,0.1279,286.8,-0.4,0.7,-0.4,-0.1,-6.13,0.81,0.17,0.1,0,5.68,-0.57,-0.09,-0.29,-0.01,-16.04,-14.95,-11.97,1.35,-1.04,-3.05,-0.23,-2.24,2.94,0.86,},
	{5.5,104.5,100938,105,16,14,53,300.6,-1,-0.1,-0.3,-0.5,17.41,-0.53,0.04,-0.16,-0.4,-9.1,0.1,0,0,0,0.68,0,1.27765,-0.00137,0.00042,-0.00039,-0.00053,0.64655,-0.00743,-0.01507,0.00387,-0.007,2.4618,0.0691,0.2502,-0.0649,0.1436,286.8,-0.3,0.7,-0.4,-0.1,-5.51,0.99,0.32,0.1,-0.06,6.74,-0.58,-0.13,-0.29,-0.08,-12.47,-15.89,-11.14,1.17,-0.35,0.14,0.47,0.02,2.98,2.16,},
	{5.5,105.5,100936,96,15,12,52,300.7,-1.1,-0.2,-0.4,-0.5,17.41,-0.43,0.07,-0.13,-0.38,-9.2,0.3,0,0,0.1,4.67,0,1.27766,-0.0013,0.00042,-0.00042,-0.00057,0.64659,-0.00692,-0.01441,0.0043,-0.00649,2.4588,0.0805,0.2526,-0.0712,0.1357,286.8,-0.3,0.7,-0.4,-0.1,-4.84,1.05,0.39,0.12,-0.06,7.83,-0.36,-0.03,-0.25,-0.04,-11.16,-16.27,-11.77,1.95,-0.25,2.93,2.23,1.52,2.55,2.2,},
	{5.5,106.5,100932,90,14,9,50,300.6,-1.2,-0.2,-0.4,-0.5,17.42,-0.35,0.07,-0.1,-0.37,-9.2,0.3,0,0.1,0.1,9.12,0,1.2777,-0.00128,0.00039,-0.00044,-0.00059,0.6473,-0.00654,-0.01402,0.00464,-0.00625,2.4485,0.0776,0.2418,-0.0757,0.1243,286.8,-0.3,0.7,-0.4,-0.1,-4.64,1.07,0.44,0.12,-0.06,8.12,-0.33,-0.02,-0.23,-0.06,-10.45,-16.13,-12.75,2.79,-0.52,3.71,3.51,2.23,1.9,1.75,},
	{4.5,96.5,92266,36,-13,-6,23,295.2,-0.4,0.3,-0.1,-0.1,15.2,0,0.18,-0.09,-0.32,-5.4,-0.2,0,-0.1,-0.2,-27.12,792,1.27886,-0.00143,0.00047,-0.00005,-0.00056,0.62214,-0.01031,-0.01145,-0.00274,-0.00703,2.5494,0.0029,0.14,0.0347,0.0971,282.6,0.2,0.8,0,0.1,-0.86,0.63,0.06,0.08,0.02,12.67,0.11,0,0.11,-0.04,-15.1,-11.94,-9.93,1.54,-6.15,8.6,-1.94,-1.72,0.29,-1.1,},
	{4.5,97.5,95312,54,-10,-2,26,297.2,-0.6,0.3,-0.1,-0.1,15.89,-0.14,0.03,-0.07,-0.34,-6,-0.1,0,-0.1,-0.1,-21.86,508.88,1.27836,-0.00138,0.00052,-0.00011,-0.0005,0.63088,-0.00769,-0.01101,-0.00222,-0.00801,2.3961,0.0204,0.1239,0.026,0.094,284.2,0,0.7,0,0.1,-2.87,0.5,0.01,0.14,0.03,8.92,0.29,0.16,0.15,0.01,-24.07,-11.72,-9.86,2.13,-6.6,-7.17,-4.67,-4.25,2.39,-2.45,},
	{4.5,98.5,100897,70,-15,2,33,300.8,-0.4,0.3,-0.1,-0.1,17.55,-0.32,0.08,-0.1,-0.34,-8.1,0,0,0,0,-17.95,4.35,1.27788,-0.00122,0.00057,-0.00016,-0.00044,0.6542,-0.00633,-0.01083,-0.00124,-0.00847,2.3098,0.0226,0.1326,0.0067,0.094,286.8,-0.1,0.7,-0.1,0.1,-2.93,0.1,-0.1,0.15,0.06,10.14,-0.45,-0.11,-0.09,0.03,-19.92,-13.15,-7.81,1.15,-5.81,-7.75,0.12,0.41,2.24,-0.19,},
	{4.5,99.5,100906,64,-17,0,35,301,-0.3,0.3,-0.1,-0.1,18.07,-0.32,0.17,-0.1,-0.33,-8.6,0,0,0,0,-13.49,0,1.27793,-0.00116,0.00052,-0.00013,-0.00048,0.65371,-0.00529,-0.0097,-0.00116,-0.0079,2.4235,0.0117,0.1376,0.0059,0.0968,286.9,-0.1,0.7,-0.1,0.1,-3.44,0.07,-0.05,0.07,0.01,9.5,-0.16,0.12,-0.1,0.05,-12.73,-13.25,-6.22,-1.58,-4.74,-4.3,6.1,5.12,0.6,1.56,},
	{4.5,100.5,99961,57,-16,1,34,300.3,-0.3,0.4,-0.1,-0.1,17.45,-0.31,0.08,-0.12,-0.41,-6.9,-0.2,0,0,-0.2,-8.95,85.88,1.27802,-0.00124,0.00046,-0.00012,-0.0005,0.64775,-0.00466,-0.00886,-0.00123,-0.00754,2.3867,-0.015,0.0994,0.0064,0.078,286.5,-0.1,0.7,-0.1,0.1,-3.69,0.31,-0.02,0.06,-0.05,9.38,-0.06,0.07,-0.05,-0.08,-8.37,-15,-9.42,-1.92,-4.8,2.77,1.98,2.04,0.66,-0.87,},
	{4.5,101.5,95271,62,-4,5,33,297.3,-0.6,0.3,-0.2,-0.1,15.76,-0.18,-0.04,-0.11,-0.47,-5.4,-0.3,-0.2,-0.1,-0.2,-4.51,509.08,1.27824,-0.00141,0.00041,-0.00023,-0.00055,0.6246,-0.00589,-0.01029,-0.00038,-0.00773,2.449,0.0203,0.1101,-0.0003,0.0878,284.4,-0.2,0.7,-0.2,0,-3.93,0.61,0.12,0.17,0,7.73,0.41,0.18,0.07,-0.04,-7.25,-13.83,-11.63,0.16,-3.5,-3.32,-4.23,-5.58,3.63,-1.48,},
	{4.5,102.5,96241,81,6,10,38,297.6,-1.1,0,-0.3,-0.2,15.81,-0.03,0.07,-0.11,-0.54,-5.4,0,-0.1,-0.1,-0.3,-1.02,420.68,1.27821,-0.0015,0.00038,-0.00034,-0.00053,0.62789,-0.00495,-0.01113,0.00092,-0.00778,2.4134,0.0931,0.1783,-0.022,0.0939,284.8,-0.3,0.6,-0.3,0,-4.25,0.9,0.21,0.24,0.02,6.87,0.01,0.01,-0.09,-0.03,-9.48,-12.37,-12.55,1.88,-2.52,-2.97,-1.71,-5.12,4.19,-1.08,},
	{4.5,103.5,100571,99,12,14,49,299.8,-1,-0.1,-0.3,-0.3,17.27,-0.38,0.06,-0.17,-0.56,-7.4,-0.1,-0.2,-0.1,-0.1,1.16,32.93,1.27778,-0.00148,0.00033,-0.00037,-0.00049,0.64807,-0.00374,-0.01192,0.0024,-0.0076,2.3834,0.0309,0.1788,-0.0478,0.0956,286.5,-0.5,0.6,-0.3,-0.1,-4.64,1.02,0.29,0.18,-0.01,5.77,-0.6,-0.2,-0.21,0.04,-10.4,-12.89,-12.75,2.04,-1.96,-5.7,0.85,-3.91,4.02,-0.16,},
	{4.5,104.5,100935,90,10,12,53,300.5,-0.9,-0.1,-0.3,-0.4,17.5,-0.5,0.02,-0.15,-0.42,-8.8,0,-0.1,-0.1,0,3.62,0,1.27758,-0.00129,0.00042,-0.00039,-0.00054,0.64917,-0.00317,-0.01177,0.00323,-0.00712,2.4258,0.0135,0.1907,-0.0588,0.125,286.7,-0.4,0.6,-0.3,-0.1,-5.02,0.85,0.29,0.11,-0.01,6.39,-0.53,-0.16,-0.29,-0.08,-9.97,-13.9,-11.71,1.43,-1.01,-1.34,1.34,-0.16,2.61,1.5,},
	{4.5,105.5,100932,81,8,9,52,300.7,-1,-0.1,-0.3,-0.5,17.42,-0.37,0.07,-0.11,-0.38,-9.3,0.2,0,0,0,7.24,0,1.27751,-0.00124,0.00042,-0.00041,-0.00058,0.6493,-0.00307,-0.01098,0.00338,-0.00656,2.416,0.0274,0.1976,-0.0595,0.1228,286.7,-0.4,0.6,-0.3,-0.1,-5.02,0.78,0.31,0.08,-0.01,7.45,-0.39,-0.1,-0.25,-0.04,-9.46,-14.54,-11.47,1.76,-0.59,2.49,2.44,2.12,1.8,2.31,},
	{4.5,106.5,100929,74,8,6,50,300.7,-1.1,-0.1,-0.3,-0.4,17.42,-0.27,0.1,-0.08,-0.35,-9.1,0.2,0,0.1,0,11.62,0,1.27758,-0.00124,0.00038,-0.00042,-0.00061,0.64992,-0.00282,-0.01023,0.00343,-0.00606,2.4088,0.0267,0.1892,-0.0607,0.1132,286.6,-0.4,0.6,-0.3,-0.1,-5.02,0.75,0.33,0.07,0.02,8.29,-0.28,-0.03,-0.23,-0.08,-9.6,-14.73,-12.01,2.44,-0.71,3.54,3.34,3.17,1.13,2.01,},
};
static const double VMF_DATA[245][10]={
	{306.000000,0.00127558,0.00065745,2.2819,0.3556,285.5,999.45,24.13,27.78,105.8},
	{306.250000,0.00127741,0.00063693,2.2790,0.3236,287.3,998.51,28.71,28.19,105.8},
	{306.500000,0.00127711,0.00062968,2.2794,0.3224,287.3,998.42,27.11,27.88,105.8},
	{306.750000,0.00127578,0.00064176,2.2834,0.3330,286.1,999.86,24.81,27.12,105.8},
	{307.000000,0.00127504,0.00063992,2.2809,0.3196,286.0,999.73,23.97,26.00,105.8},
	{307.250000,0.00127614,0.00065621,2.2804,0.3473,285.9,999.32,27.66,25.73,105.8},
	{307.500000,0.00127717,0.00065090,2.2787,0.3403,286.4,998.46,27.67,26.51,105.8},
	{307.750000,0.00127621,0.00066237,2.2845,0.3498,285.2,1000.68,25.93,25.34,105.8},
	{308.000000,0.00127554,0.00066471,2.2851,0.3494,284.7,1000.94,23.64,23.33,105.8},
	{308.250000,0.00127686,0.00065325,2.2818,0.3270,285.8,1000.02,27.41,24.11,105.8},
	{308.500000,0.00127851,0.00064708,2.2796,0.3205,286.5,998.77,28.25,24.57,105.8},
	{308.750000,0.00127875,0.00065138,2.2830,0.2911,285.6,999.76,25.48,22.05,105.8},
	{309.000000,0.00127668,0.00066331,2.2826,0.3130,284.5,1000.03,23.57,21.58,105.8},
	{309.250000,0.00127875,0.00067641,2.2797,0.3235,284.8,998.44,27.52,22.61,105.8},
	{309.500000,0.00127927,0.00067872,2.2759,0.3167,285.0,997.20,27.76,22.63,105.8},
	{309.750000,0.00127805,0.00068853,2.2790,0.3260,284.0,998.32,25.93,23.02,105.8},
	{310.000000,0.00127947,0.00067470,2.2794,0.3014,284.6,997.79,24.26,23.40,105.8},
	{310.250000,0.00127977,0.00067198,2.2742,0.3088,285.6,996.54,29.10,23.47,105.8},
	{310.500000,0.00127973,0.00066490,2.2738,0.3217,286.3,996.17,29.46,25.55,105.8},
	{310.750000,0.00127893,0.00065784,2.2757,0.3165,286.1,997.12,27.64,25.89,105.8},
	{311.000000,0.00127915,0.00066248,2.2776,0.3222,285.8,997.49,26.00,25.62,105.8},
	{311.250000,0.00128016,0.00067085,2.2751,0.3374,286.3,996.73,29.34,26.36,105.8},
	{311.500000,0.00127873,0.00066306,2.2744,0.3535,286.9,997.04,29.53,26.89,105.8},
	{311.750000,0.00127756,0.00065814,2.2778,0.3527,286.3,998.00,27.17,26.90,105.8},
	{312.000000,0.00127637,0.00066180,2.2792,0.3616,285.8,998.24,25.10,30.21,105.8},
	{312.250000,0.00127901,0.00064861,2.2763,0.3567,287.6,997.03,29.66,29.82,105.8},
	{312.500000,0.00127825,0.00065627,2.2754,0.3652,287.0,997.04,27.81,27.97,105.8},
	{312.750000,0.00127776,0.00066629,2.2802,0.3767,285.9,998.24,25.84,28.57,105.8},
	{313.000000,0.00127640,0.00067604,2.2820,0.3874,285.2,999.40,23.84,28.52,105.8},
	{313.250000,0.00127838,0.00066512,2.2799,0.3683,286.3,998.48,26.49,28.55,105.8},
	{313.500000,0.00127898,0.00065565,2.2815,0.3613,286.9,998.69,27.36,29.75,105.8},
	{313.750000,0.00127702,0.00064307,2.2836,0.3607,286.9,999.78,25.20,29.70,105.8},
	{314.000000,0.00127604,0.00064175,2.2844,0.3497,286.6,1000.37,24.08,27.48,105.8},
	{314.250000,0.00127816,0.00062603,2.2820,0.3319,287.9,999.51,26.63,27.64,105.8},
	{314.500000,0.00127785,0.00063274,2.2815,0.3440,287.8,999.06,26.12,28.24,105.8},
	{314.750000,0.00127583,0.00065067,2.2840,0.3488,286.0,1000.62,23.72,27.80,105.8},
	{315.000000,0.00127594,0.00062519,2.2843,0.3187,287.2,1000.86,24.01,29.04,105.8},
	{315.250000,0.00127744,0.00061260,2.2811,0.3018,288.5,999.60,28.21,26.98,105.8},
	{315.500000,0.00127815,0.00062006,2.2806,0.3140,288.4,998.93,27.38,27.60,105.8},
	{315.750000,0.00127598,0.00061702,2.2864,0.3126,287.3,1001.15,25.25,28.11,105.8},
	{316.000000,0.00127603,0.00058475,2.2858,0.2646,288.3,1001.06,24.40,27.87,105.8},
	{316.250000,0.00127711,0.00054819,2.2827,0.2404,290.9,1000.30,28.17,25.65,105.8},
	{316.500000,0.00127869,0.00053225,2.2807,0.2114,292.0,999.69,28.19,26.63,105.8},
	{316.750000,0.00127791,0.00053301,2.2828,0.2078,291.5,1000.70,24.89,24.59,105.8},
	{317.000000,0.00127705,0.00054931,2.2828,0.2159,290.1,1000.76,23.11,24.87,105.8},
	{317.250000,0.00127921,0.00055170,2.2822,0.2199,291.2,1000.04,29.25,24.25,105.8},
	{317.500000,0.00127863,0.00059324,2.2830,0.2949,289.6,999.70,29.70,25.30,105.8},
	{317.750000,0.00127849,0.00057796,2.2845,0.2709,290.1,1000.38,27.35,25.58,105.8},
	{318.000000,0.00127770,0.00058396,2.2849,0.2662,289.4,1000.61,25.05,25.87,105.8},
	{318.250000,0.00127777,0.00061798,2.2824,0.3244,288.7,999.88,29.23,26.36,105.8},
	{318.500000,0.00127748,0.00059277,2.2801,0.2989,289.8,999.29,27.66,28.14,105.8},
	{318.750000,0.00127675,0.00058611,2.2823,0.2877,289.5,999.68,27.18,25.92,105.8},
	{319.000000,0.00127804,0.00055405,2.2831,0.2385,290.8,999.85,25.70,28.26,105.8},
	{319.250000,0.00127981,0.00054232,2.2797,0.2218,292.3,998.45,30.29,25.12,105.8},
	{319.500000,0.00128048,0.00054809,2.2778,0.2243,292.4,997.45,30.73,25.23,105.8},
	{319.750000,0.00127716,0.00056619,2.2818,0.2645,290.5,999.05,28.38,25.39,105.8},
	{320.000000,0.00127731,0.00056267,2.2830,0.2521,290.3,999.12,26.89,27.11,105.8},
	{320.250000,0.00127855,0.00054358,2.2796,0.2232,292.0,998.44,29.86,26.35,105.8},
	{320.500000,0.00127910,0.00056753,2.2789,0.2410,290.9,997.66,30.83,24.13,105.8},
	{320.750000,0.00127909,0.00054781,2.2824,0.2233,291.2,998.94,26.96,26.09,105.8},
	{321.000000,0.00127793,0.00054210,2.2834,0.2103,290.5,999.53,24.84,25.57,105.8},
	{321.250000,0.00128089,0.00052518,2.2812,0.1700,292.6,998.98,30.40,22.65,105.8},
	{321.500000,0.00128005,0.00052596,2.2801,0.1907,292.7,998.20,30.08,23.97,105.8},
	{321.750000,0.00127940,0.00050805,2.2814,0.1610,292.3,999.11,25.36,23.35,105.8},
	{322.000000,0.00127890,0.00052704,2.2839,0.1626,290.5,999.54,24.26,23.35,105.8},
	{322.250000,0.00128094,0.00053216,2.2816,0.1522,291.6,999.04,29.84,21.33,105.8},
	{322.500000,0.00128241,0.00054181,2.2781,0.1639,291.4,997.72,28.45,22.19,105.8},
	{322.750000,0.00128070,0.00056344,2.2780,0.2046,290.0,997.98,25.70,21.66,105.8},
	{323.000000,0.00127956,0.00056645,2.2801,0.2116,289.6,998.86,24.53,19.71,105.8},
	{323.250000,0.00128004,0.00056300,2.2756,0.2362,290.9,996.82,29.96,23.47,105.8},
	{323.500000,0.00127937,0.00057915,2.2725,0.2633,290.5,995.71,29.31,25.04,105.8},
	{323.750000,0.00127950,0.00056741,2.2761,0.2423,290.1,996.56,26.09,24.15,105.8},
	{324.000000,0.00127913,0.00057687,2.2769,0.2461,289.4,996.98,24.17,23.84,105.8},
	{324.250000,0.00127875,0.00061567,2.2741,0.3067,288.5,996.25,29.61,24.33,105.8},
	{324.500000,0.00127812,0.00061850,2.2722,0.3192,288.7,995.58,28.98,26.52,105.8},
	{324.750000,0.00127726,0.00062864,2.2768,0.3335,287.6,997.15,26.88,26.46,105.8},
	{325.000000,0.00127619,0.00062565,2.2776,0.3365,287.4,997.69,24.67,27.15,105.8},
	{325.250000,0.00127854,0.00061659,2.2744,0.3213,288.8,996.39,29.59,26.81,105.8},
	{325.500000,0.00127880,0.00061642,2.2724,0.3165,288.9,995.52,28.48,26.58,105.8},
	{325.750000,0.00127874,0.00061845,2.2748,0.3069,288.5,996.60,27.37,27.52,105.8},
	{326.000000,0.00127807,0.00061280,2.2755,0.2987,288.5,997.01,25.31,25.51,105.8},
	{326.250000,0.00127898,0.00060201,2.2732,0.2985,289.7,995.88,30.10,25.81,105.8},
	{326.500000,0.00127978,0.00059386,2.2729,0.2958,290.3,995.22,29.72,27.08,105.8},
	{326.750000,0.00127880,0.00057829,2.2735,0.2761,290.4,995.96,27.93,25.41,105.8},
	{327.000000,0.00127815,0.00057286,2.2744,0.2649,290.0,996.74,25.52,25.37,105.8},
	{327.250000,0.00127941,0.00057450,2.2728,0.2630,290.9,996.19,30.36,24.63,105.8},
	{327.500000,0.00128114,0.00057447,2.2706,0.2547,291.5,995.23,30.56,25.24,105.8},
	{327.750000,0.00127820,0.00060804,2.2754,0.3011,288.7,996.81,26.98,25.06,105.8},
	{328.000000,0.00127709,0.00061762,2.2766,0.3195,288.1,997.29,25.19,26.22,105.8},
	{328.250000,0.00127833,0.00059335,2.2732,0.2763,289.7,996.47,29.70,24.67,105.8},
	{328.500000,0.00127845,0.00062338,2.2741,0.3174,288.7,996.60,28.59,28.39,105.8},
	{328.750000,0.00127599,0.00064931,2.2770,0.3589,286.7,997.70,25.83,28.86,105.8},
	{329.000000,0.00127555,0.00064642,2.2799,0.3499,286.3,998.35,24.52,28.16,105.8},
	{329.250000,0.00127834,0.00061317,2.2753,0.3038,288.9,996.80,29.46,26.71,105.8},
	{329.500000,0.00127797,0.00061143,2.2749,0.3021,288.9,996.33,28.55,28.44,105.8},
	{329.750000,0.00127597,0.00061312,2.2768,0.3166,288.1,997.39,26.02,27.05,105.8},
	{330.000000,0.00127552,0.00060589,2.2768,0.3086,288.4,997.54,24.35,29.12,105.8},
	{330.250000,0.00127699,0.00058662,2.2738,0.2981,290.2,996.10,28.77,29.03,105.8},
	{330.500000,0.00127774,0.00059417,2.2719,0.3017,290.2,995.67,28.60,28.09,105.8},
	{330.750000,0.00127696,0.00058582,2.2754,0.2988,289.8,996.93,26.97,27.97,105.8},
	{331.000000,0.00127657,0.00057638,2.2771,0.2833,289.8,997.62,25.68,29.47,105.8},
	{331.250000,0.00127874,0.00056853,2.2744,0.2673,291.2,996.82,29.84,26.06,105.8},
	{331.500000,0.00127849,0.00057372,2.2737,0.2752,291.0,996.23,29.91,27.51,105.8},
	{331.750000,0.00127800,0.00056665,2.2777,0.2610,290.2,997.70,26.72,25.87,105.8},
	{332.000000,0.00127550,0.00056371,2.2792,0.2742,289.5,998.51,24.75,28.01,105.8},
	{332.250000,0.00127838,0.00054593,2.2777,0.2355,290.8,998.09,28.15,23.93,105.8},
	{332.500000,0.00127959,0.00054373,2.2758,0.2278,291.3,997.60,28.57,24.29,105.8},
	{332.750000,0.00127882,0.00054045,2.2791,0.2198,290.9,999.17,25.67,22.85,105.8},
	{333.000000,0.00127661,0.00053982,2.2817,0.2251,289.9,1000.12,23.46,23.52,105.8},
	{333.250000,0.00127775,0.00053984,2.2811,0.2320,290.7,999.56,27.59,23.35,105.8},
	{333.500000,0.00127791,0.00053472,2.2800,0.2217,290.8,999.26,27.32,23.52,105.8},
	{333.750000,0.00127830,0.00053888,2.2837,0.2096,290.2,1001.20,24.58,20.28,105.8},
	{334.000000,0.00127705,0.00053774,2.2843,0.2066,289.7,1001.38,22.24,22.91,105.8},
	{334.250000,0.00127822,0.00054393,2.2837,0.2210,290.5,1000.89,28.01,22.25,105.8},
	{334.500000,0.00127937,0.00053397,2.2845,0.2029,291.2,1000.57,28.92,21.71,105.8},
	{334.750000,0.00127743,0.00054023,2.2875,0.2169,290.1,1001.57,25.28,21.38,105.8},
	{335.000000,0.00127720,0.00052756,2.2883,0.1920,290.2,1002.22,22.50,21.17,105.8},
	{335.250000,0.00127980,0.00055517,2.2881,0.1890,289.9,1002.51,27.72,21.73,105.8},
	{335.500000,0.00127837,0.00056122,2.2856,0.2045,289.8,1001.59,28.69,21.05,105.8},
	{335.750000,0.00127702,0.00056975,2.2888,0.2136,288.8,1002.67,25.65,20.14,105.8},
	{336.000000,0.00127622,0.00056712,2.2891,0.2135,288.0,1002.68,22.30,21.50,105.8},
	{336.250000,0.00127752,0.00054733,2.2876,0.2017,289.4,1001.70,27.36,20.40,105.8},
	{336.500000,0.00127739,0.00059454,2.2858,0.2540,288.0,1001.08,27.94,21.16,105.8},
	{336.750000,0.00127716,0.00061314,2.2901,0.2676,286.8,1002.44,25.14,18.65,105.8},
	{337.000000,0.00127585,0.00061234,2.2870,0.2654,286.6,1002.24,22.85,18.88,105.8},
	{337.250000,0.00127619,0.00059653,2.2861,0.2650,287.5,1001.00,27.52,20.90,105.8},
	{337.500000,0.00127605,0.00065600,2.2856,0.3070,285.2,1001.63,27.92,19.84,105.8},
	{337.750000,0.00127645,0.00067831,2.2859,0.3042,283.9,1001.48,24.67,19.22,105.8},
	{338.000000,0.00127588,0.00068557,2.2865,0.3197,283.3,1001.37,23.62,20.30,105.8},
	{338.250000,0.00127759,0.00067160,2.2848,0.3143,284.6,1000.74,26.67,21.41,105.8},
	{338.500000,0.00127633,0.00066938,2.2854,0.3354,284.8,1000.46,28.08,22.33,105.8},
	{338.750000,0.00127598,0.00066315,2.2853,0.3045,284.7,1001.12,26.24,21.40,105.8},
	{339.000000,0.00127563,0.00063261,2.2848,0.2663,285.6,1000.85,24.24,22.78,105.8},
	{339.250000,0.00127635,0.00061680,2.2799,0.2955,287.6,999.15,28.60,24.36,105.8},
	{339.500000,0.00127557,0.00063070,2.2815,0.3144,286.6,999.48,27.28,26.70,105.8},
	{339.750000,0.00127631,0.00065905,2.2818,0.3143,285.1,999.34,25.99,22.74,105.8},
	{340.000000,0.00127468,0.00067385,2.2827,0.3454,283.9,999.36,24.22,23.70,105.8},
	{340.250000,0.00127540,0.00068082,2.2778,0.3436,284.1,998.70,25.75,23.94,105.8},
	{340.500000,0.00127565,0.00067194,2.2809,0.3432,284.6,999.27,27.63,23.97,105.8},
	{340.750000,0.00127629,0.00066138,2.2829,0.3194,284.9,999.85,25.95,21.93,105.8},
	{341.000000,0.00127443,0.00064152,2.2827,0.3104,285.1,1000.40,24.33,22.89,105.8},
	{341.250000,0.00127478,0.00067696,2.2835,0.3364,283.5,1000.44,25.66,22.42,105.8},
	{341.500000,0.00127703,0.00067313,2.2835,0.3021,283.9,999.98,25.97,19.25,105.8},
	{341.750000,0.00127766,0.00067307,2.2830,0.2964,284.0,999.46,24.41,17.36,105.8},
	{342.000000,0.00127593,0.00068559,2.2852,0.3267,283.0,1000.32,22.53,18.38,105.8},
	{342.250000,0.00127580,0.00066708,2.2820,0.3094,284.1,1000.06,25.77,19.14,105.8},
	{342.500000,0.00127699,0.00066914,2.2826,0.3197,284.5,999.27,26.75,20.41,105.8},
	{342.750000,0.00127641,0.00066263,2.2804,0.3156,284.8,998.76,24.88,20.68,105.8},
	{343.000000,0.00127564,0.00066635,2.2799,0.3120,284.2,998.80,23.51,20.36,105.8},
	{343.250000,0.00127633,0.00065777,2.2788,0.3088,284.6,998.16,26.99,20.70,105.8},
	{343.500000,0.00127690,0.00064237,2.2786,0.2975,285.7,997.97,27.26,20.31,105.8},
	{343.750000,0.00127656,0.00064770,2.2794,0.2927,285.1,998.27,24.98,20.33,105.8},
	{344.000000,0.00127628,0.00063679,2.2781,0.2703,285.2,997.79,21.93,20.66,105.8},
	{344.250000,0.00127753,0.00063526,2.2743,0.2772,286.2,996.47,27.69,20.86,105.8},
	{344.500000,0.00127829,0.00063597,2.2747,0.2665,286.3,996.81,27.99,18.26,105.8},
	{344.750000,0.00127743,0.00063868,2.2785,0.2699,285.8,998.01,24.86,15.30,105.8},
	{345.000000,0.00127682,0.00063821,2.2796,0.2679,285.3,998.12,22.30,15.62,105.8},
	{345.250000,0.00127759,0.00062951,2.2763,0.2762,286.6,997.14,28.63,20.21,105.8},
	{345.500000,0.00127813,0.00064002,2.2772,0.2724,285.9,997.35,28.78,18.63,105.8},
	{345.750000,0.00127753,0.00062957,2.2797,0.2713,286.2,998.55,25.62,18.81,105.8},
	{346.000000,0.00127746,0.00063368,2.2809,0.2351,285.0,998.50,22.01,18.66,105.8},
	{346.250000,0.00127801,0.00063779,2.2772,0.2316,285.7,998.17,27.67,16.92,105.8},
	{346.500000,0.00127927,0.00062358,2.2758,0.2112,286.5,997.19,27.63,17.43,105.8},
	{346.750000,0.00127795,0.00060960,2.2783,0.2166,286.7,998.47,25.80,16.53,105.8},
	{347.000000,0.00127725,0.00060316,2.2778,0.2026,286.3,998.14,21.48,20.79,105.8},
	{347.250000,0.00127831,0.00058927,2.2755,0.2111,287.9,997.45,28.51,19.17,105.8},
	{347.500000,0.00127877,0.00062233,2.2756,0.2289,286.7,997.07,28.11,17.25,105.8},
	{347.750000,0.00127929,0.00065203,2.2783,0.2132,285.1,998.24,25.20,16.32,105.8},
	{348.000000,0.00127791,0.00064139,2.2793,0.1775,284.1,997.78,22.76,18.13,105.8},
	{348.250000,0.00128035,0.00055982,2.2768,0.1329,289.2,996.91,29.20,17.18,105.8},
	{348.500000,0.00128046,0.00061260,2.2756,0.1641,287.3,996.98,29.58,18.77,105.8},
	{348.750000,0.00127955,0.00066780,2.2788,0.2115,284.4,997.72,26.10,18.39,105.8},
	{349.000000,0.00127889,0.00064211,2.2820,0.1815,284.6,998.30,22.70,20.04,105.8},
	{349.250000,0.00127812,0.00066762,2.2782,0.3185,285.3,997.59,29.25,22.77,105.8},
	{349.500000,0.00127747,0.00066054,2.2773,0.3220,285.5,997.37,28.44,23.60,105.8},
	{349.750000,0.00127782,0.00066708,2.2787,0.3185,285.2,998.09,26.10,22.31,105.8},
	{350.000000,0.00127614,0.00065767,2.2775,0.3211,285.3,998.04,25.14,23.40,105.8},
	{350.250000,0.00127633,0.00065375,2.2808,0.3289,285.4,998.44,27.72,22.41,105.8},
	{350.500000,0.00127584,0.00065998,2.2818,0.3439,285.0,998.69,25.01,23.16,105.8},
	{350.750000,0.00127541,0.00066599,2.2839,0.3409,284.5,999.71,23.20,23.52,105.8},
	{351.000000,0.00127288,0.00065973,2.2845,0.3270,284.0,1001.31,20.57,20.32,105.8},
	{351.250000,0.00127404,0.00066483,2.2883,0.3248,283.5,1001.96,22.46,21.24,105.8},
	{351.500000,0.00127530,0.00066150,2.2875,0.3078,284.0,1001.91,21.67,18.79,105.8},
	{351.750000,0.00127576,0.00065133,2.2894,0.2804,284.0,1002.32,21.82,16.45,105.8},
	{352.000000,0.00127474,0.00064943,2.2889,0.2753,283.8,1002.79,19.85,15.05,105.8},
	{352.250000,0.00127619,0.00063348,2.2874,0.2460,284.9,1002.44,22.84,16.62,105.8},
	{352.500000,0.00127730,0.00059554,2.2852,0.2205,287.2,1001.56,25.50,17.96,105.8},
	{352.750000,0.00127723,0.00057490,2.2888,0.2134,287.4,1002.40,22.60,18.50,105.8},
	{353.000000,0.00127694,0.00057273,2.2895,0.2053,287.2,1002.79,21.00,18.13,105.8},
	{353.250000,0.00127746,0.00055731,2.2870,0.2124,289.0,1001.45,27.24,18.83,105.8},
	{353.500000,0.00127935,0.00054290,2.2845,0.2015,290.7,1000.22,28.01,19.78,105.8},
	{353.750000,0.00127934,0.00054523,2.2879,0.2076,289.8,1000.80,24.12,19.98,105.8},
	{354.000000,0.00127806,0.00053999,2.2865,0.1987,289.4,1001.10,22.25,21.03,105.8},
	{354.250000,0.00127886,0.00053719,2.2837,0.2081,291.0,999.84,28.70,21.58,105.8},
	{354.500000,0.00128034,0.00053973,2.2806,0.2044,291.7,998.67,29.94,21.25,105.8},
	{354.750000,0.00127933,0.00054504,2.2821,0.2110,290.8,999.37,26.86,20.72,105.8},
	{355.000000,0.00127689,0.00054825,2.2833,0.2253,289.9,999.73,23.86,22.47,105.8},
	{355.250000,0.00127927,0.00053599,2.2801,0.2179,291.7,998.43,29.46,22.81,105.8},
	{355.500000,0.00127908,0.00055437,2.2796,0.2444,291.3,997.75,30.10,24.03,105.8},
	{355.750000,0.00127894,0.00055315,2.2801,0.2408,290.8,998.46,28.20,22.33,105.8},
	{356.000000,0.00127718,0.00054834,2.2817,0.2367,290.3,999.43,24.56,24.99,105.8},
	{356.250000,0.00127980,0.00053924,2.2783,0.2278,292.3,998.43,30.31,23.49,105.8},
	{356.500000,0.00128021,0.00054099,2.2780,0.2300,292.5,997.83,31.06,23.36,105.8},
	{356.750000,0.00127914,0.00053895,2.2798,0.2282,291.8,998.31,28.03,23.46,105.8},
	{357.000000,0.00127720,0.00054391,2.2811,0.2333,290.6,999.06,25.15,24.47,105.8},
	{357.250000,0.00127805,0.00054895,2.2808,0.2492,291.1,998.69,29.55,24.68,105.8},
	{357.500000,0.00127941,0.00055491,2.2782,0.2429,291.0,997.65,28.62,24.33,105.8},
	{357.750000,0.00127894,0.00055018,2.2787,0.2318,290.8,998.42,27.68,24.20,105.8},
	{358.000000,0.00127656,0.00055056,2.2793,0.2393,289.8,998.88,24.44,24.13,105.8},
	{358.250000,0.00127681,0.00056385,2.2768,0.2515,290.0,998.64,28.52,23.06,105.8},
	{358.500000,0.00127712,0.00058514,2.2773,0.2739,289.2,998.05,28.82,23.66,105.8},
	{358.750000,0.00127734,0.00054414,2.2787,0.2316,290.7,999.06,26.49,24.08,105.8},
	{359.000000,0.00127648,0.00053191,2.2788,0.2130,290.4,999.14,23.84,23.50,105.8},
	{359.250000,0.00127730,0.00054327,2.2769,0.2285,290.8,998.33,28.42,23.29,105.8},
	{359.500000,0.00127869,0.00055099,2.2766,0.2291,291.0,998.09,29.94,22.30,105.8},
	{359.750000,0.00127825,0.00054309,2.2786,0.2165,290.9,999.14,27.47,21.94,105.8},
	{360.000000,0.00127774,0.00054158,2.2790,0.2043,290.3,999.22,24.06,23.22,105.8},
	{360.250000,0.00127906,0.00055049,2.2781,0.2120,291.0,998.62,30.33,22.13,105.8},
	{360.500000,0.00127919,0.00056684,2.2769,0.2354,290.7,998.22,30.85,21.32,105.8},
	{360.750000,0.00127835,0.00056261,2.2792,0.2314,290.4,999.30,29.21,22.23,105.8},
	{361.000000,0.00127709,0.00057309,2.2790,0.2257,288.7,998.56,24.65,23.52,105.8},
	{361.250000,0.00127927,0.00055872,2.2761,0.1971,290.8,997.85,30.91,22.19,105.8},
	{361.500000,0.00127949,0.00056742,2.2756,0.2196,290.7,997.51,31.41,21.58,105.8},
	{361.750000,0.00127754,0.00059055,2.2836,0.2348,288.4,1000.23,28.64,21.62,105.8},
	{362.000000,0.00127654,0.00057207,2.2813,0.1921,288.0,999.22,24.80,22.09,105.8},
	{362.250000,0.00127821,0.00058538,2.2801,0.2041,288.1,998.52,29.64,19.65,105.8},
	{362.500000,0.00127707,0.00058657,2.2790,0.2049,287.7,998.28,29.07,19.48,105.8},
	{362.750000,0.00127761,0.00058696,2.2831,0.2022,287.2,999.91,25.93,17.82,105.8},
	{363.000000,0.00127436,0.00059461,2.2844,0.2157,285.2,1000.65,21.33,17.98,105.8},
	{363.250000,0.00127569,0.00059053,2.2863,0.2274,286.1,1001.16,26.19,19.21,105.8},
	{363.500000,0.00127654,0.00056662,2.2840,0.1881,287.4,1000.56,26.27,19.26,105.8},
	{363.750000,0.00127714,0.00054876,2.2882,0.1599,287.6,1001.92,23.96,17.39,105.8},
	{364.000000,0.00127546,0.00057814,2.2889,0.1711,285.5,1002.36,20.15,16.29,105.8},
	{364.250000,0.00127706,0.00060383,2.2885,0.1821,285.4,1002.47,25.70,15.57,105.8},
	{364.500000,0.00127757,0.00061151,2.2835,0.1714,285.5,1000.52,25.75,13.90,105.8},
	{364.750000,0.00127702,0.00061634,2.2893,0.1880,284.7,1002.26,22.80,14.35,105.8},
	{365.000000,0.00127572,0.00063695,2.2884,0.2128,283.8,1002.78,19.74,15.20,105.8},
	{365.250000,0.00127509,0.00064417,2.2894,0.2363,283.8,1003.02,25.12,15.21,105.8},
	{365.500000,0.00127536,0.00064997,2.2869,0.2548,284.0,1001.76,25.05,15.26,105.8},
	{365.750000,0.00127526,0.00065757,2.2892,0.2655,283.7,1002.43,24.09,14.10,105.8},
	{366.000000,0.00127537,0.00063404,2.2847,0.2457,285.0,1001.70,21.79,15.37,105.8},
	{366.250000,0.00127552,0.00063234,2.2852,0.2734,285.4,1001.46,26.37,18.05,105.8},
	{366.500000,0.00127533,0.00063396,2.2851,0.2753,285.2,1000.94,25.94,17.68,105.8},
	{366.750000,0.00127518,0.00063296,2.2884,0.2867,285.2,1002.33,22.59,17.89,105.8},
	{367.000000,0.00127518,0.00063296,2.2886,0.2867,285.2,1002.33,22.59,17.89,105.8}
};
//+++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++
//
//   Created Chaiyut Charoenphon 
//   18-Nov-2016
//+++++++++++++++++++++++++++++++++++++++++++++++
// Constructor
////////////////////////////////////////////////////////////////////////////
t_pppGpt::t_pppGpt(){
	//# initialization of new vectors
	_P =  0.0;
	_T =  0.0;
	_dT = 0.0;
	_Tm = 0.0;
	_e =  0.0;
	_ah = 0.0;
	_aw = 0.0;
	_la = 0.0;
	_undu = 0.0;
	_dlat = 0.0;
	_dlon = 0.0;
	_hell = 0.0;
	_range = 0.0;
	_mDataSet = false;
	//_mData = "";
	for( unsigned n=0; n<_numData; n++){  
		// //# read mean values and amplitudes
		for (unsigned j =0; j<5; j++){
			pgrid[n][j] = COFF_DATA[n][2+j];        //# pressure in Pascal
			Tgrid[n][j] = COFF_DATA[n][7+j];        //# temperature in Kelvin
		    Qgrid[n][j] =(COFF_DATA[n][12+j])/1000; //# specific humidity in kg/kg	
			dTgrid[n][j]=(COFF_DATA[n][17+j])/1000; //# temperature lapse rate in Kelvin/m
			ahgrid[n][j]=(COFF_DATA[n][24+j])/1000; //# hydrostatic mapping function coefficient, dimensionless
			awgrid[n][j]=(COFF_DATA[n][29+j])/1000; //# wet mapping function coefficient, dimensionless
			lagrid[n][j]= COFF_DATA[n][34+j];    	 //# water vapor decrease factor, dimensionless
			Tmgrid[n][j]= COFF_DATA[n][39+j];       //# mean temperature in Kelvin
		};
		ugrid[n] = COFF_DATA[n][22];                    //# geoid undulation in m
		Hsgrid[n]= COFF_DATA[n][23];                     //# orthometric grid height in m
	}
	//_mData = "";	
};

t_pppGpt::~t_pppGpt(){};

int t_pppGpt::mjdToDoy(double dmjd){
	// Output:	Day of Year and second of day   ext 234.32324

    // Julian day
    double jd = floor (dmjd) + 2400000.5;
    // Integer Julian day
    int jdi = floor (jd);
    // Fractional part of day
    double jdf = jd - jdi + 0.5;
    // Really the next calendar day?
    if (jdf >= 1.0) {
       jdf = jdf - 1.0;
       jdi  = jdi + 1;
    }
    //double hour = jdf * 24.0;    
    int i = jdi + 68569;
    int n = floor (4 * i / 146097);

    i = floor (i) - floor ((146097 * n + 3) / 4);
    int year = floor (4000 * (i + 1) / 1461001);
    i = i - (floor (1461 * year / 4)) + 31;
    int month = floor (80 * i / 2447);
    
    int dayOfMonth = i - floor (2447 * month / 80);
    
    i = floor (month / 11);
    
    month = floor (month + 2 - 12 * i);
    year = floor (100 * (n - 49) + year + i);

	return dayOfMonth + ((month < 3) ? (int)((306 * month - 301) / 10) : (int)((306 * month - 913) / 10) + ((year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) ? 60 : 59));
}
std::string t_pppGpt::tail(std::string const& source, size_t const length) {
  if (length >= source.size()) { return source; }
  return source.substr(source.size() - length);
}
		
std::string t_pppGpt::mjdToYMD(double dmjd){
	// Output:	String YYMMDD ext. 171002

    // Julian day
    double jd = floor (dmjd) + 2400000.5;
    // Integer Julian day
    int jdi = floor (jd);
    // Fractional part of day
    double jdf = jd - jdi + 0.5;
    // Really the next calendar day?
    if (jdf >= 1.0) {
       jdf = jdf - 1.0;
       jdi  = jdi + 1;
    }
    //double hour = jdf * 24.0;    
    int i = jdi + 68569;
    int n = floor (4 * i / 146097);

    i = floor (i) - floor ((146097 * n + 3) / 4);
    int year = floor (4000 * (i + 1) / 1461001);
    i = i - (floor (1461 * year / 4)) + 31;
    int month = floor (80 * i / 2447);
    
    int dayOfMonth = i - floor (2447 * month / 80);
    
    i = floor (month / 11);
    
    month = floor (month + 2 - 12 * i);
    year = floor (100 * (n - 49) + year + i);

	return tail(int2str(year),2) + tail("0" + int2str(month),2) + tail("0" + int2str(dayOfMonth),2);
}

double t_pppGpt::currentDdoy(){
	//Output : current Day Of Year in UTC
	time_t rawtime;
	struct tm * ptm;
	time ( &rawtime );
	ptm = gmtime ( &rawtime );	
   //tm_yday -> day in the year, range 0 to 365
	return ptm->tm_yday + 1.0 + (ptm->tm_hour + ptm->tm_min/60.0 + ptm->tm_sec/3600.0)/24.0; 
}
void t_pppGpt::cmpMdata(std::string cwd, std::string roverName, bncTime& bnctime, double* ell){
	/*
	input:
		 cwd : current directory ext: home/ubuntu/bnc
		 roverName : GNSS Station Name
		 dmjd : modefied julian day
		 ell : latitude, longitude and ellipsoidal height
     output : void
	*/
	double dmjd = bnctime.mjddec();
	double secOfday = dmjd - floor(dmjd);	
	//double doy = mjdToDoy(dmjd) + secOfday;
    //std::string flname = cwd +"/Example_Configs/mdata/" + roverName +"_" + mjdToYMD(dmjd)  + "_utc.txt";
    //const char* cstr = flname.c_str();
    //std::ifstream file(cstr);
    _dlat = ell[0];
    _dlon = ell[1];
    _hell = ell[2];
    //_mDataSet = true;
    _mDataSet = GPT3(dmjd, _dlat, _dlon,_hell);
    //if(file){
	//	_mDataSet = getMFile(file, doy);
	//	_mData = "MFile";
	//}else{
	_mData = "GPT3";
	//}
	_Tm = cmpTm(secOfday, _T);
	//free(cstr);
	//_mDataSet = false;
}
void t_pppGpt::strToMdata(std::string num, double* mdata){
	// Change String to double Array
	std::stringstream stream(num);
	int i = 0;
	double n;
	while(stream >> n){
		mdata[i++]=n;
		if(i==4)break; // Limited 4 values {DOY, Temperature, Pressure, Vapor Pressure}
	}	
}
void t_pppGpt::getMFileLastLine(std::ifstream& in, double* mdata){
    // input
    //     in: m file
    //     mdata: array of double size 4x1
    // output
    //     mdata:array of double size 4x1
    
    std::ifstream::pos_type pos = in.tellg();
    std::ifstream::pos_type lastPos;
    while (in >> std::ws && ignoreline(in, lastPos))
        pos = lastPos;

    in.clear();
    in.seekg(pos);

    std::string line;
    std::getline(in, line);
	strToMdata(line, mdata);	
}

double t_pppGpt::mapf(double el, double a, double b, double c){
    double sinel=sin(el);
    return (1.0+a/(1.0+b/(1.0+c)))/(sinel+(a/(sinel+b/(sinel+c))));
}

void t_pppGpt::MTT(double EL, double lat, double T, double H, double* mf){
	/*
	 * Ref : MMT (Herring, 1992) "Modeling atmospheric delays in the analysis of space geodetic data"
	 * Input:
			EL Elevation Angle (radians)
			lat Station latitude (radians)
			t surface temperature(C)
			H station orthometric height (m)
	 * Output:
			mf hydrostatic and wet mapping Function
	*/	
	double ah = (1.2320 + 0.0139*cos(lat) - 0.0000209*H + 0.00215*(T-10))*0.001;
	double bh = (3.1612 - 0.1600*cos(lat) - 0.0000331*H + 0.00206*(T-10))*0.001;
	double ch = (71.240 - 4.2930*cos(lat) - 0.0001490*H - 0.00210*(T-10))*0.001;
	mf[0] = mapf(EL, ah, bh, ch);
		
	double aw = (0.5830 + 0.011*cos(lat) - 0.000052*H + 0.0014*(T-10))*0.001;
	double bw = (1.4020 - 0.102*cos(lat) - 0.000101*H + 0.0022*(T-10))*0.001;
	double cw = (45.850 - 1.910*cos(lat) - 0.001290*H - 0.0150*(T-10))*0.001;	
	mf[1] = mapf(EL, aw, bw, cw);
}
void t_pppGpt::Ifadis(double EL, double P, double T, double e, double* mf){
	/*
	 * Ref : Ifadis, 1986) "The atmospheric delay of radio waves: Modeling the elevation dependence on a global scale"
	 * Input:
			EL Elevation Angle radians
			p surface total pressure(hPa)
			e water vapor pressure(hPa)
			t surface temperature(C)
	 * Output:
			mf hydrostatic and wet mapping Function
	*/
	double ah = 0.001237 + 0.1316E-6*(P-1000.0) + 0.1378E-5*(T - 15) + 0.8057E-5*sqrt(e);
	double bh = 0.003333 + 0.1946E-6*(P-1000.0) + 0.1040E-6*(T - 15) + 0.1747E-4*sqrt(e);
	double ch = 0.078;
	mf[0] = mapf(EL, ah, bh, ch);
	
	double aw = 0.0005236 + 0.2471E-6*(P-1000.0) - 0.1724E-6*(T - 15) + 0.1328E-4*sqrt(e);
	double bw = 0.0017050 + 0.7384E-6*(P-1000.0) + 0.3767E-6*(T - 15) + 0.2147E-4*sqrt(e);
	double cw = 0.05917;
	mf[1] = mapf(EL, aw, bw, cw);
}
double t_pppGpt::interpc(const double coef[], double lat){
	/*
	 *Input :
	 * 		coef : height correction
	 * 		lat  : station latitude (degree)
	 Output :
	 * 		coef linear interpolation
	*/
    int i=(int)(lat/15.0);
    if (i<1) return coef[0]; else if (i>4) return coef[4];
    return coef[i-1]*(1.0-lat/15.0+i)+coef[i]*(lat/15.0-i);
}
void t_pppGpt::NMF(double EL, double doy, double lat, double H, double* mf){
    /* ref [5] table 3 */
    /* hydro-ave-a,b,c, hydro-amp-a,b,c, wet-a,b,c at latitude 15,30,45,60,75 */
    /*
     * Input :
      		EL Elevation Angle radians
			doy Day of Year
			lat station latitude(degree)
			H station orthomatic height (m) /!!!ellipsoidal height is used instead of height above sea level /
	 * Output:
			mf hydrostatic and wet mapping Function			
    */
    const double coef[][5]={
        { 1.2769934E-3, 1.2683230E-3, 1.2465397E-3, 1.2196049E-3, 1.2045996E-3},
        { 2.9153695E-3, 2.9152299E-3, 2.9288445E-3, 2.9022565E-3, 2.9024912E-3},
        { 62.610505E-3, 62.837393E-3, 63.721774E-3, 63.824265E-3, 64.258455E-3},
        
        { 0.0000000E-0, 1.2709626E-5, 2.6523662E-5, 3.4000452E-5, 4.1202191E-5},
        { 0.0000000E-0, 2.1414979E-5, 3.0160779E-5, 7.2562722E-5, 11.723375E-5},
        { 0.0000000E-0, 9.0128400E-5, 4.3497037E-5, 84.795348E-5, 170.37206E-5},
        
        { 5.8021897E-4, 5.6794847E-4, 5.8118019E-4, 5.9727542E-4, 6.1641693E-4},
        { 1.4275268E-3, 1.5138625E-3, 1.4572752E-3, 1.5007428E-3, 1.7599082E-3},
        { 4.3472961E-2, 4.6729510E-2, 4.3908931E-2, 4.4626982E-2, 5.4736038E-2}
    };
    const double aht[]={ 2.53E-5, 5.49E-3, 1.14E-3}; /* height correction */
    
    double y,cosy,ah[3],aw[3];
    int i;
    
    if (EL<=0.0) {
        mf[0]=0.0; mf[1]=0.0;
        return;
    }
    /* year from doy 28, added half a year for southern latitudes */
    y=(doy-28.0)/365.25+(lat<0.0?0.5:0.0);
    
    cosy=cos(2.0*M_PI*y);
    lat=fabs(lat);
    
    for (i=0;i<3;i++) {
        ah[i]=interpc(coef[i  ],lat)-interpc(coef[i+3],lat)*cosy;
        aw[i]=interpc(coef[i+6],lat);
    }
    /* ellipsoidal height is used instead of height above sea level */
    double dm=(1.0/sin(EL)-mapf(EL,aht[0],aht[1],aht[2]))*H*0.001;
    
    mf[0]=mapf(EL,ah[0],ah[1],ah[2]) + dm;
    mf[1]=mapf(EL,aw[0],aw[1],aw[2]);  
}
bool t_pppGpt::getMFile(std::ifstream& in, double doy){
	// Input 
	//     in : m file
	//     doysec : daysec
	// Output 
	//     _T : Temperature
	//	   _P : Pressure
	//     _e : water vapor pressure
	//	   mDataset : success
	bool mDateSet = false;
	std::string num;
	double dthp[4];
	//double daysec = doy - floor(doy);
	while (std::getline(in, num)) {
		strToMdata(num, dthp);
		if(dthp[0]>doy)break;
		else{
			//_tempDb=dthp[0]; // DOY
			_T=dthp[1]; // Temperature Celcius
			_P=dthp[2]; // Pressure  hPa
			_e=dthp[3]; // Vapor pressure hPa
			mDateSet = true;
		}
	}
	return mDateSet;
}
void t_pppGpt::VMF(double ah,double aw,double dmjd,double dlat,double hell, double zd, double* vmf){
	 /*     
	% C     !!! This is the version with height correction !!!  
	% C     !!! It has to be used with the grid !!!    
	% C
	% C     This subroutine determines the VMF1 (Vienna Mapping Functions 1)
	% C     Reference: Boehm, J., B. Werl, H. Schuh (2006), 
	% C     Troposphere mapping functions for GPS and very long baseline interferometry 
	% C     from European Centre for Medium-Range Weather Forecasts operational analysis data,
	% C     J. Geoph. Res., Vol. 111, B02406, doi:10.1029/2005JB003629.
	% C
	% C     Please mind that the coefficients in this paper are wrong. The corrected version of
	% C     the paper can be found at: 
	% C     http://ggosatm.hg.tuwien.ac.at/DOCS/PAPERS/2006Boehm_etal_VMF1.pdf
	% C
	% C     input data
	% C     ----------
	% C     ah:   hydrostatic coefficient a (http://ggosatm.hg.tuwien.ac.at/DELAY/GRID/)
	% C     aw:   wet coefficient a         (http://ggosatm.hg.tuwien.ac.at/DELAY/GRID/)  
	% C     dmjd: modified julian date
	% C     dlat: ellipsoidal latitude in radians
	% C     hell:   ellipsoidal height in meter
	% C     zd:   zenith distance in radians
	% C	   vmf : 
	% C     output data
	% C     -----------
	% C     vmf  : 
	% C        vmf[0]: hydrostatic mapping function
	% C        vmf[1]: wet mapping function
	% C      
	% C      Modefied : Chaiyut Charoenphon  18-Nov-2016
	% C    
	% C    
	% C     Johannes Boehm, 2005 October 2
	% C     Rev 2011 July 21: latitude -> ellipsoidal latitude
	% C
	% 
	%       implicit double precision (a-h,o-z)
	% 
	%       pi = 3.14159265359d0
	%       
	% C     reference day is 28 January
	% C     this is taken from Niell (1996) to be consistent
	% C
	*/
	double doy = dmjd  - 44239.0 + 1 - 28;
	double phh = 0.0;
	double c11h = 0.005;
	double c10h = 0.001;
	double bh = 0.0029;
	double c0h = 0.062;
	if (dlat<0) {  //  %   ! southern hemisphere
		phh  = M_PI;
		c11h = 0.007;
		c10h = 0.002;
	}else{          //   %   ! northern hemisphere
		phh  = 0.0;
		c11h = 0.005;
		c10h = 0.001;
	}
	  
	double ch = c0h + ((cos(doy/365.250*2.0*M_PI + phh)+1.0)*c11h/2.0 + c10h)*(1.0-cos(dlat));
    double sine   = sin(M_PI/2.0 - zd);
    double beta   = bh/( sine + ch  );
    double gamma  = ah/( sine + beta);
    double topcon = (1.0 + ah/(1.0 + bh/(1.0 + ch)));
    double vmf1h   = topcon/(sine+gamma);

	//% C  height correction for hydrotatic part [Niell, 1996]     
	double a_ht = 2.53e-5;
	double b_ht = 5.49e-3;
	double c_ht = 1.14e-3;
	double hs_km  = hell/1000.0;
	beta         = b_ht/( sine + c_ht);
	gamma        = a_ht/( sine + beta);
	topcon       = (1.0 + a_ht/(1.0 + b_ht/(1.0 + c_ht)));
	double ht_corr_coef = 1.0/sine - topcon/(sine + gamma);
	double ht_corr      = ht_corr_coef * hs_km;
	vmf[0] = vmf1h + ht_corr; // hydrostatic mappping function

	double bw = 0.00146;
	double cw = 0.04391;
	beta   = bw/( sine + cw );
	gamma  = aw/( sine + beta);
	topcon = (1.0 + aw/(1.0 + bw/(1.0 + cw)));
	vmf[1]   = topcon/(sine+gamma); // wet mapping function

}
// Tropospheric Model (Saastamoinen) using Mdata
////////////////////////////////////////////////////////////////////////////
double t_pppGpt::delay_saastMdata(double Ele,double hell, double pp, double Ts, double ee) {
  /*
	input 
		zen : zenith distance in radius
		pp  : Pressure in hPa
		Ts  : Temperature in Celsius 
		ee  : water vapor pressure hPa
		hell: ellipsoidal height
	output : Troposphere Zenith Delay
  */
  double height = hell;
  double h_km = height / 1000.0;

  if (h_km < 0.0) h_km = 0.0;
  if (h_km > 5.0) h_km = 5.0;
  int    ii   = int(h_km + 1);
  double href = ii - 1;

  double bCor[6];
  bCor[0] = 1.156;
  bCor[1] = 1.006;
  bCor[2] = 0.874;
  bCor[3] = 0.757;
  bCor[4] = 0.654;
  bCor[5] = 0.563;

  double BB = bCor[ii-1] + (bCor[ii]-bCor[ii-1]) * (h_km - href);

  double zen  = M_PI/2.0 - Ele;
  double TT = Ts + 273.15;
  return (0.002277) * (pp + ((1255.0/TT)+0.05)*ee - BB*(tan(zen)*tan(zen)));
}
// Zenith Wet Delay 
//////////////////////////////////////////////////////
double t_pppGpt::zwd_aske(double e, double Tm, double lambda){
	/*
	% This subroutine determines the zenith wet delay based on the
	% equation 22 by Aske and Nordius (1987) 
	%
	% c Reference:
	% Askne and Nordius, Estimation of tropospheric delay for microwaves from
	% surface weather data, Radio Science, Vol 22(3): 379-386, 1987.
	%
	% input parameters:
	%
	% e:      water vapor pressure in hPa 
	% Tm:     mean temperature in Kelvin
	% lambda: water vapor lapse rate (see definition in Askne and Nordius 1987)
	% 
	% output parameters:
	%
	% zwd:  zenith wet delay in meter 
	%
	% Example 1 :
	%
	% e =  10.9621 hPa
	% Tm = 273.8720
	% lambda = 2.8071
	%
	% output:
	% zwd = 0.1176 m
	%
	% Johannes Boehm, 3 August 2013
	% ---
	*/
	//% coefficients
	double k1  = 77.604; 				   //% K/hPa
	double k2 = 64.79; 				  // % K/hPa
	double k2p = k2 - k1*18.0152/28.9644; //% K/hPa
	double k3  = 377600; 				   //% KK/hPa

	//% mean gravity in m/s**2
	double gm = 9.80665;
	//% molar mass of dry air in kg/mol
	double dMtr = 28.965*0.001;
	//% universal gas constant in J/K/mol
	double R = 8.3143;
	//% specific gas constant for dry consituents
	double Rd = R/dMtr ; //287.0464353530122
	// Rd = 287.053 J/K/kg //Chen, B., and Liu, Z. (2016
	return 0.000001*(k2p + k3/Tm)*Rd/(lambda + 1)/gm*e;
}
// Zenith hydrostatic Delays
double t_pppGpt::zhd_vmf(double doy){
	double zhd = 0.0;
	unsigned numData = sizeof(VMF_DATA)/sizeof(*VMF_DATA);
	if(doy<VMF_DATA[0][0])zhd = VMF_DATA[0][3];
	for( unsigned n=0; n<numData; n++){ 
		if(VMF_DATA[n][0] == doy){
			zhd = VMF_DATA[n][3];
			break;
		}else if(VMF_DATA[n][0] > doy){
			zhd = VMF_DATA[n-1][3] + (doy-VMF_DATA[n-1][0])*(VMF_DATA[n][3] - VMF_DATA[n-1][3])/(VMF_DATA[n][0] - VMF_DATA[n-1][0]);
			break;
		}
	}
	return zhd;
}
// Zenith hydrostatic Delays 
double t_pppGpt::zhd_baby(double P, double Ts, double dT, double rs){
	/*
	 * This subroutine determines the zenith hydrostatic delay based on the
		% equation by Baby el. (1988)
	 Input 
	 * P : Pressure hPa.
	 * Ts : Temperature Celsius
	 * dT : Temerature laps rate (kelvin per kilometer)
	 * rs = distance from the center of earth to the station (meter)
	 * 
	 output
	 * zhd : unit meter
	 */
	//% molar mass of dry air in kg/mol
	double dMtr = 28.965*0.001;
	//% universal gas constant in J/K/mol
	double R = 8.3143;
	//% specific gas constant for dry consituents
	double Rd = R/dMtr ; //287.0464353530122	 
	//double Rd = 287.053;//Chen, B., and Liu, Z. (2016
	double TT = Ts + 273.15; // in Kalvin
	double gs = 9.80665; // m/s2
	double a = 2*TT*Rd*(rs*dT - 2*TT);
	double b = rs*dT*(gs*rs + Rd*(rs*dT - 2*TT));
	return 0.0223009*P*(1 + (a/b))/gs;
}
// Zenith Wet Delays Saastamoinen
double t_pppGpt::zwd_saast(double e, double Ts){
	
	// Input 
	//	e : Water Vapor pressure in hPa
	//	T : Temperature in Celsius
	// Output
	// Zenith wet delay in mater
	
	double TT = Ts + 273.15; // in Kalvin
	return 0.002277*(1255.0/TT+0.05)*e;
}
// Zenith Hydrostatic Delay
////////////////////////////////////////////////////////////////////////////
double t_pppGpt::zhd_saast(double P, double dlat, double hell) {
	/*
		% This subroutine determines the zenith hydrostatic delay based on the
		% equation by Saastamoinen (1972) as refined by Davis et al. (1985)
		%
		% c Reference:
		% Saastamoinen, J., Atmospheric correction for the troposphere and 
		% stratosphere in radio ranging of satellites. The use of artificial 
		% satellites for geodesy, Geophys. Monogr. Ser. 15, Amer. Geophys. Union, 
		% pp. 274-251, 1972.
		% Davis, J.L, T.A. Herring, I.I. Shapiro, A.E.E. Rogers, and G. Elgered, 
		% Geodesy by Radio Interferometry: Effects of Atmospheric Modeling Errors 
		% on Estimates of Baseline Length, Radio Science, Vol. 20, No. 6, 
		% pp. 1593-1607, 1985.
		%
		% input parameters:
		%
		% p:     pressure in hPa
		% dlat:  ellipsoidal latitude in radians 
		% dlon:  longitude in radians 
		% hell:  ellipsoidal height in m 
		% 
		% output parameters:
		%
		% zhd:  zenith hydrostatic delay in meter 
		%
		% Example 1 :
		%
		% p = 1000;
		% dlat = 48d0*pi/180.d0
		% hell = 200.d0
		%
		% output:
		% zhd = 2.2695 m
		%
		% Johannes Boehm, 8 May 2013
		% ---
	*/
	// Pressure from GPT2w is defferance from a local weather station about 10 hPa.
	//p = p+10.0;
	//% calculate denominator f
	double f = 1-0.00266*cos(2*dlat) - 0.00000028*hell;

	//% calculate the zenith hydrostatic delay
	return 0.0022768*P/f;
}
double t_pppGpt::cmpTm(double daysec, double T){
	/*
	 %Input : 
	 %  daysec is between 0.0 - 1.0 (UTC Time)
	 %  T unit Celsius
	 %
	 % Output : 
	 %   Tm in Thailand unit Kevin
	*/
	double Ts = T + 273.15; //# unit Kevin
	double Tm = 297.0912; //# defualt
	if (daysec >=0.25 or daysec <=0.75){
		Tm =0.6066*Ts + 113.2914; //# day time
	}else{
		Tm =0.7938*Ts + 57.4856; //# night time
	}
	return Tm;
}

bool t_pppGpt::ahwCoef(double dmjd, double dlat, double dlon){
	//# (c) Department of Geodesy and Geoinformation, Vienna University of
	//# Technology, 2013
	//++++++++++++++
	unsigned numData = sizeof(COFF_DATA)/sizeof(*COFF_DATA);
	//unsigned numW = sizeof(*COFF_DATA) / sizeof(**COFF_DATA);
	//# initialization
	double ahgrid[numData][5];
	double awgrid[numData][5];
	double lagrid[numData][5];
	
	double plat = dlat*180.0/M_PI;
	double plon = dlon*180.0/M_PI;
	
	// Check Boundary in Thailand
	if(!((plat>5.570728) && (plat<20.544796) && (plon>97.295242) && (plon<105.776465))){
		return false;
	}
		
	unsigned indx[4]={0,0,0,0};
	int flat = floor(plat-0.5)-4;
	int flon =106-floor(plon-0.5);	
	//# transform to polar distance in degrees
	double ppod = (-dlat + M_PI/2)*180.0/M_PI; 
	// find the index (line in the grid file) of the nearest point
	//# changed for the 1 degree grid (GP)
	double ipod = floor((ppod+1.0)); 
	double ilon = floor((plon+1.0));
	//# normalized (to one) differences, can be positive or negative
	//# changed for the 1 degree grid (GP)
	double diffpod = (ppod - (ipod - 0.5));
	double difflon = (plon - (ilon - 0.5));                
	//# change the reference epoch to January 1 2000
	double dmjd1 = dmjd-51544.5;
	//# factors for amplitudes
	double cosfy = cos(dmjd1/365.25*2*M_PI);
	double coshy = cos(dmjd1/365.25*4*M_PI);
	double sinfy = sin(dmjd1/365.25*2*M_PI);
	double sinhy = sin(dmjd1/365.25*4*M_PI);	
	// Data index
	indx[0] = (numData - flat * 11 - 1 - flon);// LL
	indx[1] = indx[0] - 11;            // UL
	indx[2] = indx[0] + 1;             // LR
	indx[3] = indx[1] + 1;             // UR 

	//# loop over grid points
	//# for the 1 degree grid (GP)
	//# Thailand AreaGrid
	for( unsigned n=0; n<numData; n++){  
		// //# read mean values and amplitudes
		for (unsigned j =0; j<5; j++){
			ahgrid[n][j]  = (COFF_DATA[n][24+j])/1000; //# hydrostatic mapping function coefficient, dimensionless
			awgrid[n][j]  = (COFF_DATA[n][29+j])/1000; //# wet mapping function coefficient, dimensionless
			lagrid[n][j]   = COFF_DATA[n][34+j];       //# water vapor decrease factor, dimensionless
		};
	}
	double ahl[4] = {0.0,0.0,0.0,0.0};
	double awl[4] = {0.0,0.0,0.0,0.0};
	double lal[4]  = {0.0,0.0,0.0,0.0};
	
	for(unsigned l=0; l<4; l++){
		//#hydrostatic coefficient ah
		ahl[l] = ahgrid[indx[l]][0] + ahgrid[indx[l]][1]*cosfy + ahgrid[indx[l]][2]*sinfy + ahgrid[indx[l]][3]*coshy + ahgrid[indx[l]][4]*sinhy;
		//#wet coefficient aw
		awl[l] = awgrid[indx[l]][0] + awgrid[indx[l]][1]*cosfy + awgrid[indx[l]][2]*sinfy + awgrid[indx[l]][3]*coshy + awgrid[indx[l]][4]*sinhy;
		//#water vapor decrease factor la - added by GP
		lal[l] = lagrid[indx[l]][0] + lagrid[indx[l]][1]*cosfy + lagrid[indx[l]][2]*sinfy + lagrid[indx[l]][3]*coshy + lagrid[indx[l]][4]*sinhy;		
	}
	double dnpod1 = fabs(diffpod); //# distance nearer point
	double dnpod2 = 1 - dnpod1;  //# distance to distant point
	double dnlon1 = fabs(difflon);
	double dnlon2 = 1 - dnlon1;	
	//# hydrostatic Coef
	double R1 = dnpod2*ahl[0]+dnpod1*ahl[1];
	double R2 = dnpod2*ahl[2]+dnpod1*ahl[3];
	_ah = dnlon2*R1+dnlon1*R2;

	//# wet Coef
	R1 = dnpod2*awl[0]+dnpod1*awl[1];
	R2 = dnpod2*awl[2]+dnpod1*awl[3];
	_aw = dnlon2*R1+dnlon1*R2;

	//# water vapor decrease factor la - added by GP
	R1 = dnpod2*lal[0]+dnpod1*lal[1];
	R2 = dnpod2*lal[2]+dnpod1*lal[3];
	_la = dnlon2*R1+dnlon1*R2;	
	
	return true;
}
void t_pppGpt::VMF3(double ah,double aw,double mjd,double lat,double lon, double zd, double* vmf){
 /*
    Reference http://vmf.geo.tuwien.ac.at/readme.txt
	% vmf3.m 
	%
	% (c) Department of Geodesy and Geoinformation, Vienna University of
	% Technology, 2016
	%
	% This subroutine determines the VMF3 hydrostatic and wet mapping factors.
	% The a coefficients have to be inserted from discrete data, while the b
	% and c coefficients are of empirical nature containing a geographical 
	% and temporal dependence, represented in spherical harmonics. The 
	% spherical harmonics coefficients are developed to degree and order 12 and 
	% are based on a 5ฐx5ฐ grid containing ray-tracing data from 2001-2010.
	% All input quantities have to be scalars!
	%
	% INPUT: 
	%        o ah: hydrostatic mf coefficient a (http://vmf.geo.tuwien.ac.at/trop_products/)
	%        o aw: wet mf coefficient a (http://vmf.geo.tuwien.ac.at/trop_products/)
	%        o mjd: modified julian date
	%        o lat: latitude (radians)
	%        o lon: longitude (radians)
	%        o zd: zenith distance (radians)
	%
	% OUTPUT:
	%        o mfh: hydrostatic mapping factor
	%        o mfw: wet mapping factor
	%
	%--------------------------------------------------------------------------
	% 
	% m-file created by Daniel Landskron
	%
	%--------------------------------------------------------------------------
	% History:
	%
	% 2016-03-14: m-file created
	%
	%--------------------------------------------------------------------------


	% convert mjd to doy
	 */
	//% convert mjd to doy

	double hour = floor((mjd-floor(mjd))*24);   //% get hours
	double minu = floor((((mjd-floor(mjd))*24)-hour)*60);   //% get minutes
	double sec = (((((mjd-floor(mjd))*24)-hour)*60)-minu)*60;   //% get seconds	 
	//% change secs, min hour whose sec==60
	if (sec==60){
		minu = minu + 1;
		sec = 0;
	}
	if(minu==60){
		hour = hour + 1;
		minu = 0;
	}

	//% calc jd (yet wrong for hour==24)
	double jd = mjd+2400000.5;

	//% if hr==24, correct jd and set hour==0
	if(hour==24){
		jd = jd + 1;
		hour = 0;
	}
	//% integer julian date
	double jd_int = floor(jd+0.5);

	double aa = jd_int+32044;
	double bb = floor((4*aa+3)/146097);
	double cc = aa-floor((bb*146097)/4);
	double dd = floor((4*cc+3)/1461);
	double ee = cc-floor((1461*dd)/4);
	double mm = floor((5*ee+2)/153);

	int day = ee-floor((153*mm+2)/5)+1;
	int month = mm+3-12*floor(mm/10);
	int year = bb*100+dd-4800+floor(mm/10); 


	//% first check if the specified year is leap year or not (logical output)
	int leapYear = 0;
	if(((year % 4 == 0) && (year % 100 != 0)) || (year%400 == 0)){
		leapYear = 1;
	}

	const double days[] = {31,28,31,30,31,30,31,31,30,31,30,31};
	double doy = day;
	for( int i = 0; i < (month-1); i=i+1 ) {
		doy = doy + days[i];
	}	
	//double doy = sum(days(1:month-1)) + day;
	if ((leapYear == 1) && (month > 2)){
		doy = doy + 1;
	}
	doy = doy + mjd-floor(mjd);   //% add decimal places
	//% determine the VMF3 coefficients
	//% Legendre functions for bh, bw, ch and cw 
	const double anm_bh[91][5] = {{0.00271285863109945,-1.39197786008938e-06,1.34955672002719e-06,2.71686279717968e-07,1.56659301773925e-06},{9.80476624811974e-06,-5.83922611260673e-05,-2.07307023860417e-05,1.14628726961148e-06,4.93610283608719e-06},{-1.03443106534268e-05,-2.05536138785961e-06,2.09692641914244e-06,-1.55491034130965e-08,-1.89706404675801e-07},{-3.00353961749658e-05,2.37284447073503e-05,2.02236885378918e-05,1.69276006349609e-06,8.72156681243892e-07},{-7.99121077044035e-07,-5.39048313389504e-06,-4.21234502039861e-06,-2.70944149806894e-06,-6.80894455531746e-07},{7.51439609883296e-07,3.85509708865520e-07,4.41508016098164e-08,-2.07507808307757e-08,4.95354985050743e-08},{2.21790962160087e-05,-5.56986238775212e-05,-1.81287885563308e-05,-4.41076013532589e-06,4.93573223917278e-06},{-4.47639989737328e-06,-2.60452893072120e-06,2.56376320011189e-06,4.41600992220479e-07,2.93437730332869e-07},{8.14992682244945e-07,2.03945571424434e-07,1.11832498659806e-08,3.25756664234497e-08,3.01029040414968e-08},{-7.96927680907488e-08,-3.66953150925865e-08,-6.74742632186619e-09,-1.30315731273651e-08,-2.00748924306947e-09},{-2.16138375166934e-05,1.67350317962556e-05,1.93768260076821e-05,1.99595120161850e-06,-2.42463528222014e-06},{5.34360283708044e-07,-3.64189022040600e-06,-2.99935375194279e-06,-2.06880962903922e-06,-9.40815692626002e-07},{6.80235884441822e-07,1.33023436079845e-07,-1.80349593705226e-08,2.51276252565192e-08,-1.43240592002794e-09},{-7.13790897253802e-08,7.81998506267559e-09,1.13826909570178e-09,-5.89629600214654e-09,-4.20760865522804e-09},{-5.80109372399116e-09,1.13702284491976e-09,7.29046067602764e-10,-9.10468988754012e-10,-2.58814364808642e-10},{1.75558618192965e-05,-2.85579168876063e-05,-1.47442190284602e-05,-6.29300414335248e-06,-5.12204538913460e-07},{-1.90788558291310e-06,-1.62144845155361e-06,7.57239241641566e-07,6.93365788711348e-07,6.88855644570695e-07},{2.27050351488552e-07,1.03925791277660e-07,-3.31105076632079e-09,2.88065761026675e-08,-8.00256848229136e-09},{-2.77028851807614e-08,-5.96251132206930e-09,2.95987495527251e-10,-5.87644249625625e-09,-3.28803981542337e-09},{-1.89918479865558e-08,3.54083436578857e-09,8.10617835854935e-10,4.99207055948336e-10,-1.52691648387663e-10},{1.04022499586096e-09,-2.36437143845013e-10,-2.25110813484842e-10,-7.39850069252329e-11,7.95929405440911e-11},{-3.11579421267630e-05,-3.43576336877494e-06,5.81663608263384e-06,8.31534700351802e-07,4.02619520312154e-06},{6.00037066879001e-07,-1.12538760056168e-07,-3.86745332115590e-07,-3.88218746020826e-07,-6.83764967176388e-07},{-9.79583981249316e-08,9.14964449851003e-08,4.77779838549237e-09,2.44283811750703e-09,-6.26361079345158e-09},{-2.37742207548109e-08,-5.53336301671633e-09,-3.73625445257115e-09,-1.92304189572886e-09,-7.18681390197449e-09},{-6.58203463929583e-09,9.28456148541896e-10,2.47218904311077e-10,1.10664919110218e-10,-4.20390976974043e-11},{9.45857603373426e-10,-3.29683402990254e-11,-8.15440375865127e-11,-1.21615589356628e-12,-9.70713008848085e-12},{1.61377382316176e-10,6.84326027598147e-12,-4.66898885683671e-12,2.31211355085535e-12,2.39195112937346e-12},{2.99634365075821e-07,8.14391615472128e-06,6.70458490942443e-06,-9.92542646762000e-07,-3.04078064992750e-06},{-6.52697933801393e-07,2.87255329776428e-07,-1.78227609772085e-08,2.65525429849935e-07,8.60650570551813e-08},{-1.62727164011710e-07,1.09102479325892e-07,4.97827431850001e-09,7.86649963082937e-11,-6.67193813407656e-09},{-2.96370000987760e-09,1.20008401576557e-09,1.75885448022883e-09,-1.74756709684384e-09,3.21963061454248e-09},{-9.91101697778560e-10,7.54541713140752e-10,-2.95880967800875e-10,1.81009160501278e-10,8.31547411640954e-11},{1.21268051949609e-10,-5.93572774509587e-11,-5.03295034994351e-11,3.05383430975252e-11,3.56280438509939e-11},{6.92012970333794e-11,-9.02885345797597e-12,-3.44151832744880e-12,2.03164894681921e-12,-5.44852265137606e-12},{5.56731263672800e-12,3.57272150106101e-12,2.25885622368678e-12,-2.44508240047675e-13,-6.83314378535235e-13},{3.96883487797254e-06,-4.57100506169608e-06,-3.30208117813256e-06,3.32599719134845e-06,4.26539325549339e-06},{1.10123151770973e-06,4.58046760144882e-07,1.86831972581926e-07,-1.60092770735081e-07,-5.58956114867062e-07},{-3.40344900506653e-08,2.87649741373047e-08,-1.83929753066251e-08,-9.74179203885847e-09,-2.42064137485043e-09},{-6.49731596932566e-09,-3.07048108404447e-09,-2.84380614669848e-09,1.55123146524283e-09,4.53694984588346e-10},{5.45175793803325e-10,-3.73287624700125e-10,-1.16293122618336e-10,7.25845618602690e-11,-4.34112440021627e-11},{1.89481447552805e-10,3.67431482211078e-12,-1.72180065021194e-11,1.47046319023226e-11,1.31920481414062e-11},{2.10125915737167e-12,-3.08420783495975e-12,-4.87748712363020e-12,1.16363599902490e-14,1.26698255558605e-13},{-8.07894928696254e-12,9.19344620512607e-13,3.26929173307443e-13,2.00438149416495e-13,-9.57035765212079e-15},{1.38737151773284e-12,1.09340178371420e-13,5.15714202449053e-14,-5.92156438588931e-14,-3.29586752336143e-14},{6.38137197198254e-06,4.62426300749908e-06,4.42334454191034e-06,1.15374736092349e-06,-2.61859702227253e-06},{-2.25320619636149e-07,3.21907705479353e-07,-3.34834530764823e-07,-4.82132753601810e-07,-3.22410936343355e-07},{3.48894515496995e-09,3.49951261408458e-08,-6.01128959281142e-09,4.78213900943443e-09,1.46012816168576e-08},{-9.66682871952083e-11,3.75806627535317e-09,2.38984004956705e-09,2.07545049877203e-09,1.58573595632766e-09},{1.06834370693917e-09,-4.07975055112153e-10,-2.37598937943957e-10,5.89327007480137e-11,1.18891820437634e-10},{5.22433722695807e-11,6.02011995016293e-12,-7.80605402956048e-12,1.50873145627341e-11,-1.40550093106311e-12},{2.13396242187279e-13,-1.71939313965536e-12,-3.57625378660975e-14,-5.01675184988446e-14,-1.07805487368797e-12},{-1.24352330043311e-12,8.26105883301606e-13,4.63606970128517e-13,6.39517888984486e-14,-7.35135439920086e-14},{-5.39023859065631e-13,2.54188315588243e-14,1.30933833278664e-14,6.06153473304781e-15,-4.24722717533726e-14},{3.12767756884813e-14,-2.29517847871632e-15,2.53117304424948e-16,7.07504914138118e-16,-1.20089065310688e-15},{2.08311178819214e-06,-1.22179185044174e-06,-2.98842190131044e-06,3.07310218974299e-06,2.27100346036619e-06},{-3.94601643855452e-07,-5.44014825116083e-07,-6.16955333162507e-08,-2.31954821580670e-07,1.14010813005310e-07},{6.11067575043044e-08,-3.93240193194272e-08,-1.62979132528933e-08,1.01339204652581e-08,1.97319601566071e-08},{2.57770508710055e-09,1.87799543582899e-09,1.95407654714372e-09,1.15276419281270e-09,2.25397005402120e-09},{7.16926338026236e-10,-3.65857693313858e-10,-1.54864067050915e-11,6.50770211276549e-11,-7.85160007413546e-12},{4.90007693914221e-12,3.31649396536340e-12,4.81664871165640e-13,7.26080745617085e-12,2.30960953372164e-12},{9.75489202240545e-13,-1.68967954531421e-13,7.38383391334110e-13,-3.58435515913239e-13,-3.01564710027450e-13},{-3.79533601922805e-13,2.76681830946617e-13,1.21480375553803e-13,-1.57729077644850e-14,-8.87664977818700e-14},{-3.96462845480288e-14,2.94155690934610e-14,6.78413205760717e-15,-4.12135802787361e-15,-1.46373307795619e-14},{-8.64941937408121e-15,-1.91822620970386e-15,-8.01725413560744e-16,5.02941051180784e-16,-1.07572628474344e-15},{-4.13816294742758e-15,-7.43602019785880e-17,-5.54248556346072e-17,-4.83999456005158e-17,-1.19622559730466e-16},{-8.34852132750364e-07,-7.45794677612056e-06,-6.58132648865533e-06,-1.38608110346732e-06,5.32326534882584e-07},{-2.75513802414150e-07,3.64713745106279e-08,-7.12385417940442e-08,-7.86206067228882e-08,2.28048393207161e-08},{-4.26696415431918e-08,-4.65599668635087e-09,7.35037936327566e-09,1.17098354115804e-08,1.44594777658035e-08},{1.12407689274199e-09,7.62142529563709e-10,-6.72563708415472e-10,-1.18094592485992e-10,-1.17043815733292e-09},{1.76612225246125e-10,-1.01188552503192e-10,7.32546072616968e-11,1.79542821801610e-11,-2.23264859965402e-11},{-9.35960722512375e-12,1.90894283812231e-12,-6.34792824525760e-13,3.98597963877826e-12,-4.47591409078971e-12},{-3.34623858556099e-12,4.56384903915853e-14,2.72561108521416e-13,-3.57942733300468e-15,1.99794810657713e-13},{-6.16775522568954e-14,8.25316968328823e-14,7.19845814260518e-14,-2.92415710855106e-14,-5.49570017444031e-15},{-8.50728802453217e-15,8.38161600916267e-15,3.43651657459983e-15,-8.19429434115910e-16,-4.08905746461100e-15},{4.39042894275548e-15,-3.69440485320477e-16,1.22249256876779e-16,-2.09359444520984e-16,-3.34211740264257e-16},{-5.36054548134225e-16,3.29794204041989e-17,2.13564354374585e-17,-1.37838993720865e-18,-1.29188342867753e-17},{-3.26421841529845e-17,7.38235405234126e-18,2.49291659676210e-18,8.18252735459593e-19,1.73824952279230e-20},{4.67237509268208e-06,1.93611283787239e-06,9.39035455627622e-07,-5.84565118072823e-07,-1.76198705802101e-07},{-3.33739157421993e-07,4.12139555299163e-07,1.58754695700856e-07,1.37448753329669e-07,1.04722936936873e-07},{6.64200603076386e-09,1.45412222625734e-08,1.82498796118030e-08,2.86633517581614e-09,1.06066984548100e-09},{5.25549696746655e-09,-1.33677183394083e-09,7.60804375937931e-11,-1.07918624219037e-10,8.09178898247941e-10},{1.89318454110039e-10,9.23092164791765e-11,5.51434573131180e-11,3.86696392289240e-11,-1.15208165047149e-11},{-1.02252706006226e-12,-7.25921015411136e-13,-1.98110126887620e-12,-2.18964868282672e-13,-7.18834476685625e-13},{-2.69770025318548e-12,-2.17850340796321e-14,4.73040820865871e-13,1.57947421572149e-13,1.86925164972766e-13},{1.07831718354771e-13,2.26681841611017e-14,2.56046087047783e-14,-1.14995851659554e-14,-2.27056907624485e-14},{6.29825154734712e-15,8.04458225889001e-16,9.53173540411138e-16,1.16892301877735e-15,-1.04324684545047e-15},{-5.57345639727027e-16,-2.93949227634932e-16,7.47621406284534e-18,-5.36416885470756e-17,-2.87213280230513e-16},{1.73219775047208e-16,2.05017387523061e-17,9.08873886345587e-18,-2.86881547225742e-18,-1.25303645304992e-17},{-7.30829109684568e-18,2.03711261415353e-18,7.62162636124024e-19,-7.54847922012517e-19,-8.85105098195030e-19},{5.62039968280587e-18,-1.38144206573507e-19,1.68028711767211e-20,1.81223858251981e-19,-8.50245194985878e-20}};
	const double anm_bw[91][5] = {{0.00136127467401223,-6.83476317823061e-07,-1.37211986707674e-06,7.02561866200582e-07,-2.16342338010651e-07},{-9.53197486400299e-06,6.58703762338336e-06,2.42000663952044e-06,-6.04283463108935e-07,2.02144424676990e-07},{-6.76728911259359e-06,6.03830755085583e-07,-8.72568628835897e-08,2.21750344140938e-06,1.05146032931020e-06},{-3.21102832397338e-05,-7.88685357568093e-06,-2.55495673641049e-06,-1.99601934456719e-06,-4.62005252198027e-07},{-7.84639263523250e-07,3.11624739733849e-06,9.02170019697389e-07,6.37066632506008e-07,-9.44485038780872e-09},{2.19476873575507e-06,-2.20580510638233e-07,6.94761415598378e-07,4.80770865279717e-07,-1.34357837196401e-07},{2.18469215148328e-05,-1.80674174262038e-06,-1.52754285605060e-06,-3.51212288219241e-07,2.73741237656351e-06},{2.85579058479116e-06,1.57201369332361e-07,-2.80599072875081e-07,-4.91267304946072e-07,-2.11648188821805e-07},{2.81729255594770e-06,3.02487362536122e-07,-1.64836481475431e-07,-2.11607615408593e-07,-6.47817762225366e-08},{1.31809947620223e-07,-1.58289524114549e-07,-7.05580919885505e-08,5.56781440550867e-08,1.23403290710365e-08},{-1.29252282695869e-05,-1.07247072037590e-05,-3.31109519638196e-06,2.13776673779736e-06,-1.49519398373391e-07},{1.81685152305722e-06,-1.17362204417861e-06,-3.19205277136370e-08,4.09166457255416e-07,1.53286667406152e-07},{1.63477723125362e-06,-2.68584775517243e-08,4.94662064805191e-09,-7.09027987928288e-08,4.44353430574937e-08},{-2.13090618917978e-07,4.05836983493219e-08,2.94495876336549e-08,-1.75005469063176e-08,-3.03015988647002e-09},{-2.16074435298006e-09,9.37631708987675e-09,-2.05996036369828e-08,6.97068002894092e-09,-8.90988987979604e-09},{1.38047798906967e-05,2.05528261553901e-05,1.59072148872708e-05,7.34088731264443e-07,1.28226710383580e-06},{7.08175753966264e-07,-9.27988276636505e-07,1.60535820026081e-07,-3.27296675122065e-07,-2.20518321170684e-07},{1.90932483086199e-07,-7.44215272759193e-08,1.81330673333187e-08,4.37149649043616e-08,4.18884335594172e-08},{-5.37009063880924e-08,2.22870057779431e-08,1.73740123037651e-08,-4.45137302235032e-09,9.44721910524571e-09},{-6.83406949047909e-08,-1.95046676795923e-10,2.57535903049686e-09,4.82643164083020e-09,3.37657333705158e-09},{3.96128688448981e-09,-6.63809403270686e-10,2.44781464212534e-10,5.92280853590699e-11,-4.78502591970721e-10},{1.75859399041414e-05,-2.81238050668481e-06,-2.43670534594848e-06,3.58244562699714e-06,-1.76547446732691e-06},{-1.06451311473304e-07,1.54336689617184e-06,-2.00690000442673e-07,1.38790047911880e-09,-1.62490619890017e-07},{-2.72757421686155e-07,1.71139266205398e-07,-2.55080309401917e-08,-8.40793079489831e-09,-1.01129447760167e-08},{2.92966025844079e-08,-2.07556718857313e-08,5.45985315647905e-09,8.76857690274150e-09,1.06785510440474e-08},{-1.22059608941331e-08,6.52491630264276e-09,-1.79332492326928e-10,3.75921793745396e-10,-7.06416506254786e-10},{1.63224355776652e-09,4.95586028736232e-10,-3.07879011759040e-10,-7.78354087544277e-11,1.43959047067250e-10},{3.86319414653663e-10,-2.06467134617933e-10,4.37330971382694e-11,-5.00421056263711e-11,-9.40237773015723e-12},{-1.23856142706451e-05,7.61047394008415e-06,-1.99104114578138e-07,6.86177748886858e-07,-1.09466747592827e-07},{2.99866062403128e-07,1.87525561397390e-07,4.99374806994715e-08,4.86229763781404e-07,4.46570575517658e-07},{-5.05748332368430e-07,1.95523624722285e-08,-9.17535435911345e-08,-2.56671607433547e-08,-7.11896201616653e-08},{-2.66062200406494e-08,-5.40470019739274e-09,-2.29718660244954e-09,-3.73328592264404e-09,3.38748313712376e-09},{5.30855327954894e-10,5.28851845648032e-10,-2.22278913745418e-10,-5.52628653064771e-11,-9.24825145219684e-10},{6.03737227573716e-10,-3.52190673510919e-12,-1.30371720641414e-10,-9.12787239944822e-12,6.42187285537238e-12},{1.78081862458539e-10,2.93772078656037e-12,-1.04698379945322e-11,-2.82260024833024e-11,-5.61810459067525e-12},{9.35003092299580e-12,-8.23133834521577e-13,5.54878414224198e-13,-3.62943215777181e-13,2.38858933771653e-12},{-1.31216096107331e-05,-5.70451670731759e-06,-5.11598683573971e-06,-4.99990779887599e-06,1.27389320221511e-07},{-1.23108260369048e-06,5.53093245213587e-07,8.60093183929302e-07,2.65569700925696e-07,1.95485134805575e-07},{-2.29647072638049e-07,-5.45266515081825e-08,2.85298129762263e-08,1.98167939680185e-08,5.52227340898335e-09},{-2.73844745019857e-08,-4.48345173291362e-10,-1.93967347049382e-09,-1.41508853776629e-09,-1.75456962391145e-09},{-2.68863184376108e-11,-2.20546981683293e-09,6.56116990576877e-10,1.27129855674922e-10,-2.32334506413213e-10},{1.98303136881156e-10,6.04782006047075e-11,2.91291115431570e-11,6.18098615782757e-11,-3.82682292530379e-11},{9.48294455071158e-12,-3.05873596453015e-13,5.31539408055057e-13,-7.31016438665600e-12,-1.19921002209198e-11},{-2.25188050845725e-11,-3.91627574966393e-13,-6.80217235976769e-13,5.91033607278405e-13,5.02991534452191e-13},{1.29532063896247e-12,1.66337285851564e-13,3.25543028344555e-13,1.89143357962363e-13,3.32288378169726e-13},{-2.45864358781728e-06,4.49460524898260e-06,1.03890496648813e-06,-2.73783420376785e-06,7.12695730642593e-07},{-9.27805078535168e-07,-4.97733876686731e-07,9.18680298906510e-08,-2.47200617423980e-07,6.16163630140379e-08},{-1.39623661883136e-08,-1.12580495666505e-07,2.61821435950379e-08,-2.31875562002885e-08,5.72679835033659e-08},{-9.52538983318497e-09,-5.40909215302433e-09,1.88698793952475e-09,-4.08127746406372e-09,1.09534895853812e-10},{3.79767457525741e-09,1.11549801373366e-10,-6.45504957274111e-10,3.05477141010356e-10,1.26261210565856e-10},{5.08813577945300e-11,1.43250547678637e-11,8.81616572082448e-12,2.58968878880804e-11,3.83421818249954e-11},{8.95094368142044e-12,-3.26220304555971e-12,-1.28047847191896e-12,2.67562170258942e-12,2.72195031576670e-12},{-6.47181697409757e-12,1.13776457455685e-12,2.84856274334969e-13,-7.63667272085395e-14,-1.34451657758826e-13},{-1.25291265888343e-12,8.63500441050317e-14,-1.21307856635548e-13,5.12570529540511e-14,3.32389276976573e-14},{3.73573418085813e-14,-5.37808783042784e-16,-4.23430408270850e-16,-4.75110565740493e-15,6.02553212780166e-15},{8.95483987262751e-06,-3.90778212666235e-06,-1.12115019808259e-06,1.78678942093383e-06,1.46806344157962e-06},{-4.59185232678613e-07,1.09497995905419e-07,1.31663977640045e-07,4.20525791073626e-08,-9.71470741607431e-08},{1.63399802579572e-07,1.50909360648645e-08,-1.11480472593347e-08,-1.84000857674573e-08,7.82124614794256e-09},{1.22887452385094e-08,-4.06647399822746e-10,-6.49120327585597e-10,8.63651225791194e-10,-2.73440085913102e-09},{2.51748630889583e-09,4.79895880425564e-10,-2.44908073860844e-10,2.56735882664876e-10,-1.64815306286912e-10},{4.85671381736718e-11,-2.51742732115131e-11,-2.60819437993179e-11,6.12728324086123e-12,2.16833310896138e-11},{4.11389702320298e-12,-8.09433180989935e-13,-1.19812498226024e-12,1.46885737888520e-12,3.15807685137836e-12},{-1.47614580597013e-12,4.66726413909320e-13,1.72089709006255e-13,1.13854935381418e-13,2.77741161317003e-13},{-1.02257724967727e-13,1.10394382923502e-13,-3.14153505370805e-15,2.41103099110106e-14,2.13853053149771e-14},{-3.19080885842786e-14,-9.53904307973447e-15,2.74542788156379e-15,2.33797859107844e-15,-2.53192474907304e-15},{-5.87702222126367e-15,-1.80133850930249e-15,-3.09793125614454e-16,-1.04197538975295e-16,3.72781664701327e-16},{1.86187054729085e-06,8.33098045333428e-06,3.18277735484232e-06,-7.68273797022231e-07,-1.52337222261696e-06},{-5.07076646593648e-07,-8.61959553442156e-07,-3.51690005432816e-07,-4.20797082902431e-07,-3.07652993252673e-07},{-7.38992472164147e-08,-8.39473083080280e-08,-2.51587083298935e-08,7.30691259725451e-09,-3.19457155958983e-08},{-1.99777182012924e-09,-3.21265085916022e-09,-4.84477421865675e-10,-1.82924814205799e-09,-3.46664344655997e-10},{-7.05788559634927e-11,1.21840735569025e-10,7.97347726425926e-11,1.08275679614409e-10,-1.17891254809785e-10},{1.10299718947774e-11,-3.22958261390263e-11,-1.43535798209229e-11,6.87096504209595e-12,-6.64963212272352e-12},{-6.47393639740084e-12,1.03156978325120e-12,-9.20099775082358e-14,-2.40150316641949e-13,1.14008812047857e-12},{-1.23957846397250e-13,2.85996703969692e-13,1.91579874982553e-13,5.20597174693064e-14,-4.06741434883370e-14},{-2.35479068911236e-14,1.97847338186993e-14,1.58935977518516e-15,-2.32217195254742e-15,-8.48611789490575e-15},{1.03992320391626e-14,1.54017082092642e-15,1.05950035082788e-16,-1.17870898461353e-15,-1.10937420707372e-15},{-1.09011948374520e-15,-6.04168007633584e-16,-9.10901998157436e-17,1.98379116989461e-16,-1.03715496658498e-16},{-1.38171942108278e-16,-6.33037999097522e-17,-1.38777695011470e-17,1.94191397045401e-17,5.70055906754485e-18},{1.92989406002085e-06,-3.82662130483128e-06,-4.60189561036048e-07,2.24290587856309e-06,1.40544379451550e-06},{6.49033717633394e-08,2.41396114435326e-07,2.73948898223321e-07,1.10633664439332e-07,-3.19555270171075e-08},{-2.91988966963297e-08,-6.03828192816571e-09,1.18462386444840e-08,1.32095545004128e-08,-5.06572721528914e-09},{7.31079058474148e-09,-8.42775299751834e-10,1.10190810090667e-09,1.96592273424306e-09,-2.13135932785688e-09},{7.06656405314388e-11,1.43441125783756e-10,1.46962246686924e-10,7.44592776425197e-11,-3.64331892799173e-11},{-2.52393942119372e-11,1.07520964869263e-11,5.84669886072094e-12,6.52029744217103e-12,1.82947123132059e-12},{-4.15669940115121e-12,-1.95963254053648e-13,2.16977822834301e-13,-2.84701408462031e-13,4.27194601040231e-13},{3.07891105454129e-13,1.91523190672955e-13,1.05367297580989e-13,-5.28136363920236e-14,-3.53364110005917e-14},{7.02156663274738e-15,9.52230536780849e-15,-3.41019408682733e-15,-3.59825303352899e-15,-2.62576411636150e-15},{-1.75110277413804e-15,5.29265220719483e-16,4.45015980897919e-16,-3.80179856341347e-16,-4.32917763829695e-16},{1.16038609651443e-16,-6.69643574373352e-17,2.65667154817303e-17,-9.76010333683956e-17,4.07312981076655e-17},{5.72659246346386e-18,1.30357528108671e-18,2.49193258417535e-18,1.76247014075584e-18,7.59614374197688e-19},{1.03352170833303e-17,-2.30633516638829e-18,2.84777940620193e-18,-7.72161347944693e-19,6.07028034506380e-19}};
	const double anm_ch[91][5] = {{0.0571481238161787,3.35402081801137e-05,3.15988141788728e-05,-1.34477341887086e-05,-2.61831023577773e-07},{5.77367395845715e-05,-0.000669057185209558,-6.51057691648904e-05,-1.61830149147091e-06,8.96771209464758e-05},{-8.50773002452907e-05,-4.87106614880272e-05,4.03431160775277e-05,2.54090162741464e-06,-5.59109319864264e-06},{0.00150536423187709,0.000611682258892697,0.000369730024614855,-1.95658439780282e-05,-3.46246726553700e-05},{-2.32168718433966e-05,-0.000127478686553809,-9.00292451740728e-05,-6.07834315901830e-05,-1.04628419422714e-05},{-1.38607250922551e-06,-3.97271603842309e-06,-8.16155320152118e-07,5.73266706046665e-07,2.00366060212696e-07},{6.52491559188663e-05,-0.00112224323460183,-0.000344967958304075,-7.67282640947300e-05,0.000107907110551939},{-0.000138870461448036,-7.29995695401936e-05,5.35986591445824e-05,9.03804869703890e-06,8.61370129482732e-06},{-9.98524443968768e-07,-6.84966792665998e-08,1.47478021860771e-07,1.94857794008064e-06,7.17176852732910e-07},{1.27066367911720e-06,1.12113289164288e-06,2.71525688515375e-07,-2.76125723009239e-07,-1.05429690305013e-07},{-0.000377264999981652,0.000262691217024294,0.000183639785837590,3.93177048515576e-06,-6.66187081899168e-06},{-4.93720951871921e-05,-0.000102820030405771,-5.69904376301748e-05,-3.79603438055116e-05,-3.96726017834930e-06},{-2.21881958961135e-06,-1.40207117987894e-06,1.60956630798516e-07,2.06121145135022e-06,6.50944708093149e-07},{2.21876332411271e-07,1.92272880430386e-07,-6.44016558013941e-09,-1.40954921332410e-07,-4.26742169137667e-07},{-3.51738525149881e-08,2.89616194332516e-08,-3.40343352397886e-08,-2.89763392721812e-08,-6.40980581663785e-10},{3.51240856823468e-05,-0.000725895015345786,-0.000322514037108045,-0.000106143759981636,4.08153152459337e-05},{-2.36269716929413e-05,-4.20691836557932e-05,1.43926743222922e-05,2.61811210631784e-05,2.09610762194903e-05},{-7.91765756673890e-07,1.64556789159745e-06,-9.43930166276555e-07,6.46641738736139e-07,-5.91509547299176e-07},{3.92768838766879e-07,-1.98027731703690e-07,-5.41303590057253e-08,-4.21705797874207e-07,-6.06042329660681e-08},{-1.56650141024305e-08,7.61808165752027e-08,-1.81900460250934e-08,1.30196216971675e-08,1.08616031342379e-08},{-2.80964779829242e-08,-7.25951488826103e-09,-2.59789823306225e-09,-2.79271942407154e-09,4.10558774868586e-09},{-0.000638227857648286,-0.000154814045363391,7.78518327501759e-05,-2.95961469342381e-05,1.15965225055757e-06},{4.47833146915112e-06,1.33712284237555e-05,3.61048816552123e-06,-2.50717844073547e-06,-1.28100822021734e-05},{-2.26958070007455e-06,2.57779960912242e-06,1.08395653197976e-06,1.29403393862805e-07,-1.04854652812567e-06},{-3.98954043463392e-07,-2.26931182815454e-07,-1.09169545045028e-07,-1.49509536031939e-07,-3.98376793949903e-07},{2.30418911071110e-08,1.23098508481555e-08,-1.71161401463708e-08,2.35829696577657e-09,1.31136164162040e-08},{3.69423793101582e-09,3.49231027561927e-10,-1.18581468768647e-09,5.43180735828820e-10,5.43192337651588e-10},{-1.38608847117992e-09,-1.86719145546559e-10,-8.13477384765498e-10,2.01919878240491e-10,1.00067892622287e-10},{-4.35499078415956e-05,0.000450727967957804,0.000328978494268850,-3.05249478582848e-05,-3.21914834544310e-05},{1.24887940973241e-05,1.34275239548403e-05,1.11275518344713e-06,7.46733554562851e-06,-2.12458664760353e-06},{9.50250784948476e-07,2.34367372695203e-06,-5.43099244798980e-07,-4.35196904508734e-07,-8.31852234345897e-07},{5.91775478636535e-09,-1.48970922508592e-07,2.99840061173840e-08,-1.30595933407792e-07,1.27136765045597e-07},{-1.78491083554475e-08,1.76864919393085e-08,-1.96740493482011e-08,1.21096708004261e-08,2.95518703155064e-10},{1.75053510088658e-09,-1.31414287871615e-09,-1.44689439791928e-09,1.14682483668460e-09,1.74488616540169e-09},{1.08152964586251e-09,-3.85678162063266e-10,-2.77851016629979e-10,3.89890578625590e-11,-2.54627365853495e-10},{-1.88340955578221e-10,5.19645384002867e-11,2.14131326027631e-11,1.24027770392728e-11,-9.42818962431967e-12},{0.000359777729843898,-0.000111692619996219,-6.87103418744904e-05,0.000115128973879551,7.59796247722486e-05},{5.23717968000879e-05,1.32279078116467e-05,-5.72277317139479e-07,-7.56326558610214e-06,-1.95749622214651e-05},{1.00109213210139e-06,-2.75515216592735e-07,-1.13393194050846e-06,-4.75049734870663e-07,-3.21499480530932e-07},{-2.07013716598890e-07,-7.31392258077707e-08,-3.96445714084160e-08,3.21390452929387e-08,-1.43738764991525e-08},{2.03081434931767e-09,-1.35423687136122e-08,-4.47637454261816e-09,2.18409121726643e-09,-3.74845286805217e-09},{3.17469255318367e-09,2.44221027314129e-10,-2.46820614760019e-10,7.55851003884434e-10,6.98980592550891e-10},{9.89541493531067e-11,-2.78762878057315e-11,-2.10947962916771e-10,3.77882267360636e-11,-1.20009542671532e-12},{5.01720575730940e-11,1.66470417102135e-11,-7.50624817938091e-12,9.97880221482238e-12,4.87141864438892e-12},{2.53137945301589e-11,1.93030083090772e-12,-1.44708804231290e-12,-1.77837100743423e-12,-8.10068935490951e-13},{0.000115735341520738,0.000116910591048350,8.36315620479475e-05,1.61095702669207e-05,-7.53084853489862e-05},{-9.76879433427199e-06,9.16968438003335e-06,-8.72755127288830e-06,-1.30077933880053e-05,-9.78841937993320e-06},{1.04902782517565e-07,2.14036988364936e-07,-7.19358686652888e-07,1.12529592946332e-07,7.07316352860448e-07},{7.63177265285080e-08,1.22781974434290e-07,8.99971272969286e-08,5.63482239352990e-08,4.31054352285547e-08},{3.29855763107355e-09,-6.95004336734441e-09,-6.52491370576354e-09,1.97749180391742e-09,3.51941791940498e-09},{3.85373745846559e-10,1.65754130924183e-10,-3.31326088103057e-10,5.93256024580436e-10,1.27725220636915e-10},{-1.08840956376565e-10,-4.56042860268189e-11,-4.77254322645633e-12,-2.94405398621875e-12,-3.07199979999475e-11},{2.07389879095010e-11,1.51186798732451e-11,9.28139802941848e-12,5.92738269687687e-12,9.70337402306505e-13},{-2.85879708060306e-12,1.92164314717053e-13,4.02664678967890e-14,5.18246319204277e-13,-7.91438726419423e-13},{6.91890667590734e-13,-8.49442290988352e-14,-5.54404947212402e-15,9.71093377538790e-15,-5.33714333415971e-14},{-5.06132972789792e-05,-4.28348772058883e-05,-6.90746551020305e-05,8.48380415176836e-05,7.04135614675053e-05},{-1.27945598849788e-05,-1.92362865537803e-05,-2.30971771867138e-06,-8.98515975724166e-06,5.25675205004752e-06},{-8.71907027470177e-07,-1.02091512861164e-06,-1.69548051683864e-07,4.87239045855761e-07,9.13163249899837e-07},{-6.23651943425918e-08,6.98993315829649e-08,5.91597766733390e-08,4.36227124230661e-08,6.45321798431575e-08},{-1.46315079552637e-10,-7.85142670184337e-09,1.48788168857903e-09,2.16870499912160e-09,-1.16723047065545e-09},{3.31888494450352e-10,1.90931898336457e-10,-3.13671901557599e-11,2.60711798190524e-10,8.45240112207997e-11},{1.36645682588537e-11,-5.68830303783976e-12,1.57518923848140e-11,-1.61935794656758e-11,-4.16568077748351e-12},{9.44684950971905e-13,7.30313977131995e-12,3.14451447892684e-12,6.49029875639842e-13,-9.66911019905919e-13},{-8.13097374090024e-13,5.23351897822186e-13,8.94349188113951e-14,-1.33327759673270e-13,-4.04549450989029e-13},{-3.76176467005839e-14,-6.19953702289713e-14,-3.74537190139726e-14,1.71275486301958e-14,-3.81946773167132e-14},{-4.81393385544160e-14,3.66084990006325e-15,3.10432030972253e-15,-4.10964475657416e-15,-6.58644244242900e-15},{-7.81077363746945e-05,-0.000254773632197303,-0.000214538508009518,-3.80780934346726e-05,1.83495359193990e-05},{5.89140224113144e-06,-3.17312632433258e-06,-3.81872516710791e-06,-2.27592226861647e-06,1.57044619888023e-06},{-1.44272505088690e-06,-1.10236588903758e-07,2.64336813084693e-07,4.76074163332460e-07,4.28623587694570e-07},{3.98889120733904e-08,-1.29638005554027e-08,-4.13668481273828e-08,1.27686793719542e-09,-3.54202962042383e-08},{1.60726837551750e-09,-2.70750776726156e-09,2.79387092681070e-09,-3.01419734793998e-10,-1.29101669438296e-10},{-2.55708290234943e-10,2.27878015173471e-11,-6.43063443462716e-12,1.26531554846856e-10,-1.65822147437220e-10},{-3.35886470557484e-11,-3.51895009091595e-12,5.80698399963198e-12,-2.84881487149207e-12,8.91708061745902e-12},{-3.12788523950588e-12,3.35366912964637e-12,2.52236848033838e-12,-8.12801050709184e-13,-2.63510394773892e-13},{6.83791881183142e-14,2.41583263270381e-13,8.58807794189356e-14,-5.12528492761045e-14,-1.40961725631276e-13},{-1.28585349115321e-14,-2.11049721804969e-14,5.26409596614749e-15,-4.31736582588616e-15,-1.60991602619068e-14},{-9.35623261461309e-15,-3.94384886372442e-16,5.04633016896942e-16,-5.40268998456055e-16,-1.07857944298104e-15},{8.79756791888023e-16,4.52529935675330e-16,1.36886341163227e-16,-1.12984402980452e-16,6.30354561057224e-18},{0.000117829256884757,2.67013591698442e-05,2.57913446775250e-05,-4.40766244878807e-05,-1.60651761172523e-06},{-1.87058092029105e-05,1.34371169060024e-05,5.59131416451555e-06,4.50960364635647e-06,2.87612873904633e-06},{2.79835536517287e-07,8.93092708148293e-07,8.37294601021795e-07,-1.99029785860896e-08,-8.87240405168977e-08},{4.95854313394905e-08,-1.44694570735912e-08,2.51662229339375e-08,-3.87086600452258e-09,2.29741919071270e-08},{4.71497840986162e-09,2.47509999454076e-09,1.67323845102824e-09,8.14196768283530e-10,-3.71467396944165e-10},{-1.07340743907054e-10,-8.07691657949326e-11,-5.99381660248133e-11,2.33173929639378e-12,-2.26994195544563e-11},{-3.83130441984224e-11,-5.82499946138714e-12,1.43286311435124e-11,3.15150503353387e-12,5.97891025146774e-12},{-5.64389191072230e-13,9.57258316335954e-13,1.12055192185939e-12,-4.42417706775420e-13,-9.93190361616481e-13},{1.78188860269677e-13,7.82582024904950e-14,5.18061650118009e-14,2.13456507353387e-14,-5.26202113779510e-14},{-8.18481324740893e-15,-3.71256746886786e-15,4.23508855164371e-16,-2.91292502923102e-15,-1.15454205389350e-14},{6.16578691696810e-15,6.74087154080877e-16,5.71628946437034e-16,-2.05251213979975e-16,-7.25999138903781e-16},{9.35481959699383e-17,6.23535830498083e-17,3.18076728802060e-18,-2.92353209354587e-17,7.65216088665263e-19},{2.34173078531701e-17,-8.30342420281772e-18,-4.33602329912952e-18,1.90226281379981e-18,-7.85507922718903e-19}};
	const double anm_cw[91][5] = {{0.0395329695826997,-0.000131114380761895,-0.000116331009006233,6.23548420410646e-05,5.72641113425116e-05},{-0.000441837640880650,0.000701288648654908,0.000338489802858270,3.76700309908602e-05,-8.70889013574699e-06},{1.30418530496887e-05,-0.000185046547597376,4.31032103066723e-05,0.000105583334124319,3.23045436993589e-05},{3.68918433448519e-05,-0.000219433014681503,3.46768613485000e-06,-9.17185187163528e-05,-3.69243242456081e-05},{-6.50227201116778e-06,2.07614874282187e-05,-5.09131314798362e-05,-3.08053225174359e-05,-4.18483655873918e-05},{2.67879176459056e-05,-6.89303730743691e-05,2.11046783217168e-06,1.93163912538178e-05,-1.97877143887704e-06},{0.000393937595007422,-0.000452948381236406,-0.000136517846073846,0.000138239247989489,0.000133175232977863},{5.00214539435002e-05,3.57229726719727e-05,-9.38010547535432e-07,-3.52586798317563e-05,-7.01218677681254e-06},{3.91965314099929e-05,1.02236686806489e-05,-1.95710695226022e-05,-5.93904795230695e-06,3.24339769876093e-06},{6.68158778290653e-06,-8.10468752307024e-06,-9.91192994096109e-06,-1.89755520007723e-07,-3.26799467595579e-06},{0.000314196817753895,-0.000296548447162009,-0.000218410153263575,-1.57318389871000e-05,4.69789570185785e-05},{0.000104597721123977,-3.31000119089319e-05,5.60326793626348e-05,4.71895007710715e-05,3.57432326236664e-05},{8.95483021572039e-06,1.44019305383365e-05,4.87912790492931e-06,-3.45826387853503e-06,3.23960320438157e-06},{-1.35249651009930e-05,-2.49349762695977e-06,-2.51509483521132e-06,-9.14254874104858e-07,-8.57897406100890e-07},{-1.68143325235195e-06,1.72073417594235e-06,1.38765993969565e-06,4.09770982137530e-07,-6.60908742097123e-07},{-0.000639889366487161,0.00120194042474696,0.000753258598887703,3.87356377414663e-05,1.31231811175345e-05},{2.77062763606783e-05,-9.51425270178477e-06,-6.61068056107547e-06,-1.38713669012109e-05,9.84662092961671e-06},{-2.69398078539471e-06,6.50860676783123e-06,3.80855926988090e-06,-1.98076068364785e-06,1.17187335666772e-06},{-2.63719028151905e-06,5.03149473656743e-07,7.38964893399716e-07,-8.38892485369078e-07,1.30943917775613e-06},{-1.56634992245479e-06,-2.97026487417045e-08,5.06602801102463e-08,-4.60436007958792e-08,-1.62536449440997e-07},{-2.37493912770935e-07,1.69781593069938e-08,8.35178275224265e-08,-4.83564044549811e-08,-4.96448864199318e-08},{0.00134012259587597,-0.000250989369253194,-2.97647945512547e-05,-6.47889968094926e-05,8.41302130716859e-05},{-0.000113287184900929,4.78918993866293e-05,-3.14572113583139e-05,-2.10518256626847e-05,-2.03933633847417e-05},{-4.97413321312139e-07,3.72599822034753e-06,-3.53221588399266e-06,-1.05232048036416e-06,-2.74821498198519e-06},{4.81988542428155e-06,4.21400219782474e-07,1.02814808667637e-06,4.40299068486188e-09,3.37103399036634e-09},{1.10140301678818e-08,1.90257670180182e-07,-1.00831353341885e-08,1.44860642389714e-08,-5.29882089987747e-08},{6.12420414245775e-08,-4.48953461152996e-09,-1.38837603709003e-08,-2.05533675904779e-08,1.49517908802329e-09},{9.17090243673643e-10,-9.24878857867367e-09,-2.30856560363943e-09,-4.36348789716735e-09,-4.45808881183025e-10},{-0.000424912699609112,-0.000114365438471564,-0.000403200981827193,4.19949560550194e-05,-3.02068483713739e-05},{3.85435472851225e-05,-5.70726887668306e-05,4.96313706308613e-07,1.02395703617082e-05,5.85550000567006e-06},{-7.38204470183331e-06,-4.56638770109511e-06,-3.94007992121367e-06,-2.16666812189101e-06,-4.55694264113194e-06},{5.89841165408527e-07,1.40862905173449e-08,1.08149086563211e-07,-2.18592601537944e-07,-3.78927431428119e-07},{4.85164687450468e-08,8.34273921293655e-08,1.47489605513673e-08,6.01494125001291e-08,6.43812884159484e-09},{1.13055580655363e-08,3.50568765400469e-09,-5.09396162501750e-09,-1.83362063152411e-09,-4.11227251553035e-09},{3.16454132867156e-09,-1.39634794131087e-09,-7.34085003895929e-10,-7.55541371271796e-10,-1.57568747643705e-10},{1.27572900992112e-09,-3.51625955080441e-10,-4.84132020565098e-10,1.52427274930711e-10,1.27466120431317e-10},{-0.000481655666236529,-0.000245423313903835,-0.000239499902816719,-0.000157132947351028,5.54583099258017e-05},{-1.52987254785589e-05,2.78383892116245e-05,4.32299123991860e-05,1.70981319744327e-05,-1.35090841769225e-06},{-8.65400907717798e-06,-6.51882656990376e-06,-2.43810171017369e-07,8.54348785752623e-07,2.98371863248143e-07},{-1.68155571776752e-06,-3.53602587563318e-07,-1.00404435881759e-07,-2.14162249012859e-08,-2.42131535531526e-07},{-1.08048603277187e-08,-9.78850785763030e-08,-2.32906554437417e-08,2.22003630858805e-08,-2.27230368089683e-09},{-5.98864391551041e-09,7.38970926486848e-09,3.61322835311957e-09,3.70037329172919e-09,-3.41121137081362e-09},{-7.33113754909726e-10,-9.08374249335220e-11,-1.78204392133739e-10,8.28618491929026e-11,-1.32966817912373e-10},{-5.23340481314676e-10,1.36403528233346e-10,-7.04478837151279e-11,-6.83175201536443e-12,-2.86040864071134e-12},{3.75347503578356e-11,-1.08518134138781e-11,-2.53583751744508e-12,1.00168232812303e-11,1.74929602713312e-11},{-0.000686805336370570,0.000591849814585706,0.000475117378328026,-2.59339398048415e-05,3.74825110514968e-05},{3.35231363034093e-05,2.38331521146909e-05,7.43545963794093e-06,-3.41430817541849e-06,7.20180957675353e-06},{3.60564374432978e-07,-3.13300039589662e-06,-6.38974746108020e-07,-8.63985524672024e-07,2.43367665208655e-06},{-4.09605238516094e-07,-2.51158699554904e-07,-1.29359217235188e-07,-2.27744642483133e-07,7.04065989970205e-08},{6.74886341820129e-08,-1.02009407061935e-08,-3.30790296448812e-08,1.64959795655031e-08,1.40641779998855e-08},{1.31706886235108e-09,-1.06243701278671e-09,-2.85573799673944e-09,3.72566568681289e-09,2.48402582003925e-09},{-3.68427463251097e-11,-1.90028122983781e-10,-3.98586561768697e-11,1.14458831693287e-11,-2.27722300377854e-12},{-7.90029729611056e-11,3.81213646526419e-11,4.63303426711788e-11,1.52294835905903e-11,-2.99094751490726e-12},{-2.36146602045017e-11,1.03852674709985e-11,-4.47242126307100e-12,5.30884113537806e-12,1.68499023262969e-12},{-3.30107358134527e-13,-4.73989085379655e-13,5.17199549822684e-13,2.34951744478255e-13,2.05931351608192e-13},{0.000430215687511780,-0.000132831373000014,-3.41830835017045e-05,4.70312161436033e-06,-3.84807179340006e-05},{1.66861163032403e-05,-8.10092908523550e-06,8.20658107437905e-06,6.12399025026683e-06,-1.85536495631911e-06},{1.53552093641337e-06,2.19486495660361e-06,-1.07253805120137e-06,-4.72141767909137e-07,4.00744581573216e-07},{2.56647305130757e-07,-8.07492046592274e-08,-2.05858469296168e-07,1.09784168930599e-07,-7.76823030181225e-08},{1.77744008115031e-08,1.64134677817420e-08,4.86163044879020e-09,1.13334251800856e-08,-7.17260621115426e-09},{1.61133063219326e-09,-1.85414677057024e-09,-2.13798537812651e-09,1.15255123229679e-09,2.24504700129464e-09},{1.23344223096739e-10,-1.20385012169848e-10,-2.18038256346433e-12,3.23033120628279e-11,8.01179568213400e-11},{-6.55745274387847e-12,1.22127104697198e-11,5.83805016355883e-12,-8.31201582509817e-12,1.90985373872656e-12},{-2.89199983667265e-12,5.05962500506667e-12,1.28092925110279e-12,5.60353813743813e-13,1.76753731968770e-12},{-1.61678729774956e-13,-3.92206170988615e-13,-9.04941327579237e-14,1.89847694200763e-13,4.10008676756463e-14},{-1.16808369005656e-13,-9.97464591430510e-14,7.46366550245722e-15,2.53398578153179e-14,1.06510689748906e-14},{-0.000113716921384790,-0.000131902722651488,-0.000162844886485788,7.90171538739454e-06,-0.000178768066961413},{-2.13146535366500e-06,-3.57818705543597e-05,-1.50825855069298e-05,-2.17909259570022e-05,-8.19332236308581e-06},{-2.88001138617357e-06,-2.09957465440793e-06,6.81466526687552e-08,3.58308906974448e-07,-4.18502067223724e-07},{-1.10761444317605e-07,6.91773860777929e-08,8.17125372450372e-08,-2.16476237959181e-08,7.59221970502074e-08},{-9.56994224818941e-09,6.64104921728432e-09,6.33077902928348e-09,2.85721181743727e-09,-6.39666681678123e-09},{4.62558627839842e-10,-1.69014863754621e-09,-2.80260429599733e-10,4.27558937623863e-11,-1.66926133269027e-10},{-7.23385132663753e-11,5.51961193545280e-11,3.04070791942335e-11,3.23227055919062e-12,8.47312431934829e-11},{-1.61189613765486e-11,1.66868155925172e-11,1.05370341694715e-11,-4.41495859079592e-12,-2.24939051401750e-12},{-8.72229568056267e-13,1.88613726203286e-12,1.21711137534390e-14,-1.13342372297867e-12,-6.87151975256052e-13},{7.99311988544090e-15,4.46150979586709e-14,7.50406779454998e-14,-3.20385428942275e-14,-1.26543636054393e-14},{4.80503817699514e-14,-3.35545623603729e-14,-1.18546423610485e-14,4.19419209985980e-15,-1.73525614436880e-14},{-1.20464898830163e-15,-8.80752065000456e-16,-1.22214298993313e-15,1.69928513019657e-15,1.93593051311405e-16},{1.68528879784841e-05,3.57144412031081e-05,-1.65999910125077e-05,5.40370336805755e-05,0.000118138122851376},{-3.28151779115881e-05,1.04231790790798e-05,-2.80761862890640e-06,2.98996152515593e-06,-2.67641158709985e-06},{-2.08664816151978e-06,-1.64463884697475e-06,6.79099429284834e-08,7.23955842946495e-07,-6.86378427465657e-07},{-2.88205823027255e-09,2.38319699493291e-09,1.14169347509045e-07,8.12981074994402e-08,-1.56957943666988e-07},{-7.09711403570189e-09,6.29470515502988e-09,3.50833306577579e-09,8.31289199649054e-09,-2.14221463168338e-09},{-8.11910123910038e-10,3.34047829618955e-10,3.70619377446490e-10,3.30426088213373e-10,4.86297305597865e-11},{1.98628160424161e-11,-4.98557831380098e-12,-5.90523187802174e-12,-1.27027116925122e-12,1.49982368570355e-11},{2.62289263262748e-12,3.91242360693861e-12,6.56035499387192e-12,-1.17412941089401e-12,-9.40878197853394e-13},{-3.37805010124487e-13,5.39454874299593e-13,-2.41569839991525e-13,-2.41572016820792e-13,-3.01983673057198e-13},{-1.85034053857964e-13,4.31132161871815e-14,4.13497222026824e-15,-4.60075514595980e-14,-1.92454846400146e-14},{2.96113888929854e-15,-1.11688534391626e-14,3.76275373238932e-15,-3.72593295948136e-15,1.98205490249604e-16},{1.40074667864629e-15,-5.15564234798333e-16,3.56287382196512e-16,5.07242777691587e-16,-2.30405782826134e-17},{2.96822530176851e-16,-4.77029898301223e-17,1.12782285532775e-16,1.58443229778573e-18,8.22141904662969e-17}};
	const double bnm_bh[91][5] = {{0,0,0,0,0},{0,0,0,0,0},{-2.29210587053658e-06,-2.33805004374529e-06,-7.49312880102168e-07,-5.12022747852006e-07,5.88926055066172e-07},{0,0,0,0,0},{-4.63382754843690e-06,-2.23853015662938e-06,8.14830531656518e-07,1.15453269407116e-06,-4.53555450927571e-07},{-6.92432096320778e-07,-2.98734455136141e-07,1.48085153955641e-08,1.37881746148773e-07,-6.92492118460215e-09},{0,0,0,0,0},{-1.91507979850310e-06,-1.83614825459598e-06,-7.46807436870647e-07,-1.28329122348007e-06,5.04937180063059e-07},{-8.07527103916713e-07,2.83997840574570e-08,-6.01890498063025e-08,-2.48339507554546e-08,2.46284627824308e-08},{-2.82995069303093e-07,1.38818274596408e-09,3.22731214161408e-09,2.87731153972404e-10,1.53895537278496e-08},{0,0,0,0,0},{-6.68210270956800e-07,-2.19104833297845e-06,1.30116691657253e-07,4.78445730433450e-07,-4.40344300914051e-07},{-2.36946755740436e-07,-1.32730991878204e-07,1.83669593693860e-08,7.90218931983569e-08,-4.70161979232584e-08},{1.07746083292179e-07,-4.17088637760330e-09,-1.83296035841109e-09,-5.80243971371211e-09,-2.11682361167439e-09},{-5.44712355496109e-08,1.89717032256923e-09,2.27327316287804e-10,7.78400728280038e-10,8.82380487618991e-12},{0,0,0,0,0},{-5.61707049615673e-08,-1.09066447089585e-06,-2.25742250174119e-07,-8.64367795924377e-07,1.06411275240680e-08},{2.41782935157918e-08,-3.65762298303819e-08,-6.93420659586875e-08,-3.97316214341991e-08,-2.08767816486390e-08},{6.38293030383436e-08,1.11377936334470e-08,6.91424941454782e-09,1.39887159955004e-09,5.25428749022906e-09},{1.09291268489958e-08,1.23935926756516e-10,3.92917259954515e-10,-1.79144682483562e-10,-9.11802874917597e-10},{-4.40957607823325e-09,1.45751390560667e-10,1.24641258165301e-10,-6.45810339804674e-11,-8.92894658893326e-12},{0,0,0,0,0},{1.54754294162102e-08,-1.60154742388847e-06,-4.08425188394881e-07,6.18170290113531e-09,-2.58919765162122e-07},{1.37130642286873e-08,-6.67813955828458e-08,-7.01410996605609e-09,3.82732572660461e-08,-2.73381870915135e-08},{2.19113155379218e-08,4.11027496396868e-09,6.33816020485226e-09,-1.49242411327524e-09,-6.14224941851705e-10},{6.26573021218961e-09,5.17137416480052e-10,-3.49784328298676e-10,1.13578756343208e-10,2.80414613398411e-10},{1.65048133258794e-11,1.00047239417239e-10,1.05124654878499e-10,-3.03826002621926e-11,4.57155388334682e-11},{6.20221691418381e-11,9.75852610098156e-12,-5.46716005756984e-12,1.31643349569537e-11,3.61618775715470e-12},{0,0,0,0,0},{-1.03938913012708e-06,-1.78417431315664e-07,2.86040141364439e-07,1.83508599345952e-08,-1.34452220464346e-07},{-4.36557481393662e-08,7.49780206868834e-09,-8.62829428674082e-09,5.50577793039009e-09,-9.46897502333254e-09},{3.43193738406672e-10,1.13545447306468e-08,1.25242388852214e-09,6.03221501959620e-10,1.57172070361180e-09},{-4.73307591021391e-10,1.70855824051391e-10,-2.62470421477037e-11,2.04525835988874e-10,-1.17859695928164e-10},{-3.36185995299839e-10,3.19243054562183e-11,1.17589412418126e-10,-1.35478747434514e-12,5.11192214558542e-11},{3.19640547592136e-11,2.94297823804643e-12,-1.00651526276990e-11,-1.67028733953153e-12,3.03938833625503e-12},{1.68928641118173e-11,-7.90032886682002e-13,-1.40899773539137e-12,7.76937592393354e-13,7.32539820298651e-13},{0,0,0,0,0},{2.32949756055277e-07,1.46237594908093e-07,-1.07770884952484e-07,1.26824870644476e-07,-2.36345735961108e-08},{8.89572676497766e-08,7.24810004121931e-08,2.67583556180119e-08,2.48434796111361e-08,-3.55004782858686e-09},{-1.00823909773603e-08,8.84433929029076e-10,-2.55502517594511e-10,-5.48034274059119e-10,-8.50241938494079e-10},{1.13259819566467e-09,5.55186945221216e-10,7.63679807785295e-11,-1.70067998092043e-11,1.57081965572493e-10},{-2.37748192185353e-10,2.45463764948000e-11,3.23208414802860e-11,-2.72624834520723e-12,8.14449183666500e-12},{-1.54977633126025e-11,4.58754903157884e-12,-1.25864665839074e-12,2.44139868157872e-12,-1.82827441958193e-12},{3.28285563794513e-12,-1.10072329225465e-12,-7.23470501810935e-13,5.85309745620389e-13,4.11317589687125e-13},{4.57596974384170e-13,9.84198128213558e-14,3.34503817702830e-14,7.08431086558307e-15,2.79891177268807e-14},{0,0,0,0,0},{-3.67820719155580e-07,6.98497901205902e-07,1.83397388750300e-07,2.39730262495372e-07,-2.58441984368194e-07},{5.17793954077994e-08,5.54614175977835e-08,1.75026214305232e-09,-2.55518450411346e-09,-6.12272723006537e-09},{-7.94292648157198e-09,-1.01709107852895e-09,-1.49251241812310e-09,9.32827213605682e-10,-8.24490722043118e-10},{1.36410408475679e-11,2.16390220454971e-10,1.24934806872235e-10,-6.82507825145903e-11,-4.01575177719668e-11},{-1.41619917600555e-11,-1.54733230409082e-11,1.36792829351538e-11,1.11157862104733e-12,2.08548465892268e-11},{-3.56521723755846e-12,4.47877185884557e-12,-6.34096209274637e-16,-1.13010624512348e-12,-2.82018136861041e-13},{2.22758955943441e-12,-4.63876465559380e-13,-5.80688019272507e-13,2.45878690598655e-13,1.49997666808106e-13},{-6.26833903786958e-14,2.73416335780807e-14,1.91842340758425e-14,1.67405061129010e-14,-2.45268543953704e-17},{1.81972870222228e-14,5.43036245069085e-15,1.92476637107321e-15,8.78498602508626e-17,-1.42581647227657e-15},{0,0,0,0,0},{9.74322164613392e-07,-5.23101820582724e-07,-2.81997898176227e-07,4.54762451707384e-08,-3.34645078118827e-08},{-6.75813194549663e-09,3.49744702199583e-08,-5.09170419895883e-09,5.24359476874755e-09,4.96664262534662e-09},{4.53858847892396e-10,-1.49347392165963e-09,-2.00939511362154e-09,9.30987163387955e-10,9.74450200826854e-11},{-4.92900885858693e-10,5.34223033225688e-12,1.08501839729368e-10,-6.43526142089173e-11,-3.11063319142619e-11},{1.38469246386690e-11,-7.91180584906922e-12,2.26641656746936e-13,4.55251515177956e-12,6.05270575117769e-12},{4.02247935664225e-12,1.82776657951829e-12,-1.28348801405445e-13,-2.16257301300350e-13,-5.54363979435025e-14},{4.15005914461687e-13,-2.00647573581168e-13,-1.67278251942946e-13,1.30332398257985e-13,1.52742363652434e-13},{6.36376500056974e-14,1.65794532815776e-14,-3.80832559052662e-15,-6.40262894005341e-16,2.42577181848072e-15},{-5.55273521249151e-15,3.69725182221479e-15,2.02114207545759e-15,-4.50870833392161e-16,9.62950493696677e-17},{1.00935904205024e-17,6.54751873609395e-17,-1.09138810997186e-16,-8.62396750098759e-17,-3.82788257844306e-17},{0,0,0,0,0},{4.21958510903678e-07,-8.30678271007705e-08,-3.47006439555247e-07,-3.36442823712421e-08,9.90739768222027e-08},{2.64389033612742e-08,2.65825090066479e-09,-1.28895513428522e-08,-7.07182694980098e-10,7.10907165301180e-09},{6.31203524153492e-09,-1.67038260990134e-09,1.33104703539822e-09,8.34376495185149e-10,-2.52478613522612e-10},{1.18414896299279e-10,-2.57745052288455e-11,2.88295935685818e-11,-3.27782977418354e-11,-1.05705000036156e-11},{-4.20826459055091e-12,-6.97430607432268e-12,-3.90660545970607e-12,-3.90449239948755e-13,-4.60384797517466e-13},{-9.47668356558200e-13,6.53305025354881e-13,2.63240185434960e-13,1.40129115015734e-13,3.85788887132074e-14},{2.23947810407291e-13,7.35262771548253e-15,-3.83348211931292e-14,4.20376514344176e-14,4.26445836468461e-14},{-3.88008154470596e-16,2.28561424667750e-15,-8.73599966653373e-16,2.14321147947665e-15,6.38631825071920e-16},{-8.62165565535721e-15,1.79742912149810e-15,1.01541125038661e-15,-7.91027655831866e-17,-4.06505132825230e-16},{-2.35355054392189e-16,-6.13997759731013e-17,-2.73490528665965e-17,2.63895177155121e-17,-4.47531057245187e-18},{6.01909706823530e-17,5.35520010856833e-18,-2.15530106132531e-18,-2.46778496746231e-18,-7.09947296442799e-19},{0,0,0,0,0},{-3.75005956318736e-07,-5.39872297906819e-07,-1.19929654883034e-07,4.52771083775007e-08,1.82790552943564e-07},{7.82606642505646e-09,-1.68890832383153e-08,-8.45995188378997e-09,1.42958730598502e-09,3.21075754133531e-09},{4.28818421913782e-09,-1.07501469928219e-09,8.84086350297418e-10,9.74171228764155e-10,8.59877149602304e-12},{1.28983712172521e-10,-6.96375160373676e-11,-2.13481436408896e-11,1.33516375568179e-11,-1.65864626508258e-11},{-4.48914384622368e-12,9.68953616831263e-13,-1.61372463422897e-12,-2.09683563440448e-12,-1.90096826314068e-12},{-1.12626619779175e-13,3.34903159106509e-14,-1.21721528343657e-13,7.46246339290354e-14,3.68424909859186e-13},{5.08294274367790e-14,2.83036159977090e-14,1.48074873486387e-14,-9.59633528834945e-15,-1.26231060951100e-14},{-4.01464098583541e-16,1.97047929526674e-15,-5.29967950447497e-16,-3.59120406619931e-16,1.69690933982683e-16},{-1.73919209873841e-15,7.52792462841274e-16,3.65589287101147e-16,-7.79247612043812e-17,-8.24599670368999e-17},{-4.61555616150128e-17,4.94529746019753e-19,-1.09858157212270e-17,3.95550811124928e-18,3.23972399884100e-18},{-2.27040686655766e-17,-3.27855689001215e-18,-3.30649011116861e-19,9.08748546536849e-19,8.92197599890994e-19},{5.67241944733762e-18,3.84449400209976e-19,1.77668058015537e-19,2.00432838283455e-20,-2.00801461564767e-19}};
	const double bnm_bw[91][5] = {{0,0,0,0,0},{0,0,0,0,0},{-9.56715196386889e-06,-3.68040633020420e-08,1.27846786489883e-07,1.32525487755973e-06,1.53075361125066e-06},{0,0,0,0,0},{-7.17682617983607e-06,2.89994188119445e-06,-2.97763578173405e-07,8.95742089134942e-07,3.44416325304006e-07},{-8.02661132285210e-07,3.66738692077244e-07,-3.02880965723280e-07,3.54144282036103e-07,-1.68873066391463e-07},{0,0,0,0,0},{-2.89640569283461e-06,-7.83566373343614e-07,-8.36667214682577e-07,-7.41891843549121e-07,-9.23922655636489e-08},{-1.06144662284862e-06,1.57709930505924e-07,1.04203025714319e-07,1.20783300488461e-07,-1.38726055821134e-07},{-4.16549018672265e-07,-1.35220897698872e-07,-6.40269964829901e-08,1.63258283210837e-08,-2.57958025095959e-08},{0,0,0,0,0},{3.52324885892419e-06,-2.26705543513814e-07,1.53835589488292e-06,-3.75263061267433e-07,3.69384057396017e-07},{-2.06569149157664e-07,-9.36260183227175e-08,-3.55985284353048e-08,-9.13671163891094e-08,6.93156256562600e-09},{1.32437594740782e-07,4.44349887272663e-08,-3.38192451721674e-08,-3.97263855781102e-08,-1.93087822995800e-09},{-1.29595244818942e-07,-1.40852985547683e-08,1.42587592939760e-09,7.05779876554001e-09,-1.00996269264535e-08},{0,0,0,0,0},{4.06960756215938e-06,-1.97898540226986e-06,7.21905857553588e-08,-1.19908881538755e-06,-5.67561861536903e-08},{6.53369660286999e-08,-2.42818687866392e-07,-1.66203004559493e-08,-2.41512414151897e-08,4.45426333411018e-08},{1.44650670663281e-07,8.50666367433859e-09,-4.61165612004307e-09,4.88527987491045e-09,1.06277326713172e-08},{1.86770937103513e-08,-6.44197940288930e-10,-7.60456736846174e-09,-9.97186468682689e-10,8.73229752697716e-10},{-1.00206566229113e-08,1.33934372663121e-09,1.41691503439220e-09,8.72352590578753e-10,-8.04561626629829e-10},{0,0,0,0,0},{3.07161843116618e-06,1.82962085656470e-06,1.87728623016069e-07,7.10611617623261e-07,2.26499092250481e-07},{4.50766403064905e-08,-1.67752393078256e-07,2.47844723639070e-08,-3.56484348424869e-09,-1.56634836636584e-08},{3.77011651881090e-08,-7.23045828480496e-09,5.22995988863761e-09,-1.03740320341306e-09,4.57839777217789e-09},{8.09495635883121e-09,-3.01977244420529e-10,-2.30104544933093e-09,3.63658580939428e-10,4.39320811714867e-10},{9.37087629961269e-11,1.00780920426635e-09,1.28140539913350e-10,-6.65795285522138e-12,4.71732796198631e-11},{-8.88504487069155e-11,-1.63253810435461e-10,7.22669710644299e-11,5.64715132584527e-11,-1.08949308197617e-12},{0,0,0,0,0},{-2.64054293284174e-07,-2.37611606117256e-06,-1.83671059706264e-06,-3.12199354841993e-07,-1.05598289276114e-07},{7.41706968747147e-08,-1.64359098062646e-08,-3.09750224040234e-08,-9.68640079410317e-09,-7.90399057863403e-08},{-1.00254376564271e-08,1.12528248631191e-08,-2.67841549174100e-09,-2.69481819323647e-09,1.56550607475331e-09},{-2.18568129350729e-09,6.26422056977450e-10,1.95007291427316e-09,3.14226463591125e-10,-3.62000388344482e-10},{-9.30451291747549e-10,5.62175549482704e-11,1.01022849902012e-10,5.18675856498499e-11,5.37561696283235e-11},{5.33151334468794e-11,1.07571307336725e-10,-1.31714567944652e-11,-4.17524405900018e-11,-2.16737797893502e-12},{4.69916869001309e-11,-4.34516364859583e-12,-6.61054225868897e-12,-5.75845818545368e-12,-2.32180293529175e-12},{0,0,0,0,0},{-3.50305843086926e-06,1.76085131953403e-06,8.16661224478572e-07,4.09111042640801e-07,-9.85414469804995e-08},{1.44670876127274e-07,-1.41331228923029e-08,-3.06530152369269e-08,-1.46732098927996e-08,-2.30660839364244e-08},{-2.00043052422933e-08,1.72145861031776e-09,2.13714615094209e-09,1.02982676689194e-09,-1.64945224692217e-10},{1.23552540016991e-09,1.42028470911613e-09,8.79622616627508e-10,-7.44465600265154e-10,-7.17124672589442e-11},{-6.67749524914644e-10,-5.77722874934050e-11,3.40077806879472e-11,4.26176076541840e-11,8.23189659748212e-11},{-4.62771648935992e-11,-7.24005305716782e-13,1.18233730497485e-12,5.18156973532267e-12,-1.53329687155297e-12},{4.75581699468619e-12,-3.79782291469732e-12,1.33077109836853e-12,-1.02426020107120e-12,3.10385019249130e-13},{1.66486090578792e-12,1.08573672403649e-12,1.26268044166279e-13,-1.23509297742757e-13,-1.81842007284038e-13},{0,0,0,0,0},{9.93870680202303e-08,-1.85264736035628e-06,-5.58942734710854e-07,-5.54183448316270e-07,-3.95581289689398e-08},{7.88329069002365e-08,2.04810091451078e-08,3.74588851000076e-09,3.42429296613803e-08,-2.00840228416712e-08},{-5.93700447329696e-10,-6.57499436973459e-10,-6.90560448220751e-09,3.56586371051089e-09,7.33310245621566e-11},{-6.38101662363634e-11,4.23668020216529e-10,-2.43764895979202e-10,-9.31466610703172e-11,-3.17491457845975e-10},{1.50943725382470e-11,-6.11641188685078e-11,-4.37018785685645e-11,-2.32871158949602e-11,4.19757251950526e-11},{-1.18165328825853e-11,-9.91299557532438e-13,6.40908678055865e-14,2.41049422936434e-12,-8.20746054454953e-14},{6.01892101914838e-12,-8.78487122873450e-13,-1.58887481332294e-12,-3.13556902469604e-13,5.14523727801645e-14},{-1.50791729401891e-13,-1.45234807159695e-13,1.65302377570887e-13,-5.77094211651483e-15,9.22218953528393e-14},{-1.85618902787381e-14,5.64333811864051e-14,-9.94311377945570e-15,-2.40992156199999e-15,-2.19196760659665e-14},{0,0,0,0,0},{-8.16252352075899e-08,1.61725487723444e-06,9.55522506715921e-07,4.02436267433511e-07,-2.80682052597712e-07},{7.68684790328630e-09,-5.00940723761353e-09,-2.43640127974386e-08,-2.59119930503129e-08,3.35015169182094e-08},{7.97903115186673e-09,3.73803883416618e-09,3.27888334636662e-09,1.37481300578804e-09,-1.10677168734482e-10},{-1.67853012769912e-09,-1.61405252173139e-10,-1.98841576520056e-10,-1.46591506832192e-11,9.35710487804660e-11},{4.08807084343221e-11,-3.74514169689568e-11,-3.03638493323910e-11,-5.02332555734577e-12,-8.03417498408344e-12},{6.48922619024579e-12,1.96166891023817e-12,-1.96968755122868e-12,-5.20970156382361e-12,-1.62656885103402e-12},{1.28603518902875e-12,-4.88146958435109e-13,-3.37034886991840e-13,1.37393696103000e-14,4.41398325716943e-14},{1.48670014793021e-13,4.41636026364555e-14,2.06210477976005e-14,-3.43717583585390e-14,-1.21693704024213e-14},{-1.67624180330244e-14,6.59317111144238e-15,2.57238525440646e-15,-3.21568425020512e-17,5.29659568026553e-15},{7.85453466393227e-16,6.91252183915939e-16,-1.20540764178454e-15,-3.85803892583301e-16,3.46606994632006e-16},{0,0,0,0,0},{2.86710087625579e-06,-1.68179842305865e-06,-8.48306772016870e-07,-7.08798062479598e-07,-1.27469453733635e-07},{2.11824305734993e-09,2.02274279084379e-08,1.61862253091554e-08,3.25597167111807e-08,3.40868964045822e-09},{1.21757111431438e-08,1.68405530472906e-09,1.55379338018638e-09,-3.81467795805531e-10,2.53316405545058e-09},{-9.98413758659768e-11,5.38382145421318e-10,3.92629628330704e-10,-1.43067134097778e-10,3.74959329667113e-12},{-1.57270407028909e-11,-9.02797202317592e-12,8.45997059887690e-12,4.71474382524218e-12,5.41880986596427e-12},{-1.20658618702054e-12,7.12940685593433e-13,1.02148613026937e-12,1.63063852348169e-13,1.74048793197708e-13},{3.80559390991789e-13,1.19678271353485e-13,9.72859455604188e-14,5.42642400031729e-14,8.18796710714586e-14},{-4.69629218656902e-14,5.59889038686206e-15,2.05363292795059e-15,5.38599403288686e-15,-2.68929559474202e-15},{-1.88759348081742e-14,5.20975954705924e-15,-4.43585653096395e-16,5.57436617793556e-16,-3.95922805817677e-16},{-9.80871456373282e-16,2.50857658461759e-17,-1.24253000050963e-16,6.00857065211394e-17,3.53799635311500e-18},{2.49370713054872e-16,-1.49119714269816e-17,-3.12276052640583e-17,-2.42001662334001e-17,-1.69766504318143e-17},{0,0,0,0,0},{-1.69222102455713e-06,1.64277906173064e-06,5.28855114364096e-07,4.28159853268650e-07,-1.57362445882665e-07},{1.67656782413678e-08,-3.77746114074055e-08,-2.21564555842165e-08,-3.37071806992217e-08,1.47454008739800e-08},{1.06080499491408e-08,3.21990403709678e-09,3.87301757435359e-09,2.92241827834347e-10,-1.86619473655742e-11},{1.62399669665839e-10,3.51322865845172e-10,2.67086377702958e-11,-1.31596563625491e-10,3.14164569507034e-11},{-2.02180016657259e-11,2.03305178342732e-11,6.34969032565839e-12,5.99522296668787e-12,-4.46275273451008e-12},{-9.88409290158885e-13,-1.47692750858224e-13,3.14655550730530e-13,-2.41857189187879e-13,4.47727504501486e-13},{1.71430777754854e-13,1.73950835042486e-13,5.92323956541558e-14,8.06625710171825e-15,2.33252485755634e-14},{-1.74184545690134e-15,-8.18003353124179e-16,-6.62369006497819e-16,4.16303374396147e-15,7.06513748014024e-15},{-6.02936238677014e-15,1.89241084885229e-15,1.99097881944270e-17,-6.99974290696640e-16,-2.69504942597709e-17},{-4.65632962602379e-16,3.70281995445114e-18,-9.04232973763345e-17,2.20847370761932e-17,7.62909453726566e-17},{-6.25921477907943e-17,-2.10532795609842e-17,-1.03808073867183e-17,1.15091380049019e-18,4.66794445408388e-19},{9.39427013576903e-18,9.17044662931859e-19,2.04132745117549e-18,-1.72364063154625e-19,-1.18098896532163e-18}};
	const double bnm_ch[91][5] = {{0,0,0,0,0},{0,0,0,0,0},{3.44092035729033e-05,-1.21876825440561e-05,-1.87490665238967e-05,-2.60980336247863e-05,4.31639313264615e-06},{0,0,0,0,0},{-2.60125613000133e-05,1.70570295762269e-05,3.08331896996832e-05,1.66256596588688e-05,-1.07841055501996e-05},{8.74011641844073e-06,-2.25874169896607e-06,6.50985196673747e-07,1.30424765493752e-06,-1.85081244549542e-07},{0,0,0,0,0},{3.77496505484964e-05,-1.08198973553337e-05,-1.67717574544937e-05,-3.22476096673598e-05,1.12281888201134e-05},{-7.68623378647958e-07,-4.01400837153063e-06,-2.16390246700835e-06,-1.76912959937924e-06,-1.12740084951955e-06},{-2.37092815818895e-06,-9.52317223759653e-07,-2.22722065579131e-07,-6.25157619772530e-08,1.86582003894639e-08},{0,0,0,0,0},{-6.10254317785872e-05,-2.51815503068494e-05,2.01046207874667e-05,7.21107723367308e-06,-1.30692058660457e-05},{-9.60655417241537e-06,-7.31381721742373e-06,-2.52767927589636e-06,9.09039973214621e-07,-6.76454911344246e-07},{-2.25743206384908e-08,2.33058746737575e-07,2.24746779293445e-07,6.78551351968876e-08,1.25076011387284e-07},{-2.25744112770133e-07,-1.44429560891636e-07,-2.96810417448652e-08,-5.93858519742856e-08,-2.43210229455420e-08},{0,0,0,0,0},{7.45721015256308e-06,-3.81396821676410e-05,-1.41086198468687e-05,-2.28514517574713e-05,7.28638705683277e-06},{-5.77517778169692e-06,-3.93061211403839e-06,-2.17369763310752e-06,-1.48060935583664e-07,-2.74200485662814e-07},{4.52962035878238e-07,9.80990375495214e-07,4.67492045269286e-07,-8.31032252212116e-09,1.69426023427740e-07},{7.20536791795515e-10,2.75612253452141e-09,2.47772119382536e-09,4.30621825021233e-09,-2.86498479499428e-08},{-2.46253956492716e-08,-3.10300833499669e-09,8.06559148724445e-09,2.98197408430123e-10,6.32503656532846e-09},{0,0,0,0,0},{-6.01147094179306e-05,-3.16631758509869e-05,4.10038115100010e-06,3.55215057231403e-07,-2.23606515237408e-06},{-2.85937516921923e-06,-3.67775706610630e-06,-5.06445540401637e-07,8.21776759711184e-07,-5.98690271725558e-07},{7.77122595418965e-07,3.60896376754085e-07,3.88610487893381e-07,-4.39533892679537e-08,-6.26882227849174e-08},{1.05759993661891e-07,2.58009912408833e-08,-1.51356049060972e-08,-1.13335813107412e-09,5.37470857850370e-10},{7.99831506181984e-09,1.67423735327465e-09,2.94736760548677e-09,-1.56727133704788e-09,8.46186800849124e-10},{3.07727104043851e-09,3.93584215798484e-10,3.86721562770643e-11,1.72181091277391e-10,-2.16915737920145e-10},{0,0,0,0,0},{-1.16335389078126e-05,-1.39864676661484e-05,2.52546278407717e-06,-8.79152625440188e-06,-8.97665132187974e-06},{-3.95874550504316e-06,-1.17976262528730e-07,7.03189926369300e-07,3.38907065351535e-07,-3.67714052493558e-07},{2.29082449370440e-07,5.72961531093329e-07,4.21969662578894e-08,1.24112958141431e-08,9.56404486571888e-08},{1.44631865298671e-09,6.19368473895584e-09,1.67110424041236e-09,2.57979463602951e-09,-6.90806907510366e-09},{1.77235802019153e-09,-8.14388846228970e-10,4.50421956523579e-09,5.67452314909707e-10,2.47610443675560e-09},{4.85932343880617e-10,2.24864117422804e-10,-2.22534534468511e-10,-7.96395824973477e-11,3.12587399902493e-12},{-3.20173937255409e-11,-1.29872402028088e-11,-4.24092901203818e-11,2.66570185704416e-11,-5.25164954403909e-12},{0,0,0,0,0},{-1.36010179191872e-05,1.77873053642413e-05,4.80988546657119e-06,3.46859608161212e-06,-1.73247520896541e-06},{2.00020483116258e-06,2.43393064079673e-06,1.21478843695862e-06,1.95582820041644e-07,-3.11847995109088e-07},{-8.13287218979310e-09,1.05206830238665e-08,6.54040136224164e-09,-1.96402660575990e-08,-1.40379796070732e-08},{4.01291020310740e-08,2.92634301047947e-08,6.04179709273169e-09,8.61849065020545e-10,5.98065429697245e-09},{-1.06149335032911e-09,-4.39748495862323e-10,8.83040310269353e-10,3.49392227277679e-10,8.57722299002622e-10},{-1.25049888909390e-11,2.05203288281631e-10,1.37817670505319e-11,6.82057794430145e-11,-9.41515631694254e-11},{7.47196022644130e-12,-2.51369898528782e-11,-2.12196687809200e-11,1.55282119505201e-11,9.99224438231805e-12},{-7.90534019004874e-13,3.55824506982589e-12,8.00835777767281e-13,8.73460019069655e-13,1.34176126600106e-12},{0,0,0,0,0},{3.12855262465316e-05,1.31629386003608e-05,2.65598119437581e-06,8.68923340949135e-06,-7.51164082949678e-06},{1.56870792650533e-06,1.89227301685370e-06,4.15620385341985e-07,-2.74253787880603e-07,-4.28826210119200e-07},{-9.99176994565587e-08,-1.10785129426286e-07,-1.10318125091182e-07,6.22726507350764e-09,-3.39214566386250e-08},{1.24872975018433e-08,1.10663206077249e-08,5.40658975901469e-09,-2.79119137105115e-09,-2.47500096192502e-09},{1.11518917154060e-10,-4.21965763244849e-10,3.26786005211229e-10,1.93488254914545e-10,7.00774679999972e-10},{1.50889220040757e-10,1.03130002661366e-10,-3.09481760816903e-11,-4.47656630703759e-11,-7.36245021803800e-12},{-1.91144562110285e-12,-1.11355583995978e-11,-1.76207323352556e-11,8.15289793192265e-12,3.45078925412654e-12},{-2.73248710476019e-12,-1.65089342283056e-13,-2.20125355220819e-13,5.32589191504356e-13,5.70008982140874e-13},{8.06636928368811e-13,1.30893069976672e-13,9.72079137767479e-14,3.87410156264322e-14,-5.56410013263563e-14},{0,0,0,0,0},{2.02454485403216e-05,-9.77720471118669e-06,-4.35467548126223e-06,2.19599868869063e-06,-3.26670819043690e-06},{-3.21839256310540e-08,8.38760368015005e-07,-5.08058835724060e-07,4.16177282491396e-08,1.53842592762120e-07},{-1.57377633165313e-07,-7.86803586842404e-08,-7.40444711426898e-08,3.15259864117954e-08,5.60536231567172e-09},{-3.26080428920229e-10,-3.14576780695439e-09,8.46796096612981e-10,-2.59329379174262e-09,-8.01054756588382e-10},{-4.58725236153576e-11,-6.87847958546571e-11,8.18226480126754e-12,1.81082075625897e-10,1.74510532938256e-10},{7.60233505328792e-11,4.76463939581321e-11,-2.47198455442033e-11,-8.83439688929965e-12,5.93967446277316e-13},{-8.92919292558887e-12,-4.38524572312029e-12,-4.02709146060896e-12,4.84344426425295e-12,5.12869042781520e-12},{1.91518361809952e-12,3.06846255371817e-13,-2.44830265306345e-13,7.86297493099244e-14,2.72347805801980e-13},{9.09936624159538e-14,7.20650818861447e-15,2.45383991578283e-14,-4.79580974186462e-15,3.64604724046944e-14},{-4.63611142770709e-14,1.73908246420636e-15,-4.41651410674801e-15,-6.61409045306922e-16,-1.60016049099639e-15},{0,0,0,0,0},{6.17105245892845e-06,-1.04342983738457e-05,-1.72711741097994e-05,-8.16815967888426e-07,3.42789959967593e-06},{-2.44014060833825e-07,2.06991837444652e-07,-3.85805819475679e-07,1.67162359832166e-08,4.15139610402483e-07},{8.18199006804020e-08,-3.20013409049159e-08,5.94000906771151e-08,2.24122167188946e-08,-1.33796186160409e-08},{7.66269294674338e-11,-6.07862178874828e-10,4.95795757186248e-10,-3.07589245481422e-10,3.44456287710689e-10},{-1.84076250254929e-10,-1.30985312312781e-10,-1.52547325533276e-10,-2.51000125929512e-11,-1.93924012590455e-11},{-2.93307452197665e-11,2.88627386757582e-11,5.58812021182217e-12,-1.68692874069187e-13,1.80464313900575e-12},{-9.59053874473003e-13,6.04803122874761e-13,-9.80015608958536e-13,1.70530372034214e-12,1.70458664160775e-12},{2.80169588226043e-13,9.09573148053551e-14,2.16449186617004e-14,1.15550091496353e-13,4.97772796761321e-14},{-3.04524400761371e-14,3.42845631349694e-14,2.44230630602064e-14,5.76017546103056e-16,-9.74409465961093e-15},{5.98765340844291e-15,-2.63942474859535e-15,-1.80204805804437e-15,-1.84981819321183e-16,-5.85073392163660e-16},{-2.37069441910133e-15,2.87429226086856e-16,-1.67055963193389e-16,2.72110684914090e-18,8.46646962667892e-17},{0,0,0,0,0},{-2.71386164105722e-05,-1.41834938338454e-05,-2.00777928859929e-07,5.94329804681196e-07,8.61856994375586e-06},{-3.93656495458664e-08,-6.36432821807576e-07,-2.47887475106438e-07,-2.64906446204966e-08,1.10689794197004e-07},{5.25319489188562e-08,9.00866357158695e-09,5.00693379572512e-08,2.47269011056404e-08,-7.27648556194598e-09},{1.87207107149043e-09,-1.46428282396138e-09,-2.71812237167257e-10,8.44902265891466e-10,-5.62683870906027e-10},{-1.08295119666184e-10,4.75553388543793e-11,-5.49429386495686e-11,-6.60907871731611e-11,-5.97347322824822e-11},{-4.95118306815571e-12,5.31083735234970e-13,-1.93679746327378e-12,-1.61770521840510e-12,1.23276727202510e-11},{6.68582682909900e-13,7.38288575160449e-13,5.47630483499201e-13,-1.00770258118914e-13,-1.65564928475981e-13},{5.80963409268471e-14,6.93474288078737e-14,6.60728092794315e-15,-5.21029056725202e-15,-1.11283532854883e-16},{-4.10567742688903e-15,1.62252646805882e-14,1.00774699865989e-14,-2.44793214897877e-16,-1.59283906414563e-15},{1.84669506619904e-17,8.28473337813919e-17,-1.53400662078899e-16,-5.01060672199689e-17,-2.20727935766132e-16},{2.65355116203636e-16,-3.70233146147684e-17,3.52689394451586e-18,-8.62215942516328e-18,9.26909361974526e-18},{9.94266950643135e-17,4.17028699663441e-18,-7.65153491125819e-21,-5.62131270981041e-18,-3.03732817297438e-18}};
	const double bnm_cw[91][5] = {{0,0,0,0,0},{0,0,0,0,0},{-0.000209104872912563,-1.41530274973540e-05,3.00318745764815e-05,-1.82864291318284e-05,-7.62965409959238e-06},{0,0,0,0,0},{-0.000186336519900275,0.000191256553935638,7.28356195304996e-05,3.59637869639906e-05,-2.53927226167388e-05},{0.000108195343799485,-6.97050977217619e-05,-6.68037133871099e-05,2.30387653190503e-05,-1.22735483925784e-05},{0,0,0,0,0},{0.000119941091277039,-7.70547844186875e-05,-8.15376297964528e-05,1.06005789545203e-05,2.31177232268720e-05},{-1.77494760217164e-05,-1.37061385686605e-05,-1.74805936475816e-05,-6.91745900867532e-07,-7.10231790947787e-06},{-1.47564103733219e-05,2.08890785485260e-06,3.19876879447867e-06,9.43984664503715e-07,-4.90480527577521e-06},{0,0,0,0,0},{4.93300138389457e-05,-6.77641298460617e-05,-3.25043347246397e-05,8.33226714911921e-06,8.11499972792905e-06},{-2.80449863471272e-05,-1.04367606414606e-05,1.64473584641163e-07,-3.57420965807816e-06,2.95887156564038e-06},{1.88835280111533e-06,5.69125761193702e-07,-2.22757382799409e-06,-1.96699131032252e-07,-2.91861219283659e-07},{-4.69918971436680e-06,-7.00778948636735e-07,2.97544157334673e-09,3.86100512544410e-07,2.30939653701027e-07},{0,0,0,0,0},{1.77050610394149e-05,-3.18353071311574e-05,3.04232260950316e-05,-6.26821316488169e-05,-1.75094810002378e-06},{9.25605901565775e-06,-8.25179123302247e-06,6.74032752408358e-06,3.22192289084524e-06,6.09414500075259e-06},{4.28233825242200e-06,2.10470570087927e-07,-4.75050074985668e-07,-4.89382663470592e-07,8.75232347469207e-07},{8.50393520366934e-07,1.58764911467186e-07,-2.16267638321210e-07,-7.43341300487416e-10,1.75131729813230e-07},{-2.87064111623119e-07,4.50393893102830e-08,6.63315044416690e-08,7.61199387418853e-08,-6.05694385243652e-09},{0,0,0,0,0},{-1.95692079507947e-05,5.15486098887851e-05,3.00852761598173e-05,1.21485028343416e-05,-6.72450521493428e-06},{5.34496867088158e-06,3.90973451680699e-06,3.70148924718425e-06,5.73731499938212e-08,5.52258220288780e-07},{3.39950838185315e-07,-5.63443976772634e-07,4.52082211980595e-07,-2.57094645806243e-07,-6.84885762924729e-08},{2.15793276880684e-07,2.05911354090873e-07,1.33747872341142e-08,-2.07997626478952e-08,-3.69812938736019e-08},{2.11952749403224e-09,4.04317822544732e-08,2.40972024883650e-09,8.56289126938059e-09,2.31035283490200e-08},{-2.08402298813248e-09,-8.50243600879112e-09,2.60895410117768e-09,-6.69156841738591e-10,-5.16280278087006e-09},{0,0,0,0,0},{0.000124901291436683,-5.70770326719086e-05,-8.44887248105015e-05,-3.11442665354698e-05,-1.12982893252046e-05},{-8.38934444233944e-06,1.56860091415414e-06,-1.77704563531825e-06,-5.70219068898717e-08,-4.30377735031244e-06},{3.72965318017681e-07,6.98175439446187e-07,1.75760544807919e-08,1.59731284857151e-07,3.62363848767891e-07},{-2.32148850787091e-07,-4.21888751852973e-08,8.35926113952108e-08,-2.24572480575674e-08,-6.92114100904503e-08},{-2.92635642210745e-09,3.38086229163415e-09,4.72186694662901e-09,-8.32354437305758e-11,4.19673890995627e-09},{-1.26452887692900e-09,1.91309690886864e-09,1.54755631983655e-09,-1.09865169400249e-09,1.83645326319994e-10},{9.92539437011905e-10,-2.96318203488300e-10,1.17466020823486e-10,-5.00185957995526e-10,-8.54777591408537e-11},{0,0,0,0,0},{-0.000182885335404854,7.27424724520089e-05,3.05286278023427e-05,2.55324463432562e-05,-6.39859510763234e-06},{-5.21449265232557e-06,-6.70572386081398e-06,-3.95473351292738e-06,-6.41023334372861e-07,-3.11616331059009e-06},{2.37090789071727e-07,3.58427517014705e-07,2.55709192777007e-07,8.44593804408541e-08,9.27243162355359e-09},{7.24370898432057e-08,-7.43945120337710e-09,8.61751911975683e-10,-2.34651212610623e-08,2.94052921681456e-09},{-1.22127317934425e-08,-3.89758984276768e-09,4.12890383904924e-11,2.06528068002723e-09,1.73488696972270e-09},{-5.44137406907620e-10,-4.81034553189921e-10,-2.56101759039694e-11,3.21880564410154e-10,-2.70195343165250e-11},{1.08394225300546e-10,-7.99525492688661e-11,1.73850287030654e-10,-8.06390014426271e-11,-7.63143364291160e-13},{-3.41446959267441e-11,2.72675729042792e-11,5.69674704865345e-12,-3.38402998344892e-12,-2.96732381931007e-12},{0,0,0,0,0},{2.91161315987250e-05,-7.24641166590735e-05,-8.58323519857884e-06,-1.14037444255820e-05,1.32244819451517e-05},{1.24266748259826e-06,-4.13127038469802e-06,-8.47496394492885e-07,5.48722958754267e-07,-1.98288551821205e-06},{-1.70671245196917e-08,1.36891127083540e-08,-2.80901972249870e-07,-5.45369793946222e-09,-9.58796303763498e-08},{1.14115335901746e-08,2.79308166429178e-08,-1.71144803132413e-08,4.86116243565380e-09,-8.13061459952280e-09},{-1.19144311035824e-09,-1.28197815211763e-09,-1.22313592972373e-09,6.23116336753674e-10,2.11527825898689e-09},{4.94618645030426e-10,-1.01554483531252e-10,-3.58808808952276e-10,1.23499783028794e-10,-1.21017599361833e-10},{1.33959569836451e-10,-1.87140898812283e-11,-3.04265350158941e-11,-1.42907553051431e-11,-1.09873858099638e-11},{1.30277419203512e-11,-4.95312627777245e-12,2.23070215544358e-12,1.66450226016423e-12,6.26222944728474e-12},{-4.40721204874728e-12,2.99575133064885e-12,-1.54917262009097e-12,8.90015664527060e-14,-1.59135267012937e-12},{0,0,0,0,0},{-4.17667211323160e-05,1.39005215116294e-05,1.46521361817829e-05,3.23485458024416e-05,-8.57936261085263e-06},{9.48491026524450e-07,1.67749735481991e-06,6.80159475477603e-07,-1.34558044496631e-06,1.62108231492249e-06},{-2.67545753355631e-07,-3.31848493018159e-08,1.05837219557465e-07,1.55587655479400e-07,-2.84996014386667e-08},{-5.15113778734878e-08,8.83630725241303e-09,3.36579455982772e-09,-6.22350102096402e-09,5.03959133095369e-09},{2.04635880823035e-11,-1.07923589059151e-09,-6.96482137669712e-10,-4.70238500452793e-10,-6.60277903598297e-10},{-2.41897168749189e-11,1.33547763615216e-10,-5.13534673658908e-11,-8.32767177662817e-11,5.72614717082428e-11},{7.55170562359940e-12,-1.57123461699055e-11,-1.48874069619124e-11,-7.10529462981252e-13,-7.99006335025107e-12},{2.41883156738960e-12,2.97346980183361e-12,1.28719977731450e-12,-2.49240876894143e-12,6.71155595793198e-13},{4.16995565336914e-13,-1.71584521275288e-13,-7.23064067359978e-14,2.45405880599037e-13,4.43532934905830e-13},{3.56937508828997e-14,2.43012511260300e-14,-7.96090778289326e-14,-1.59548529636358e-14,8.99103763000507e-15},{0,0,0,0,0},{0.000117579258399489,-4.52648448635772e-05,-2.69130037097862e-05,-3.82266335794366e-05,-4.36549257701084e-06},{-1.43270371215502e-06,1.21565440183855e-06,8.53701136074284e-07,1.52709810023665e-06,1.22382663462904e-06},{3.06089147519664e-07,9.79084123751975e-08,7.96524661441178e-08,4.54770947973458e-08,2.22842369458882e-07},{-9.94254707745127e-09,1.43251376378012e-08,1.93911753685160e-08,-6.52214645690987e-09,-1.97114016452408e-09},{-9.20751919828404e-10,-9.44312829629076e-10,7.24196738163952e-11,-6.71801072324561e-11,2.33146774065873e-10},{-1.43544298956410e-11,1.78464235318769e-10,7.69950023012326e-11,-4.22390057304453e-12,3.05176324574816e-11},{-7.88053753973990e-12,-3.20207793051003e-12,1.01527407317625e-12,6.02788185858449e-12,1.14919530900453e-11},{-1.21558899266069e-12,5.31300597882986e-13,3.44023865079264e-13,-6.22598216726224e-14,-5.47031650765402e-14},{-4.15627948750943e-13,2.77620907292721e-13,-8.99784134364011e-14,1.07254247320864e-13,6.85990080564196e-14},{-3.91837863922901e-14,9.74714976816180e-15,6.79982450963903e-15,-2.41420876658572e-15,-2.20889384455344e-15},{9.25912068402776e-15,-4.02621719248224e-15,-2.43952036351187e-15,-1.97006876049866e-15,1.03065621527869e-16},{0,0,0,0,0},{-0.000103762036940193,4.38145356960292e-05,2.43406920349913e-05,7.89103527673736e-06,-1.66841465339160e-05},{-1.18428449371744e-06,-1.30188721737259e-06,-1.88013557116650e-06,-1.01342046295303e-06,9.21813037802502e-07},{1.51836068712460e-07,1.11362553803933e-07,1.55375052233052e-07,1.94450910788747e-09,-1.73093755828342e-08},{-3.77758211813121e-09,1.23323969583610e-08,1.72510045250302e-09,-1.88609789458597e-09,1.28937597985937e-09},{-1.07947760393523e-09,5.26051570105365e-10,-3.67657536332496e-11,3.16110123523840e-10,-3.24273198242170e-10},{-2.00385649209820e-12,2.54703869682390e-11,4.08563622440851e-12,-4.83350348928636e-11,-3.98153443845079e-13},{2.73094467727215e-12,5.08900664114903e-12,-7.66669089075134e-13,2.50015592643012e-12,4.29763262853853e-12},{6.53946487537890e-13,-2.24958413781008e-13,6.74638861781238e-15,3.28537647613903e-14,2.54199700290116e-13},{-1.09122051193505e-13,8.36362392931501e-14,-3.90750153912300e-14,-5.44915910741950e-14,2.43816947219217e-14},{-1.41882561550134e-14,1.00455397812713e-14,2.63347255121581e-15,1.53043256823601e-15,2.49081021428095e-15},{-1.17256193152654e-15,1.05648985031971e-16,1.31778372453016e-16,1.44815198666577e-16,-3.72532768618480e-16},{2.66203457773766e-16,-7.67224608659658e-17,3.51487351031864e-18,4.10287131339291e-17,-6.72171711728514e-17}};
	double anm_bh_A0[91];double anm_bh_A1[91];double anm_bh_B1[91];double anm_bh_A2[91];double anm_bh_B2[91];
    double anm_bw_A0[91];double anm_bw_A1[91];double anm_bw_B1[91];double anm_bw_A2[91];double anm_bw_B2[91];
	double anm_ch_A0[91];double anm_ch_A1[91];double anm_ch_B1[91];double anm_ch_A2[91];double anm_ch_B2[91];
	double anm_cw_A0[91];double anm_cw_A1[91];double anm_cw_B1[91];double anm_cw_A2[91];double anm_cw_B2[91];
	
	double bnm_bh_A0[91];double bnm_bh_A1[91];double bnm_bh_B1[91];double bnm_bh_A2[91];double bnm_bh_B2[91];
    double bnm_bw_A0[91];double bnm_bw_A1[91];double bnm_bw_B1[91];double bnm_bw_A2[91];double bnm_bw_B2[91];
	double bnm_ch_A0[91];double bnm_ch_A1[91];double bnm_ch_B1[91];double bnm_ch_A2[91];double bnm_ch_B2[91];
	double bnm_cw_A0[91];double bnm_cw_A1[91];double bnm_cw_B1[91];double bnm_cw_A2[91];double bnm_cw_B2[91];
	
	
	//% read the respective lines from the matrices
	for( unsigned n=0; n<91; n++){  
		// //# read mean values and amplitudes
		anm_bh_A0[n] = anm_bh[n][0]; anm_bh_A1[n] = anm_bh[n][1]; anm_bh_B1[n] = anm_bh[n][2]; anm_bh_A2[n] = anm_bh[n][3]; anm_bh_B2[n] = anm_bh[n][4]; 
		anm_bw_A0[n] = anm_bw[n][0]; anm_bw_A1[n] = anm_bw[n][1]; anm_bw_B1[n] = anm_bw[n][2]; anm_bw_A2[n] = anm_bw[n][3]; anm_bw_B2[n] = anm_bw[n][4]; 
		anm_ch_A0[n] = anm_ch[n][0]; anm_ch_A1[n] = anm_ch[n][1]; anm_ch_B1[n] = anm_ch[n][2]; anm_ch_A2[n] = anm_ch[n][3]; anm_ch_B2[n] = anm_ch[n][4]; 
		anm_cw_A0[n] = anm_cw[n][0]; anm_cw_A1[n] = anm_cw[n][1]; anm_cw_B1[n] = anm_cw[n][2]; anm_cw_A2[n] = anm_cw[n][3]; anm_cw_B2[n] = anm_cw[n][4]; 
		
		bnm_bh_A0[n] = bnm_bh[n][0]; bnm_bh_A1[n] = bnm_bh[n][1]; bnm_bh_B1[n] = bnm_bh[n][2]; bnm_bh_A2[n] = bnm_bh[n][3]; bnm_bh_B2[n] = bnm_bh[n][4]; 
		bnm_bw_A0[n] = bnm_bw[n][0]; bnm_bw_A1[n] = bnm_bw[n][1]; bnm_bw_B1[n] = bnm_bw[n][2]; bnm_bw_A2[n] = bnm_bw[n][3]; bnm_bw_B2[n] = bnm_bw[n][4]; 
		bnm_ch_A0[n] = bnm_ch[n][0]; bnm_ch_A1[n] = bnm_ch[n][1]; bnm_ch_B1[n] = bnm_ch[n][2]; bnm_ch_A2[n] = bnm_ch[n][3]; bnm_ch_B2[n] = bnm_ch[n][4]; 
		bnm_cw_A0[n] = bnm_cw[n][0]; bnm_cw_A1[n] = bnm_cw[n][1]; bnm_cw_B1[n] = bnm_cw[n][2]; bnm_cw_A2[n] = bnm_cw[n][3]; bnm_cw_B2[n] = bnm_cw[n][4]; 
	}
	
	
	//% conversions
	double el = M_PI/2.0-zd;
	double polDist = M_PI/2.0- lat;

		
	//% a.) calculate Legendre polynomials
	 
	//% degree n and order m
	unsigned nmax = 12+1;

	//% unit vector
	double x = sin(polDist)*cos(lon);
	double y = sin(polDist)*sin(lon);
	double z = cos(polDist);

    
	//% Legendre polynomials
	double V[13][13];
	double W[13][13];
	V[1][1] = 1.0;
	W[1][1] = 0.0;
	V[2][1] = z * V[1][1];
	W[2][1] = 0.0;

	for( unsigned n=2; n<nmax; n++){
		V[n+1][1] = ((2*n-1) * z * V[n][1] - (n-1) * V[n-1][1]) / n;
		W[n+1][1] = 0.0;
	}
	
	for( unsigned m=1; m<nmax; m++){
			V[m+1][m+1] = (2*m-1) * (x*V[m][m] - y*W[m][m]);
			W[m+1][m+1] = (2*m-1) * (x*W[m][m] + y*V[m][m]);
			if(m<nmax){
				V[m+2][m+1] = (2*m+1) * z * V[m+1][m+1];
				W[m+2][m+1] = (2*m+1) * z * W[m+1][m+1];
			}
			for( unsigned n=m+2; n<nmax; n++){
				V[n+1][m+1] = ((2*n-1)*z*V[n][m+1] - (n+m-1)*V[n-1][m+1]) / (n-m);
				W[n+1][m+1] = ((2*n-1)*z*W[n][m+1] - (n+m-1)*W[n-1][m+1]) / (n-m);
			}
	}
	//% b.) determine the coefficients bh, bw, ch and cw

	//% initialize
	double bh_A0 = 0.0; double bh_A1 = 0.0; double bh_B1 = 0.0; double bh_A2 = 0.0; double bh_B2 = 0.0;
	double bw_A0 = 0.0; double bw_A1 = 0.0; double bw_B1 = 0.0; double bw_A2 = 0.0; double bw_B2 = 0.0;
	double ch_A0 = 0.0; double ch_A1 = 0.0; double ch_B1 = 0.0; double ch_A2 = 0.0; double ch_B2 = 0.0;
	double cw_A0 = 0.0; double cw_A1 = 0.0; double cw_B1 = 0.0; double cw_A2 = 0.0; double cw_B2 = 0.0;
	int i = 0;

	for ( unsigned n = 0; n<nmax; n++){
		for ( unsigned m = 0; m<=n; m++){
			bh_A0 = bh_A0 + (anm_bh_A0[i]*V[n+1][m+1] + bnm_bh_A0[i]*W[n+1][m+1]);
			bh_A1 = bh_A1 + (anm_bh_A1[i]*V[n+1][m+1] + bnm_bh_A1[i]*W[n+1][m+1]);
			bh_B1 = bh_B1 + (anm_bh_B1[i]*V[n+1][m+1] + bnm_bh_B1[i]*W[n+1][m+1]);
			bh_A2 = bh_A2 + (anm_bh_A2[i]*V[n+1][m+1] + bnm_bh_A2[i]*W[n+1][m+1]);
			bh_B2 = bh_B2 + (anm_bh_B2[i]*V[n+1][m+1] + bnm_bh_B2[i]*W[n+1][m+1]);
			
			bw_A0 = bw_A0 + (anm_bw_A0[i]*V[n+1][m+1] + bnm_bw_A0[i]*W[n+1][m+1]);
			bw_A1 = bw_A1 + (anm_bw_A1[i]*V[n+1][m+1] + bnm_bw_A1[i]*W[n+1][m+1]);
			bw_B1 = bw_B1 + (anm_bw_B1[i]*V[n+1][m+1] + bnm_bw_B1[i]*W[n+1][m+1]);
			bw_A2 = bw_A2 + (anm_bw_A2[i]*V[n+1][m+1] + bnm_bw_A2[i]*W[n+1][m+1]);
			bw_B2 = bw_B2 + (anm_bw_B2[i]*V[n+1][m+1] + bnm_bw_B2[i]*W[n+1][m+1]);
			
			ch_A0 = ch_A0 + (anm_ch_A0[i]*V[n+1][m+1] + bnm_ch_A0[i]*W[n+1][m+1]);
			ch_A1 = ch_A1 + (anm_ch_A1[i]*V[n+1][m+1] + bnm_ch_A1[i]*W[n+1][m+1]);
			ch_B1 = ch_B1 + (anm_ch_B1[i]*V[n+1][m+1] + bnm_ch_B1[i]*W[n+1][m+1]);
			ch_A2 = ch_A2 + (anm_ch_A2[i]*V[n+1][m+1] + bnm_ch_A2[i]*W[n+1][m+1]);
			ch_B2 = ch_B2 + (anm_ch_B2[i]*V[n+1][m+1] + bnm_ch_B2[i]*W[n+1][m+1]);
			
			cw_A0 = cw_A0 + (anm_cw_A0[i]*V[n+1][m+1] + bnm_cw_A0[i]*W[n+1][m+1]);
			cw_A1 = cw_A1 + (anm_cw_A1[i]*V[n+1][m+1] + bnm_cw_A1[i]*W[n+1][m+1]);
			cw_B1 = cw_B1 + (anm_cw_B1[i]*V[n+1][m+1] + bnm_cw_B1[i]*W[n+1][m+1]);
			cw_A2 = cw_A2 + (anm_cw_A2[i]*V[n+1][m+1] + bnm_cw_A2[i]*W[n+1][m+1]);
			cw_B2 = cw_B2 + (anm_cw_B2[i]*V[n+1][m+1] + bnm_cw_B2[i]*W[n+1][m+1]);
			
			i = i+1;		
			//printf ("bh_A0(n:m) %d:%d->%4.5f\n",n,m,bh_A0);			
		}
		
	}
	//% adding the seasonal amplitudes for the specified doy to the mean values
	double bh = bh_A0 + bh_A1*cos(doy/365.25*2*M_PI) + bh_B1*sin(doy/365.25*2*M_PI) + bh_A2*cos(doy/365.25*4*M_PI) + bh_B2*sin(doy/365.25*4*M_PI);
	double bw = bw_A0 + bw_A1*cos(doy/365.25*2*M_PI) + bw_B1*sin(doy/365.25*2*M_PI) + bw_A2*cos(doy/365.25*4*M_PI) + bw_B2*sin(doy/365.25*4*M_PI);
	double ch = ch_A0 + ch_A1*cos(doy/365.25*2*M_PI) + ch_B1*sin(doy/365.25*2*M_PI) + ch_A2*cos(doy/365.25*4*M_PI) + ch_B2*sin(doy/365.25*4*M_PI);
	double cw = cw_A0 + cw_A1*cos(doy/365.25*2*M_PI) + cw_B1*sin(doy/365.25*2*M_PI) + cw_A2*cos(doy/365.25*4*M_PI) + cw_B2*sin(doy/365.25*4*M_PI);


	//% calculating the hydrostatic and wet mapM_PIng factors
	double mfh = (1+(ah/(1+bh/(1+ch))))   /   (sin(el)+(ah/(sin(el)+bh/(sin(el)+ch))));
	double mfw = (1+(aw/(1+bw/(1+cw))))   /   (sin(el)+(aw/(sin(el)+bw/(sin(el)+cw))));

	vmf[0] = mfh;
	vmf[1] = mfw;
}
//[p,T,dT,Tm,e,ah,aw,la,undu,Gn_h,Ge_h,Gn_w,Ge_w] = 
bool t_pppGpt::GPT3(double mjd, double lat, double lon, double hell){
/*
% gpt3_1.m
%
% (c) Department of Geodesy and Geoinformation, Vienna University of
% Technology, 2017
%
% The copyright in this document is vested in the Department of Geodesy and
% Geoinformation (GEO), Vienna University of Technology, Austria. This document
% may only be reproduced in whole or in part, or stored in a retrieval
% system, or transmitted in any form, or by any means electronic,
% mechanical, photocopying or otherwise, either with the prior permission
% of GEO or in accordance with the terms of ESTEC Contract No.
% 4000107329/12/NL/LvH.
%
%
% This subroutine determines pressure, temperature, temperature lapse rate, 
% mean temperature of the water vapor, water vapour pressure, hydrostatic 
% and wet mapM_PIng function coefficients ah and aw, water vapour decrease
% factor, geoid undulation and emM_PIrical tropospheric gradients for 
% specific sites near the earth's surface.
% It is based on a 5 x 5 degree external grid file ('gpt3_5.grd') with mean
% values as well as sine and cosine amplitudes for the annual and
% semiannual variation of the coefficients.
% As the .grd file is opened anew every time this function is called, the
% process is fairly time-consuming for a longer set of stations. For 
% improved calculation performance, see gpt3_1_fast.m.
%
% D. Landskron, J. BÃ¶hm (2018), VMF3/GPT3: Refined Discrete and EmM_PIrical Troposphere MapM_PIng Functions, 
% J Geod (2018) 92: 349., doi: 10.1007/s00190-017-1066-2. 
% Download at: https://link.springer.com/content/pdf/10.1007%2Fs00190-017-1066-2.pdf
%
%
% Input parameters:
%
% mjd:   modified Julian date (scalar, only one epoch per call is possible)
% lat:   ellipsoidal latitude in radians [-M_PI/2:+M_PI/2] (vector)
% lon:   longitude in radians [-M_PI:M_PI] or [0:2M_PI] (vector)
% h_ell: ellipsoidal height in m (vector)
% it:    case 1: no time variation but static quantities
%        case 0: with time variation (annual and semiannual terms)
% 
% Output parameters:
%
% p:    pressure in hPa (vector) 
% T:    temperature in degrees Celsius (vector)
% dT:   temperature lapse rate in degrees per km (vector)
% Tm:   mean temperature weighted with the water vapor in degrees Kelvin (vector) 
% e:    water vapour pressure in hPa (vector)
% ah:   hydrostatic mapM_PIng function coefficient at zero height (VMF1) (vector)
% aw:   wet mapM_PIng function coefficient (VMF1) (vector)
% la:   water vapour decrease factor (vector)
% undu: geoid undulation in m (vector)
% Gn_h: hydrostatic north gradient in m (vector)
% Ge_h: hydrostatic east gradient in m (vector)
% Gn_w: wet north gradient in m (vector)
% Ge_w: wet east gradient in m (vector)
%
%
% The hydrostatic mapM_PIng function coefficients have to be used with the
% height dependent Vienna MapM_PIng Function 3 (vmf3_ht.m) because the
% coefficients refer to zero height.
%
%
% File created by Daniel Landskron, 2016/04/27
% 
% =========================================================================

*/	
	lat = lat*180.0/M_PI;
	lon = lon*180.0/M_PI;
	// Check Boundary in Thailand
	if(!((lat>5.570728) && (lat<20.544796) && (lon>97.295242) && (lon<105.776465))){
		return false;
	}

    //% convert mjd to doy

	double hour = floor((mjd-floor(mjd))*24);   //% get hours
	double minu = floor((((mjd-floor(mjd))*24)-hour)*60);   //% get minutes
	double sec = (((((mjd-floor(mjd))*24)-hour)*60)-minu)*60;   //% get seconds

	//% change secs, min hour whose sec==60
	if (sec==60){
		minu = minu + 1;
		sec = 0;
	}
	if(minu==60){
		hour = hour + 1;
		minu = 0;
	}

	//% calc jd (yet wrong for hour==24)
	double jd = mjd+2400000.5;

	//% if hr==24, correct jd and set hour==0
	if(hour==24){
		jd = jd + 1;
		hour = 0;
	}

	//% integer julian date
	double jd_int = floor(jd+0.5);

	double aa = jd_int+32044;
	double bb = floor((4*aa+3)/146097);
	double cc = aa-floor((bb*146097)/4);
	double dd = floor((4*cc+3)/1461);
	double ee = cc-floor((1461*dd)/4);
	double mm = floor((5*ee+2)/153);

	double day = ee-floor((153*mm+2)/5)+1;
	double month = mm+3-12*floor(mm/10);
	int year = bb*100+dd-4800+floor(mm/10);

	//% first check if the specified year is leap year or not (logical output)
	int leapYear = 0;
	if(((year % 4 == 0) && (year % 100 != 0)) || (year%400 == 0)){
		leapYear = 1;
	}

	const double days[] = {31,28,31,30,31,30,31,31,30,31,30,31};
	double doy = day;
	for( int i = 0; i < (month-1); i=i+1 ) {
		doy = doy + days[i];
	}	
	//double doy = sum(days(1:month-1)) + day;
	if ((leapYear == 1) && (month > 2)){
		doy = doy + 1;
	}
	doy = doy + mjd-floor(mjd);   //% add decimal places

	//% determine the GPT3 coefficients

	//% mean gravity in m/s**2
	double gm = 9.80665;
	//% molar mass of dry air in kg/mol
	double dMtr = 28.965*0.001;
	//% universal gas constant in J/K/mol
	double Rg = 8.3143;
	//% factors for amplitudes
	double cosfy = cos(doy/365.25*2*M_PI);   //% coefficient for A1
	double coshy = cos(doy/365.25*4*M_PI);   //% coefficient for B1
	double sinfy = sin(doy/365.25*2*M_PI);   //% coefficient for A2
	double sinhy = sin(doy/365.25*4*M_PI);   //% coefficient for B2	
	
	// Data index
	unsigned indx[4]={0,0,0,0};
	int flat = floor(lat-0.5)-4;
	int flon =106-floor(lon-0.5);	
	//# transform to polar distance in degrees
	double ppod = (-lat + M_PI/2)*180.0/M_PI; 
	// find the index (line in the grid file) of the nearest point
	//# changed for the 1 degree grid (GP)
	double ipod = floor((ppod+1.0)); 
	double ilon = floor((lon+1.0));
	//# normalized (to one) differences, can be positive or negative
	//# changed for the 1 degree grid (GP)
	double diffpod = (ppod - (ipod - 0.5));
	double difflon = (lon - (ilon - 0.5));
	indx[0] = (_numData - flat * 11 - 1 - flon);// LL
	indx[1] = indx[0] - 11;            // UL
	indx[2] = indx[0] + 1;             // LR
	indx[3] = indx[1] + 1;             // UR 
	double undul[4] = {0.0,0.0,0.0,0.0};
	double Ql[4]  = {0.0,0.0,0.0,0.0};
	double dTl[4] = {0.0,0.0,0.0,0.0};
	double Tl[4]   = {0.0,0.0,0.0,0.0};
	double pl[4] 	 = {0.0,0.0,0.0,0.0};
	double ahl[4] = {0.0,0.0,0.0,0.0};
	double awl[4] = {0.0,0.0,0.0,0.0};
	double lal[4]  = {0.0,0.0,0.0,0.0};
	double Tml[4]= {0.0,0.0,0.0,0.0};
	double el[4]   = {0.0,0.0,0.0,0.0};
	double hgt, T0, p0, Hs1, redh, c, Tv, e0 = 0.0;
	for(unsigned l=0; l<4; l++){
		//#transforming ellipsoidal height to orthometric height:
		//#Hortho = -N + Hell
		undul[l] = ugrid[indx[l]];
		hgt = hell-undul[l];
		//#pressure, temperature at the height of the grid
		T0 = Tgrid[indx[l]][0] + Tgrid[indx[l]][1]*cosfy + Tgrid[indx[l]][2]*sinfy + Tgrid[indx[l]][3]*coshy + Tgrid[indx[l]][4]*sinhy;
		p0 = pgrid[indx[l]][0] + pgrid[indx[l]][1]*cosfy + pgrid[indx[l]][2]*sinfy + pgrid[indx[l]][3]*coshy + pgrid[indx[l]][4]*sinhy;
		//#humidity 
		Ql[l]= Qgrid[indx[l]][0] + Qgrid[indx[l]][1]*cosfy + Qgrid[indx[l]][2]*sinfy + Qgrid[indx[l]][3]*coshy + Qgrid[indx[l]][4]*sinhy;
		//#reduction = stationheight - gridheight
		Hs1 = Hsgrid[indx[l]];
		redh = hgt - Hs1;
		//#lapse rate of the temperature in degree / km
		dTl[l] = dTgrid[indx[l]][0] + dTgrid[indx[l]][1]*cosfy + dTgrid[indx[l]][2]*sinfy + dTgrid[indx[l]][3]*coshy + dTgrid[indx[l]][4]*sinhy;
		//#temperature reduction to station height
		Tl[l] = T0 + dTl[l]*redh - 273.15;
		//#virtual temperature
		Tv = T0*(1+0.6077*Ql[l]);
		c = gm*dMtr/(Rg*Tv);
		//#pressure in hPa
		pl[l] = (p0*exp(-c*redh))/100;
		//#hydrostatic coefficient ah
		ahl[l] = ahgrid[indx[l]][0] + ahgrid[indx[l]][1]*cosfy + ahgrid[indx[l]][2]*sinfy + ahgrid[indx[l]][3]*coshy + ahgrid[indx[l]][4]*sinhy;
		//#wet coefficient aw
		awl[l] = awgrid[indx[l]][0] + awgrid[indx[l]][1]*cosfy + awgrid[indx[l]][2]*sinfy + awgrid[indx[l]][3]*coshy + awgrid[indx[l]][4]*sinhy;
		//#water vapor decrease factor la - added by GP
		lal[l] = lagrid[indx[l]][0] + lagrid[indx[l]][1]*cosfy + lagrid[indx[l]][2]*sinfy + lagrid[indx[l]][3]*coshy + lagrid[indx[l]][4]*sinhy;
		//#mean temperature of the water vapor Tm - added by GP
		Tml[l] = Tmgrid[indx[l]][0] + Tmgrid[indx[l]][1]*cosfy + Tmgrid[indx[l]][2]*sinfy + Tmgrid[indx[l]][3]*coshy + Tmgrid[indx[l]][4]*sinhy;
		//#water vapor pressure in hPa - changed by GP
		e0 = Ql[l]*p0/(0.622+0.378*Ql[l])/100; //# on the grid
		el[l] = e0*pow((100*pl[l]/p0),(lal[l]+1));  //# on the station height - [14] Askne and Nordius, 1987
	}
	double dnpod1 = fabs(diffpod); //# distance nearer point
	double dnpod2 = 1 - dnpod1;  //# distance to distant point
	double dnlon1 = fabs(difflon);
	double dnlon2 = 1 - dnlon1;	

	//# pressure
	double R1 = dnpod2*pl[0]+dnpod1*pl[1];
	double R2 = dnpod2*pl[2]+dnpod1*pl[3];
	_P = dnlon2*R1+dnlon1*R2;

	//# temperature
	R1 = dnpod2*Tl[0]+dnpod1*Tl[1];
	R2 = dnpod2*Tl[2]+dnpod1*Tl[3];
	_T = dnlon2*R1+dnlon1*R2;

	//# temperature in degree per km
	R1 = dnpod2*dTl[0]+dnpod1*dTl[1];
	R2 = dnpod2*dTl[2]+dnpod1*dTl[3];
	_dT = (dnlon2*R1+dnlon1*R2)*1000;

	//# water vapor pressure in hPa - changed by GP
	R1 = dnpod2*el[0]+dnpod1*el[1];
	R2 = dnpod2*el[2]+dnpod1*el[3];
	_e = dnlon2*R1+dnlon1*R2;

	//# hydrostatic
	R1 = dnpod2*ahl[0]+dnpod1*ahl[1];
	R2 = dnpod2*ahl[2]+dnpod1*ahl[3];
	_ah = dnlon2*R1+dnlon1*R2;

	//# wet
	R1 = dnpod2*awl[0]+dnpod1*awl[1];
	R2 = dnpod2*awl[2]+dnpod1*awl[3];
	_aw = dnlon2*R1+dnlon1*R2;

	//# undulation
	R1 = dnpod2*undul[0]+dnpod1*undul[1];
	R2 = dnpod2*undul[2]+dnpod1*undul[3];
	_undu = dnlon2*R1+dnlon1*R2;
	
	//# water vapor decrease factor la - added by GP
	R1 = dnpod2*lal[0]+dnpod1*lal[1];
	R2 = dnpod2*lal[2]+dnpod1*lal[3];
	_la = dnlon2*R1+dnlon1*R2;

	//# mean temperature of the water vapor Tm - added by GP
	R1 = dnpod2*Tml[0]+dnpod1*Tml[1];
	R2 = dnpod2*Tml[2]+dnpod1*Tml[3];
	_Tm = dnlon2*R1+dnlon1*R2;	
	return true;
}
bool t_pppGpt::GPT2w(double dmjd, double dlat, double dlon, double hell){
	/*
	# (c) Department of Geodesy and Geoinformation, Vienna University of
	# Technology, 2013
	#
	# The copyright in this document is vested in the Department of Geodesy and
	# Geoinformation (GEO), Vienna University of Technology, Austria. This document
	# may only be reproduced in whole or in part, or stored in a retrieval
	# system, or transmitted in any form, or by any means electronic,
	# mechanical, photocopying or otherwise, either with the prior permission
	# of GEO or in accordance with the terms of ESTEC Contract No.
	# 4000107329/12/NL/LvH.
	# ---
	#
	# This subroutine determines pressure, temperature, temperature lapse rate, 
	# mean temperature of the water vapor, water vapor pressure, hydrostatic 
	# and wet mapping function coefficients ah and aw, water vapour decrease
	# factor and geoid undulation for specific sites near the Earth surface.
	# It is based on a 1 x 1 degree external grid file ('gpt2_1wA.grd') with mean
	# values as well as sine and cosine amplitudes for the annual and
	# semiannual variation of the coefficients.
	#
	# c Reference:
	# J. B?hm, G. M?ller, M. Schindelegger, G. Pain, R. Weber, Development of an 
	# improved blind model for slant delays in the troposphere (GPT2w),
	# GPS Solutions, 2014, doi:10.1007/s10291-014-0403-7
	#
	# input parameters:
	#
	# dmjd:  modified Julian date (scalar, only one epoch per call is possible)
	# dlat:  ellipsoidal latitude in radians [-pi/2:+pi/2] (vector)
	# dlon:  longitude in radians [-pi:pi] or [0:2pi] (vector)
	# hell:  ellipsoidal height in m (vector)
	# nstat: number of stations in dlat, dlon, and hell
	#        maximum possible: not relevant for Matlab version
	# it:    case 1: no time variation but static quantities
	#        case 0: with time variation (annual and semiannual terms)
	# zd:   zenith distance in radians  (md: chaiyut)
	#
	# output parameters:
	#
	# p:    pressure in hPa (vector of length nstat) 
	# T:    temperature in degrees Celsius (vector of length nstat)
	# dT:   temperature lapse rate in degrees per km (vector of length nstat)
	# Tm:   mean temperature of the water vapor in degrees Kelvin (vector of length nstat)
	# e:    water vapor pressure in hPa (vector of length nstat)
	# ah:   hydrostatic mapping function coefficient at zero height (VMF1) 
	#       (vector of length nstat)
	# aw:   wet mapping function coefficient (VMF1) (vector of length nstat)
	# la:   water vapor decrease factor (vector of length nstat)
	# undu: geoid undulation in m (vector of length nstat)
	# vmf1h : mapping function of hydrostatic delay (md: chaiyut)
	# vmf1w : mapping function of wet delay  (md: chaiyut)
	#
	# The hydrostatic mapping function coefficients have to be used with the
	# height dependent Vienna Mapping Function 1 (vmf_ht.f) because the
	# coefficients refer to zero height.
	#
	# Example 1 (Vienna, 2 August 2012, with time variation,grid file 'gpt2_1wA.grd):
	#
	#dmjd = 56141.0;
	#dlat = 10.200*pi/180.0;
	#dlon = 100.400*pi/180.0;
	#hell = 156.0;
	#nstat = 1;
	#it = 0;
	#
	# output:
	# p = 1002.788 hPa
	# T = 22.060 deg Celsius
	# dT = -6.230 deg / km
	# Tm = 281.304 K
	# e = 16.742 hPa
	# ah = 0.0012646
	# aw = 0.0005752
	# la = 2.6530
	# undu = 45.76 m
	# dlat
	# dlon 
	# hell
	#
	# Example 2 (Vienna, 2 August 2012, without time variation, i.e. constant values):
	#
	# dmjd = 56141.d0
	# dlat(1) = 48.20d0*pi/180.d0
	# dlon(1) = 16.37d0*pi/180.d0
	# hell(1) = 156.d0
	# nstat = 1
	# it = 1
	#
	# output:
	# p = 1003.709 hPa
	# T = 11.79 deg Celsius
	# dT = -5.49 deg / km
	# Tm = 273.22 K
	# e = 10.26 hPa
	# ah = 0.0012396
	# aw = 0.0005753
	# la = 2.6358
	# undu = 45.76 m
	# dlat
	# dlon
	# hell
	#
	# Modified : Chaiyut Charoenphon, 6 November 2016
	#
	#
	# Klemens Lagler, 2 August 2012
	# Johannes Boehm, 6 August 2012, revision
	# Klemens Lagler, 21 August 2012, epoch change to January 1 2000
	# Johannes Boehm, 23 August 2012, adding possibility to determine constant field
	# Johannes Boehm, 27 December 2012, reference added
	# Johannes Boehm, 10 January 2013, correction for dlat = -90 degrees
	#                                  (problem found by Changyong He)
	# Johannes Boehm, 21 May 2013, bug with dmjd removed (input parameter dmjd was replaced
	#                 unintentionally; problem found by Dennis Ferguson)
	# Gregory Pain,   17 June 2013, adding water vapor decrease factor la 
	# Gregory Pain,   21 June 2013, using the 1 degree grid : better for calculating zenith wet delays (la)
	# Gregory Pain,   01 July 2013, adding mean temperature of the water vapor Tm
	# Gregory Pain,   30 July 2013, changing the method to calculate the water vapor partial pressure (e)
	# Gregory Pain,   31 July 2013, correction for (dlat = -90 degrees, dlon = 360 degrees)
	# Johannes Boehm, 27 December 2013, copyright notice added 
	# Johannes Boehm, 25 August 2014, default input file changed to
	#                 gpt2_1wA.grd (slightly different humidity values) 
	# Johannes Boehm, 25 August 2014, reference changed to Boehm et al. in GPS
	#                 Solutions
	# ---
	#  lat    lon   p:a0    A1   B1   A2   B2  T:a0    A1   B1   A2   B2  Q:a0    A1    B1    A2    B2 dT:a0    A1   B1   A2   B2    undu       Hs   h:a0      A1      B1      A2      B2    w:a0      A1      B1      A2      B2  lam:a0      A1      B1      A2      B2    Tm:a0    A1   B1   A2   B2    	         
	*/
	//++++++++++++++
	
	double plat = dlat*180.0/M_PI;
	double plon = dlon*180.0/M_PI;
	
	// Check Boundary in Thailand
	if(!((plat>5.570728) && (plat<20.544796) && (plon>97.295242) && (plon<105.776465))){
		return false;
	}
	
	
	unsigned indx[4]={0,0,0,0};
	int flat = floor(plat-0.5)-4;
	int flon =106-floor(plon-0.5);	
	//# transform to polar distance in degrees
	double ppod = (-dlat + M_PI/2)*180.0/M_PI; 
	// find the index (line in the grid file) of the nearest point
	//# changed for the 1 degree grid (GP)
	double ipod = floor((ppod+1.0)); 
	double ilon = floor((plon+1.0));
	//# normalized (to one) differences, can be positive or negative
	//# changed for the 1 degree grid (GP)
	double diffpod = (ppod - (ipod - 0.5));
	double difflon = (plon - (ilon - 0.5));                
	//# change the reference epoch to January 1 2000
	double dmjd1 = dmjd-51544.5;
	//# mean gravity in m/s**2
	double gm = 9.80665;
	//# molar mass of dry air in kg/mol
	double dMtr = 28.965*0.001;
	//# universal gas constant in J/K/mol
	double Rg = 8.3143;
	//# factors for amplitudes
	double cosfy = cos(dmjd1/365.25*2*M_PI);
	double coshy = cos(dmjd1/365.25*4*M_PI);
	double sinfy = sin(dmjd1/365.25*2*M_PI);
	double sinhy = sin(dmjd1/365.25*4*M_PI);	
	// Data index
	indx[0] = (_numData - flat * 11 - 1 - flon);// LL
	indx[1] = indx[0] - 11;            // UL
	indx[2] = indx[0] + 1;             // LR
	indx[3] = indx[1] + 1;             // UR 

	//# loop over grid points
	//# for the 1 degree grid (GP)
	//# Thailand AreaGrid
	for( unsigned n=0; n<_numData; n++){  
		// //# read mean values and amplitudes
		for (unsigned j =0; j<5; j++){
			pgrid[n][j]  = COFF_DATA[n][2+j];        //# pressure in Pascal
			Tgrid[n][j]  = COFF_DATA[n][7+j];        //# temperature in Kelvin
		    Qgrid[n][j] = (COFF_DATA[n][12+j])/1000;  //# specific humidity in kg/kg	
			dTgrid[n][j]=(COFF_DATA[n][17+j])/1000;  //# temperature lapse rate in Kelvin/m
			ahgrid[n][j]  = (COFF_DATA[n][24+j])/1000; //# hydrostatic mapping function coefficient, dimensionless
			awgrid[n][j]  = (COFF_DATA[n][29+j])/1000; //# wet mapping function coefficient, dimensionless
			lagrid[n][j]   = COFF_DATA[n][34+j];    	             //# water vapor decrease factor, dimensionless
			Tmgrid[n][j] = COFF_DATA[n][39+j];                    //# mean temperature in Kelvin
		};
		ugrid[n]  = COFF_DATA[n][22];                          //# geoid undulation in m
		Hsgrid[n]= COFF_DATA[n][23];                          //# orthometric grid height in m
	}
	double undul[4] = {0.0,0.0,0.0,0.0};
	double Ql[4]  = {0.0,0.0,0.0,0.0};
	double dTl[4] = {0.0,0.0,0.0,0.0};
	double Tl[4]   = {0.0,0.0,0.0,0.0};
	double pl[4] 	 = {0.0,0.0,0.0,0.0};
	double ahl[4] = {0.0,0.0,0.0,0.0};
	double awl[4] = {0.0,0.0,0.0,0.0};
	double lal[4]  = {0.0,0.0,0.0,0.0};
	double Tml[4]= {0.0,0.0,0.0,0.0};
	double el[4]   = {0.0,0.0,0.0,0.0};
	double hgt, T0, p0, Hs1, redh, c, Tv, e0 = 0.0;
	for(unsigned l=0; l<4; l++){
		//#transforming ellipsoidal height to orthometric height:
		//#Hortho = -N + Hell
		undul[l] = ugrid[indx[l]];
		hgt = hell-undul[l];
		//#pressure, temperature at the height of the grid
		T0 = Tgrid[indx[l]][0] + Tgrid[indx[l]][1]*cosfy + Tgrid[indx[l]][2]*sinfy + Tgrid[indx[l]][3]*coshy + Tgrid[indx[l]][4]*sinhy;
		p0 = pgrid[indx[l]][0] + pgrid[indx[l]][1]*cosfy + pgrid[indx[l]][2]*sinfy + pgrid[indx[l]][3]*coshy + pgrid[indx[l]][4]*sinhy;
		//#humidity 
		Ql[l]= Qgrid[indx[l]][0] + Qgrid[indx[l]][1]*cosfy + Qgrid[indx[l]][2]*sinfy + Qgrid[indx[l]][3]*coshy + Qgrid[indx[l]][4]*sinhy;
		//#reduction = stationheight - gridheight
		Hs1 = Hsgrid[indx[l]];
		redh = hgt - Hs1;
		//#lapse rate of the temperature in degree / km
		dTl[l] = dTgrid[indx[l]][0] + dTgrid[indx[l]][1]*cosfy + dTgrid[indx[l]][2]*sinfy + dTgrid[indx[l]][3]*coshy + dTgrid[indx[l]][4]*sinhy;
		//#temperature reduction to station height
		Tl[l] = T0 + dTl[l]*redh - 273.15;
		//#virtual temperature
		Tv = T0*(1+0.6077*Ql[l]);
		c = gm*dMtr/(Rg*Tv);
		//#pressure in hPa
		pl[l] = (p0*exp(-c*redh))/100;
		//#hydrostatic coefficient ah
		ahl[l] = ahgrid[indx[l]][0] + ahgrid[indx[l]][1]*cosfy + ahgrid[indx[l]][2]*sinfy + ahgrid[indx[l]][3]*coshy + ahgrid[indx[l]][4]*sinhy;
		//#wet coefficient aw
		awl[l] = awgrid[indx[l]][0] + awgrid[indx[l]][1]*cosfy + awgrid[indx[l]][2]*sinfy + awgrid[indx[l]][3]*coshy + awgrid[indx[l]][4]*sinhy;
		//#water vapor decrease factor la - added by GP
		lal[l] = lagrid[indx[l]][0] + lagrid[indx[l]][1]*cosfy + lagrid[indx[l]][2]*sinfy + lagrid[indx[l]][3]*coshy + lagrid[indx[l]][4]*sinhy;
		//#mean temperature of the water vapor Tm - added by GP
		Tml[l] = Tmgrid[indx[l]][0] + Tmgrid[indx[l]][1]*cosfy + Tmgrid[indx[l]][2]*sinfy + Tmgrid[indx[l]][3]*coshy + Tmgrid[indx[l]][4]*sinhy;
		//#water vapor pressure in hPa - changed by GP
		e0 = Ql[l]*p0/(0.622+0.378*Ql[l])/100; //# on the grid
		el[l] = e0*pow((100*pl[l]/p0),(lal[l]+1));  //# on the station height - [14] Askne and Nordius, 1987
	}
	double dnpod1 = fabs(diffpod); //# distance nearer point
	double dnpod2 = 1 - dnpod1;  //# distance to distant point
	double dnlon1 = fabs(difflon);
	double dnlon2 = 1 - dnlon1;	
	//# pressure
	double R1 = dnpod2*pl[0]+dnpod1*pl[1];
	double R2 = dnpod2*pl[2]+dnpod1*pl[3];
	_P = dnlon2*R1+dnlon1*R2;

	//# temperature
	R1 = dnpod2*Tl[0]+dnpod1*Tl[1];
	R2 = dnpod2*Tl[2]+dnpod1*Tl[3];
	_T = dnlon2*R1+dnlon1*R2;

	//# temperature in degree per km
	R1 = dnpod2*dTl[0]+dnpod1*dTl[1];
	R2 = dnpod2*dTl[2]+dnpod1*dTl[3];
	_dT = (dnlon2*R1+dnlon1*R2)*1000;

	//# water vapor pressure in hPa - changed by GP
	R1 = dnpod2*el[0]+dnpod1*el[1];
	R2 = dnpod2*el[2]+dnpod1*el[3];
	_e = dnlon2*R1+dnlon1*R2;

	//# hydrostatic
	R1 = dnpod2*ahl[0]+dnpod1*ahl[1];
	R2 = dnpod2*ahl[2]+dnpod1*ahl[3];
	_ah = dnlon2*R1+dnlon1*R2;

	//# wet
	R1 = dnpod2*awl[0]+dnpod1*awl[1];
	R2 = dnpod2*awl[2]+dnpod1*awl[3];
	_aw = dnlon2*R1+dnlon1*R2;

	//# undulation
	R1 = dnpod2*undul[0]+dnpod1*undul[1];
	R2 = dnpod2*undul[2]+dnpod1*undul[3];
	_undu = dnlon2*R1+dnlon1*R2;
	
	//# water vapor decrease factor la - added by GP
	R1 = dnpod2*lal[0]+dnpod1*lal[1];
	R2 = dnpod2*lal[2]+dnpod1*lal[3];
	_la = dnlon2*R1+dnlon1*R2;

	//# mean temperature of the water vapor Tm - added by GP
	R1 = dnpod2*Tml[0]+dnpod1*Tml[1];
	R2 = dnpod2*Tml[2]+dnpod1*Tml[3];
	_Tm = dnlon2*R1+dnlon1*R2;	

	return true;
}
//++++++++++++++++++++++++++++++
// Constructor
////////////////////////////////////////////////////////////////////////////
t_pppParam::t_pppParam(t_pppParam::parType typeIn, int indexIn,
                   const QString& prnIn) {
  type      = typeIn;
  index     = indexIn;
  prn       = prnIn;
  index_old = 0;
  xx        = 0.0;
  numEpo    = 0;
}

// Destructor
////////////////////////////////////////////////////////////////////////////
t_pppParam::~t_pppParam() {
}

// Partial
////////////////////////////////////////////////////////////////////////////
double t_pppParam::partial(t_satData* satData, bool phase) {

  Tracer tracer("t_pppParam::partial");

  // Coordinates
  // -----------
  if      (type == CRD_X) {
    return (xx - satData->xx(1)) / satData->rho;
  }
  else if (type == CRD_Y) {
    return (xx - satData->xx(2)) / satData->rho;
  }
  else if (type == CRD_Z) {
    return (xx - satData->xx(3)) / satData->rho;
  }

  // Receiver Clocks
  // ---------------
  else if (type == RECCLK) {
    return 1.0;
  }

  // Troposphere
  // -----------
  else if (type == TROPO) {
    return 1.0 / sin(satData->eleSat);
  }

  // Glonass Offset
  // --------------
  else if (type == GLONASS_OFFSET) {
    if (satData->prn[0] == 'R') {
      return 1.0;
    }
    else {
      return 0.0;
    }
  }

  // Galileo Offset
  // --------------
  else if (type == GALILEO_OFFSET) {
    if (satData->prn[0] == 'E') {
      return 1.0;
    }
    else {
      return 0.0;
    }
  }

  // BDS Offset
  // ----------
  else if (type == BDS_OFFSET) {
    if (satData->prn[0] == 'C') {
      return 1.0;
    }
    else {
      return 0.0;
    }
  }

  // Ambiguities
  // -----------
  else if (type == AMB_L3) {
    if (phase && satData->prn == prn) {
      return 1.0;
    }
    else {
      return 0.0;
    }
  }

  // Default return
  // --------------
  return 0.0;
}

// Constructor
////////////////////////////////////////////////////////////////////////////
t_pppFilter::t_pppFilter(t_pppClient* pppClient) {
  _gpt 	 = new t_pppGpt();
  _pppClient = pppClient;
  _tides     = new t_tides(OPT->_roverName,OPT->_cwd);

  // Antenna Name, ANTEX File
  // ------------------------
  _antex = 0;
  if (!OPT->_antexFileName.empty()) {
    _antex = new bncAntex(OPT->_antexFileName.c_str());
  }

  // Bancroft Coordinates
  // --------------------
  _xcBanc.ReSize(4);  _xcBanc  = 0.0;
  _ellBanc.ReSize(3); _ellBanc = 0.0;

  // Save copy of data (used in outlier detection)
  // ---------------------------------------------
  _epoData_sav = new t_epoData();

  // Some statistics
  // ---------------
  _neu.ReSize(3); _neu = 0.0;
  _numSat = 0;
  _hDop   = 0.0;
}

// Destructor
////////////////////////////////////////////////////////////////////////////
t_pppFilter::~t_pppFilter() {
  delete _tides;
  delete _antex;
  for (int iPar = 1; iPar <= _params.size(); iPar++) {
    delete _params[iPar-1];
  }
  for (int iPar = 1; iPar <= _params_sav.size(); iPar++) {
    delete _params_sav[iPar-1];
  }
  delete _epoData_sav;
}

// Reset Parameters and Variance-Covariance Matrix
////////////////////////////////////////////////////////////////////////////
void t_pppFilter::reset() {

  Tracer tracer("t_pppFilter::reset");

  double lastTrp = 0.0;
  for (int ii = 0; ii < _params.size(); ii++) {
    t_pppParam* pp = _params[ii];
    if (pp->type == t_pppParam::TROPO) {
      lastTrp = pp->xx;
    }
    delete pp;
  }
  _params.clear();

  int nextPar = 0;
  _params.push_back(new t_pppParam(t_pppParam::CRD_X,  ++nextPar, ""));
  _params.push_back(new t_pppParam(t_pppParam::CRD_Y,  ++nextPar, ""));
  _params.push_back(new t_pppParam(t_pppParam::CRD_Z,  ++nextPar, ""));
  _params.push_back(new t_pppParam(t_pppParam::RECCLK, ++nextPar, ""));
  if (OPT->estTrp()) {
    _params.push_back(new t_pppParam(t_pppParam::TROPO, ++nextPar, ""));
  }
  if (OPT->useSystem('R')) {
    _params.push_back(new t_pppParam(t_pppParam::GLONASS_OFFSET, ++nextPar, ""));
  }
  if (OPT->useSystem('E')) {
    _params.push_back(new t_pppParam(t_pppParam::GALILEO_OFFSET, ++nextPar, ""));
  }
  if (OPT->useSystem('C')) {
    _params.push_back(new t_pppParam(t_pppParam::BDS_OFFSET, ++nextPar, ""));
  }

  _QQ.ReSize(_params.size());
  _QQ = 0.0;
  for (int iPar = 1; iPar <= _params.size(); iPar++) {
    t_pppParam* pp = _params[iPar-1];
    pp->xx = 0.0;
    if      (pp->isCrd()) {
      _QQ(iPar,iPar) = OPT->_aprSigCrd(1) * OPT->_aprSigCrd(1);
    }
    else if (pp->type == t_pppParam::RECCLK) {
      _QQ(iPar,iPar) = OPT->_noiseClk * OPT->_noiseClk;
    }
    else if (pp->type == t_pppParam::TROPO) {
      _QQ(iPar,iPar) = OPT->_aprSigTrp * OPT->_aprSigTrp;
      pp->xx = lastTrp;
    }
    else if (pp->type == t_pppParam::GLONASS_OFFSET) {
      _QQ(iPar,iPar) = 1000.0 * 1000.0;
    }
    else if (pp->type == t_pppParam::GALILEO_OFFSET) {
      _QQ(iPar,iPar) = 1000.0 * 1000.0;
    }
    else if (pp->type == t_pppParam::BDS_OFFSET) {
      _QQ(iPar,iPar) = 1000.0 * 1000.0;
    }
  }
}

// Bancroft Solution
////////////////////////////////////////////////////////////////////////////
t_irc t_pppFilter::cmpBancroft(t_epoData* epoData) {

  Tracer tracer("t_pppFilter::cmpBancroft");

  if (int(epoData->sizeSys('G')) < OPT->_minObs) {
    LOG << "t_pppFilter::cmpBancroft: not enough data\n";
    return failure;
  }

  Matrix BB(epoData->sizeSys('G'), 4);

  QMapIterator<QString, t_satData*> it(epoData->satData);
  int iObsBanc = 0;
  while (it.hasNext()) {
    it.next();
    t_satData* satData = it.value();
    if (satData->system() == 'G') {
      ++iObsBanc;
      QString    prn     = it.key();
      BB(iObsBanc, 1) = satData->xx(1);
      BB(iObsBanc, 2) = satData->xx(2);
      BB(iObsBanc, 3) = satData->xx(3);
      BB(iObsBanc, 4) = satData->P3 + satData->clk;
    }
  }

  bancroft(BB, _xcBanc);

  if (std::isnan(_xcBanc(1)) ||
      std::isnan(_xcBanc(2)) ||
      std::isnan(_xcBanc(3))) {
    return failure;
  }

  // Ellipsoidal Coordinates
  // ------------------------
  xyz2ell(_xcBanc.data(), _ellBanc.data());

  // Compute Satellite Elevations
  // ----------------------------
  QMutableMapIterator<QString, t_satData*> im(epoData->satData);
  while (im.hasNext()) {
    im.next();
    t_satData* satData = im.value();
    cmpEle(satData);
    if (satData->eleSat < OPT->_minEle) {
      delete satData;
      im.remove();
    }
  }

  return success;
}

// Computed Value
////////////////////////////////////////////////////////////////////////////
double t_pppFilter::cmpValue(t_satData* satData, bool phase) {

  Tracer tracer("t_pppFilter::cmpValue");

  ColumnVector xRec(3);
  xRec(1) = x();
  xRec(2) = y();
  xRec(3) = z();

  double rho0 = (satData->xx - xRec).norm_Frobenius();
  double dPhi = t_CST::omega * rho0 / t_CST::c;

  xRec(1) = x() * cos(dPhi) - y() * sin(dPhi);
  xRec(2) = y() * cos(dPhi) + x() * sin(dPhi);
  xRec(3) = z();

  xRec += _tides->displacement(_time, xRec);
	
  //++++++++++++++++++++++++++++++++++++++
  // Chaiyut Charoenphon 3-Jan-2017
  //++++++++++++++++++++++++++++++++++++++
  _xyz = _tides->tideOcean(_time, xRec);
  xRec += _xyz;
  //double tropDelay = delay_saast(satData->eleSat) + trp() / sin(satData->eleSat);
  double mfw = 1.0;
  double tropSat = tropModel(satData->eleSat, mfw); //return Trop Delay and wet mapping function
  double tropDelay = tropSat + mfw*trp();

  //++++++++++++++++++++++++++++++++++++++
  
  satData->rho = (satData->xx - xRec).norm_Frobenius();
  
  double wind = 0.0;
  if (phase) {
    wind = windUp(satData->prn, satData->xx, xRec) * satData->lambda3;
  }

  double offset = 0.0;
  t_frequency::type frqA = t_frequency::G1;
  t_frequency::type frqB = t_frequency::G2;
  if      (satData->prn[0] == 'R') {
    offset = Glonass_offset();
    frqA = t_frequency::R1;
    frqB = t_frequency::R2;
  }
  else if (satData->prn[0] == 'E') {
    offset = Galileo_offset();
    //frqA = t_frequency::E1; as soon as available
    //frqB = t_frequency::E5; -"-
  }
  else if (satData->prn[0] == 'C') {
    offset = Bds_offset();
    //frqA = t_frequency::C2; as soon as available
    //frqB = t_frequency::C7; -"-
  }
  double phaseCenter = 0.0;
  if (_antex) {
    bool found;
    phaseCenter = satData->lkA * _antex->rcvCorr(OPT->_antNameRover, frqA,
                                                 satData->eleSat, satData->azSat,
                                                 found)
                + satData->lkB * _antex->rcvCorr(OPT->_antNameRover, frqB,
                                                 satData->eleSat, satData->azSat,
                                                 found);
    if (!found) {
      LOG << "ANTEX: antenna >" << OPT->_antNameRover << "< not found\n";
    }
  }

  double antennaOffset = 0.0;
  double cosa = cos(satData->azSat);
  double sina = sin(satData->azSat);
  double cose = cos(satData->eleSat);
  double sine = sin(satData->eleSat);
  antennaOffset = -OPT->_neuEccRover(1) * cosa*cose
                  -OPT->_neuEccRover(2) * sina*cose
                  -OPT->_neuEccRover(3) * sine;

  return satData->rho + phaseCenter + antennaOffset + clk()
                      + offset - satData->clk + tropDelay + wind;
}


void t_pppFilter::prepareMeteorology(){
    // If a xyzAprRover is not set,the meteorology can not be obtained
	
	if (OPT->xyzAprRoverSet()) {
		double ell[3]={0.0,0.0,0.0};		
		double xyz[3];
		xyz[0] = OPT->_xyzAprRover[0];
		xyz[1] = OPT->_xyzAprRover[1];
		xyz[2] = OPT->_xyzAprRover[2];	
		xyz2ell(xyz, ell);
		
		_gpt->cmpMdata(OPT->_cwd, OPT->_roverName, _time, ell);
		//_gpt->_range = sqrt(xyz[0]*xyz[0] + xyz[1]*xyz[1] + xyz[2]*xyz[2]);
		//_tempStr = _gpt->_mData;
	}
}


double t_pppFilter::tropModel(double eleSat,double& mfw){
/* Input
	eleSat : the elevation angel of satellite in radian
	mfw : Referance wet mapping function
	Output
    Troposherical path delay
	mfw : wet mapping function
*/
	double zen = M_PI/2.0 - eleSat;
	double tropDelay = 2.3; // At Zenith  
	double dmjd = _time.mjddec(); //_time.mjd() + _time.daysec() / 86400.0;
	//double doy = _gpt->mjdToDoy(dmjd);
	double mf[2];
	_gpt->VMF3(_gpt->_ah, _gpt->_aw, dmjd, _gpt->_dlat,_gpt->_dlon, zen, mf);
	_zhd = _gpt->zhd_saast(_gpt->_P, _gpt->_dlat ,_gpt->_hell);
	mfw = mf[1];
	tropDelay = _zhd*mf[0];// + _zwd*vmf[1];
	//_tempStr = "SA_VMF" + _gpt->_mData;
	_tempDb = 0.0;//_tides->_blqfile*1.0;
  //}
  return tropDelay;
}
// Tropospheric Model (Saastamoinen)
////////////////////////////////////////////////////////////////////////////
double t_pppFilter::delay_saast(double Ele) {

  Tracer tracer("t_pppFilter::delay_saast");

  double xyz[3];
  xyz[0] = x();
  xyz[1] = y();
  xyz[2] = z();
  double ell[3];
  xyz2ell(xyz, ell);
  double height = ell[2];

  double pp =  1013.25 * pow(1.0 - 2.26e-5 * height, 5.225);
  double TT =  18.0 - height * 0.0065 + 273.15;
  double hh =  50.0 * exp(-6.396e-4 * height);
  double ee =  hh / 100.0 * exp(-37.2465 + 0.213166*TT - 0.000256908*TT*TT);

  double h_km = height / 1000.0;

  if (h_km < 0.0) h_km = 0.0;
  if (h_km > 5.0) h_km = 5.0;
  int    ii   = int(h_km + 1);
  double href = ii - 1;

  double bCor[6];
  bCor[0] = 1.156;
  bCor[1] = 1.006;
  bCor[2] = 0.874;
  bCor[3] = 0.757;
  bCor[4] = 0.654;
  bCor[5] = 0.563;

  double BB = bCor[ii-1] + (bCor[ii]-bCor[ii-1]) * (h_km - href);

  double zen  = M_PI/2.0 - Ele;

  return (0.002277/cos(zen)) * (pp + ((1255.0/TT)+0.05)*ee - BB*(tan(zen)*tan(zen)));
}

// Prediction Step of the Filter
////////////////////////////////////////////////////////////////////////////
void t_pppFilter::predict(int iPhase, t_epoData* epoData) {

  Tracer tracer("t_pppFilter::predict");

  if (iPhase == 0) {

    const double maxSolGap = 60.0;

    bool firstCrd = false;
    if (!_lastTimeOK.valid() || (maxSolGap > 0.0 && _time - _lastTimeOK > maxSolGap)) {
      firstCrd = true;
      _startTime = epoData->tt;
      reset();
    }

    // Use different white noise for Quick-Start mode
    // ----------------------------------------------
    double sigCrdP_used = OPT->_noiseCrd(1);
    if ( OPT->_seedingTime > 0.0 && OPT->_seedingTime > (epoData->tt - _startTime) ) {
      sigCrdP_used   = 0.0;
    }

    // Predict Parameter values, add white noise
    // -----------------------------------------
    for (int iPar = 1; iPar <= _params.size(); iPar++) {
      t_pppParam* pp = _params[iPar-1];

      // Coordinates
      // -----------
      if      (pp->type == t_pppParam::CRD_X) {
        if (firstCrd) {
          if (OPT->xyzAprRoverSet()) {
            pp->xx = OPT->_xyzAprRover[0];
          }
          else {
            pp->xx = _xcBanc(1);
          }
        }
        _QQ(iPar,iPar) += sigCrdP_used * sigCrdP_used;
      }
      else if (pp->type == t_pppParam::CRD_Y) {
        if (firstCrd) {
          if (OPT->xyzAprRoverSet()) {
            pp->xx = OPT->_xyzAprRover[1];
          }
          else {
            pp->xx = _xcBanc(2);
          }
        }
        _QQ(iPar,iPar) += sigCrdP_used * sigCrdP_used;
      }
      else if (pp->type == t_pppParam::CRD_Z) {
        if (firstCrd) {
          if (OPT->xyzAprRoverSet()) {
            pp->xx = OPT->_xyzAprRover[2];
          }
          else {
            pp->xx = _xcBanc(3);
          }
        }
        _QQ(iPar,iPar) += sigCrdP_used * sigCrdP_used;
      }

      // Receiver Clocks
      // ---------------
      else if (pp->type == t_pppParam::RECCLK) {
        pp->xx = _xcBanc(4);
        for (int jj = 1; jj <= _params.size(); jj++) {
          _QQ(iPar, jj) = 0.0;
        }
        _QQ(iPar,iPar) = OPT->_noiseClk * OPT->_noiseClk;
      }

      // Tropospheric Delay
      // ------------------
      else if (pp->type == t_pppParam::TROPO) {
        _QQ(iPar,iPar) += OPT->_noiseTrp * OPT->_noiseTrp;
      }

      // Glonass Offset
      // --------------
      else if (pp->type == t_pppParam::GLONASS_OFFSET) {
        pp->xx = 0.0;
        for (int jj = 1; jj <= _params.size(); jj++) {
          _QQ(iPar, jj) = 0.0;
        }
        _QQ(iPar,iPar) = 1000.0 * 1000.0;
      }

      // Galileo Offset
      // --------------
      else if (pp->type == t_pppParam::GALILEO_OFFSET) {
        _QQ(iPar,iPar) += 0.1 * 0.1;
      }

      // BDS Offset
      // ----------
      else if (pp->type == t_pppParam::BDS_OFFSET) {
        _QQ(iPar,iPar) += 0.1 * 0.1;    //TODO: TEST
      }
    }
  }

  // Add New Ambiguities if necessary
  // --------------------------------
  if (OPT->ambLCs('G').size() || OPT->ambLCs('R').size() ||
      OPT->ambLCs('E').size() || OPT->ambLCs('C').size()) {

    // Make a copy of QQ and xx, set parameter indices
    // -----------------------------------------------
    SymmetricMatrix QQ_old = _QQ;

    for (int iPar = 1; iPar <= _params.size(); iPar++) {
      _params[iPar-1]->index_old = _params[iPar-1]->index;
      _params[iPar-1]->index     = 0;
    }

    // Remove Ambiguity Parameters without observations
    // ------------------------------------------------
    int iPar = 0;
    QMutableVectorIterator<t_pppParam*> im(_params);
    while (im.hasNext()) {
      t_pppParam* par = im.next();
      bool removed = false;
      if (par->type == t_pppParam::AMB_L3) {
        if (epoData->satData.find(par->prn) == epoData->satData.end()) {
          removed = true;
          delete par;
          im.remove();
        }
      }
      if (! removed) {
        ++iPar;
        par->index = iPar;
      }
    }

    // Add new ambiguity parameters
    // ----------------------------
    QMapIterator<QString, t_satData*> it(epoData->satData);
    while (it.hasNext()) {
      it.next();
      t_satData* satData = it.value();
      addAmb(satData);
    }

    int nPar = _params.size();
    _QQ.ReSize(nPar); _QQ = 0.0;
    for (int i1 = 1; i1 <= nPar; i1++) {
      t_pppParam* p1 = _params[i1-1];
      if (p1->index_old != 0) {
        _QQ(p1->index, p1->index) = QQ_old(p1->index_old, p1->index_old);
        for (int i2 = 1; i2 <= nPar; i2++) {
          t_pppParam* p2 = _params[i2-1];
          if (p2->index_old != 0) {
            _QQ(p1->index, p2->index) = QQ_old(p1->index_old, p2->index_old);
          }
        }
      }
    }

    for (int ii = 1; ii <= nPar; ii++) {
      t_pppParam* par = _params[ii-1];
      if (par->index_old == 0) {
        _QQ(par->index, par->index) = OPT->_aprSigAmb * OPT->_aprSigAmb;
      }
      par->index_old = par->index;
    }
  }
}

// Update Step of the Filter (currently just a single-epoch solution)
////////////////////////////////////////////////////////////////////////////
t_irc t_pppFilter::update(t_epoData* epoData) {

  Tracer tracer("t_pppFilter::update");

  _time = epoData->tt; // current epoch time

  if (OPT->useOrbClkCorr()) {
    LOG << "Precise Point Positioning of Epoch " << _time.datestr() <<  "_" << _time.timestr(3)
        << "\n---------------------------------------------------------------\n";
  }
  else {
    LOG << "Single Point Positioning of Epoch " << _time.datestr() <<  "_" << _time.timestr(3)
        << "\n---------------------------------------------------------------\n";
  }

  // Outlier Detection Loop
  // ----------------------
  if (update_p(epoData) != success) {
    return failure;
  }

  // Set Solution Vector
  // -------------------
  LOG.setf(ios::fixed);
  QVectorIterator<t_pppParam*> itPar(_params);
  while (itPar.hasNext()) {
    t_pppParam* par = itPar.next();
    if      (par->type == t_pppParam::RECCLK) {
      LOG << "\n" << _time.datestr() << "_" << _time.timestr(3)
          << " CLK     " << setw(10) << setprecision(3) << par->xx
          << " +- " << setw(6) << setprecision(3)
          << sqrt(_QQ(par->index,par->index));
    }
    else if (par->type == t_pppParam::AMB_L3) {
      ++par->numEpo;
      LOG << "\n" << _time.datestr() << "_" << _time.timestr(3)
          << " AMB " << par->prn.mid(0,3).toAscii().data() << " "
          << setw(10) << setprecision(3) << par->xx
          << " +- " << setw(6) << setprecision(3)
          << sqrt(_QQ(par->index,par->index))
          << "   epo = " << par->numEpo;
    }
    else if (par->type == t_pppParam::TROPO) {
      double aprTrp = delay_saast(M_PI/2.0);
      LOG << "\n" << _time.datestr() << "_" << _time.timestr(3)
          << " TRP     " << par->prn.mid(0,3).toAscii().data()
          << setw(7) << setprecision(3) << aprTrp << " "
          << setw(6) << setprecision(3) << showpos << par->xx << noshowpos
          << " +- " << setw(6) << setprecision(3)
          << sqrt(_QQ(par->index,par->index));
    }
    else if (par->type == t_pppParam::GLONASS_OFFSET) {
      LOG << "\n" << _time.datestr() << "_" << _time.timestr(3)
          << " OFFGLO  " << setw(10) << setprecision(3) << par->xx
          << " +- " << setw(6) << setprecision(3)
          << sqrt(_QQ(par->index,par->index));
    }
    else if (par->type == t_pppParam::GALILEO_OFFSET) {
      LOG << "\n" << _time.datestr() << "_" << _time.timestr(3)
          << " OFFGAL  " << setw(10) << setprecision(3) << par->xx
          << " +- " << setw(6) << setprecision(3)
          << sqrt(_QQ(par->index,par->index));
    }
    else if (par->type == t_pppParam::BDS_OFFSET) {
      LOG << "\n" << _time.datestr() << "_" << _time.timestr(3)
          << " OFFBDS  " << setw(10) << setprecision(3) << par->xx
          << " +- " << setw(6) << setprecision(3)
          << sqrt(_QQ(par->index,par->index));
    }
  }

  LOG << endl << endl;

  // Compute dilution of precision
  // -----------------------------
  cmpDOP(epoData);

  // Final Message (both log file and screen)
  // ----------------------------------------
  LOG << epoData->tt.datestr() << "_" << epoData->tt.timestr(3)
      << " " << OPT->_roverName
      << " X = "
      << setprecision(4) << x() << " +- "
      << setprecision(4) << sqrt(_QQ(1,1))

      << " Y = "
      << setprecision(4) << y() << " +- "
      << setprecision(4) << sqrt(_QQ(2,2))

      << " Z = "
      << setprecision(4) << z() << " +- "
      << setprecision(4) << sqrt(_QQ(3,3));

  // NEU Output
  // ----------
  if (OPT->xyzAprRoverSet()) {
    SymmetricMatrix QQxyz = _QQ.SymSubMatrix(1,3);

    ColumnVector xyz(3);
    xyz(1) = x() - OPT->_xyzAprRover[0];
    xyz(2) = y() - OPT->_xyzAprRover[1];
    xyz(3) = z() - OPT->_xyzAprRover[2];

    ColumnVector ellRef(3);
    xyz2ell(OPT->_xyzAprRover.data(), ellRef.data());
    xyz2neu(ellRef.data(), xyz.data(), _neu.data());

    SymmetricMatrix QQneu(3);
    covariXYZ_NEU(QQxyz, ellRef.data(), QQneu);

    LOG << " dN = "
        << setprecision(4) << _neu[0] << " +- "
        << setprecision(4) << sqrt(QQneu[0][0])

        << " dE = "
        << setprecision(4) << _neu[1] << " +- "
        << setprecision(4) << sqrt(QQneu[1][1])

        << " dU = "
        << setprecision(4) << _neu[2] << " +- "
        << setprecision(4) << sqrt(QQneu[2][2])           << endl << endl;
  }
  else {
    LOG << endl << endl;
  }

  _lastTimeOK = _time; // remember time of last successful update
  return success;
}

// Outlier Detection
////////////////////////////////////////////////////////////////////////////
QString t_pppFilter::outlierDetection(int iPhase, const ColumnVector& vv,
                                      QMap<QString, t_satData*>& satData) {

  Tracer tracer("t_pppFilter::outlierDetection");

  QString prnGPS;
  QString prnGlo;
  double  maxResGPS = 0.0; // GPS + Galileo
  double  maxResGlo = 0.0; // GLONASS + BDS
  findMaxRes(vv, satData, prnGPS, prnGlo, maxResGPS, maxResGlo);

  if      (iPhase == 1) {
    if      (maxResGlo > 2.98 * OPT->_maxResL1) {
      LOG << "Outlier Phase " << prnGlo.mid(0,3).toAscii().data() << ' ' << maxResGlo << endl;
      return prnGlo;
    }
    else if (maxResGPS > MAXRES_PHASE_GPS) {
      LOG << "Outlier Phase " << prnGPS.mid(0,3).toAscii().data() << ' ' << maxResGPS << endl;
      return prnGPS;
    }
  }
  else if (iPhase == 0 && maxResGPS > 2.98 * OPT->_maxResC1) {
    LOG << "Outlier Code  " << prnGPS.mid(0,3).toAscii().data() << ' ' << maxResGPS << endl;
    return prnGPS;
  }

  return QString();
}

// Phase Wind-Up Correction
///////////////////////////////////////////////////////////////////////////
double t_pppFilter::windUp(const QString& prn, const ColumnVector& rSat,
                        const ColumnVector& rRec) {

  Tracer tracer("t_pppFilter::windUp");

  double Mjd = _time.mjd() + _time.daysec() / 86400.0;

  // First time - initialize to zero
  // -------------------------------
  if (!_windUpTime.contains(prn)) {
    _windUpSum[prn]  = 0.0;
  }

  // Compute the correction for new time
  // -----------------------------------
  if (!_windUpTime.contains(prn) || _windUpTime[prn] != Mjd) {
    _windUpTime[prn] = Mjd;

    // Unit Vector GPS Satellite --> Receiver
    // --------------------------------------
    ColumnVector rho = rRec - rSat;
    rho /= rho.norm_Frobenius();

    // GPS Satellite unit Vectors sz, sy, sx
    // -------------------------------------
    ColumnVector sz = -rSat / rSat.norm_Frobenius();

    ColumnVector xSun = t_astro::Sun(Mjd);
    xSun /= xSun.norm_Frobenius();

    ColumnVector sy = crossproduct(sz, xSun);
    ColumnVector sx = crossproduct(sy, sz);

    // Effective Dipole of the GPS Satellite Antenna
    // ---------------------------------------------
    ColumnVector dipSat = sx - rho * DotProduct(rho,sx)
                                                - crossproduct(rho, sy);

    // Receiver unit Vectors rx, ry
    // ----------------------------
    ColumnVector rx(3);
    ColumnVector ry(3);

    double recEll[3]; xyz2ell(rRec.data(), recEll) ;
    double neu[3];

    neu[0] = 1.0;
    neu[1] = 0.0;
    neu[2] = 0.0;
    neu2xyz(recEll, neu, rx.data());

    neu[0] =  0.0;
    neu[1] = -1.0;
    neu[2] =  0.0;
    neu2xyz(recEll, neu, ry.data());

    // Effective Dipole of the Receiver Antenna
    // ----------------------------------------
    ColumnVector dipRec = rx - rho * DotProduct(rho,rx)
                                                   + crossproduct(rho, ry);

    // Resulting Effect
    // ----------------
    double alpha = DotProduct(dipSat,dipRec) /
                      (dipSat.norm_Frobenius() * dipRec.norm_Frobenius());

    if (alpha >  1.0) alpha =  1.0;
    if (alpha < -1.0) alpha = -1.0;

    double dphi = acos(alpha) / 2.0 / M_PI;  // in cycles

    if ( DotProduct(rho, crossproduct(dipSat, dipRec)) < 0.0 ) {
      dphi = -dphi;
    }

    _windUpSum[prn] = floor(_windUpSum[prn] - dphi + 0.5) + dphi;
  }

  return _windUpSum[prn];
}

//
///////////////////////////////////////////////////////////////////////////
void t_pppFilter::cmpEle(t_satData* satData) {
  Tracer tracer("t_pppFilter::cmpEle");
  ColumnVector rr = satData->xx - _xcBanc.Rows(1,3);
  double       rho = rr.norm_Frobenius();

  double neu[3];
  xyz2neu(_ellBanc.data(), rr.data(), neu);

  satData->eleSat = acos( sqrt(neu[0]*neu[0] + neu[1]*neu[1]) / rho );
  if (neu[2] < 0) {
    satData->eleSat *= -1.0;
  }
  satData->azSat  = atan2(neu[1], neu[0]);
}

//
///////////////////////////////////////////////////////////////////////////
void t_pppFilter::addAmb(t_satData* satData) {
  Tracer tracer("t_pppFilter::addAmb");
  if (!OPT->ambLCs(satData->system()).size()){
    return;
  }
  bool    found = false;
  for (int iPar = 1; iPar <= _params.size(); iPar++) {
    if (_params[iPar-1]->type == t_pppParam::AMB_L3 &&
        _params[iPar-1]->prn == satData->prn) {
      found = true;
      break;
    }
  }
  if (!found) {
    t_pppParam* par = new t_pppParam(t_pppParam::AMB_L3,
                                 _params.size()+1, satData->prn);
    _params.push_back(par);
    par->xx = satData->L3 - cmpValue(satData, true);
  }
}

//
///////////////////////////////////////////////////////////////////////////
void t_pppFilter::addObs(int iPhase, unsigned& iObs, t_satData* satData,
                      Matrix& AA, ColumnVector& ll, DiagonalMatrix& PP) {

  Tracer tracer("t_pppFilter::addObs");

  const double ELEWGHT = 20.0;
  double ellWgtCoef = 1.0;
  double eleD = satData->eleSat * 180.0 / M_PI;
  if (eleD < ELEWGHT) {
    ellWgtCoef = 1.5 - 0.5 / (ELEWGHT - 10.0) * (eleD - 10.0);
  }

  // Remember Observation Index
  // --------------------------
  ++iObs;
  satData->obsIndex = iObs;

  // Phase Observations
  // ------------------

  if (iPhase == 1) {
    ll(iObs)      = satData->L3 - cmpValue(satData, true);
    double sigL3 = 2.98 * OPT->_sigmaL1;
    if (satData->system() == 'R') {
      sigL3 *= GLONASS_WEIGHT_FACTOR;
    }
    if  (satData->system() == 'C') {
      sigL3 *= BDS_WEIGHT_FACTOR;
    }
    PP(iObs,iObs) = 1.0 / (sigL3 * sigL3) / (ellWgtCoef * ellWgtCoef);
    for (int iPar = 1; iPar <= _params.size(); iPar++) {
      if (_params[iPar-1]->type == t_pppParam::AMB_L3 &&
          _params[iPar-1]->prn  == satData->prn) {
        ll(iObs) -= _params[iPar-1]->xx;
      }
      AA(iObs, iPar) = _params[iPar-1]->partial(satData, true);
    }
  }

  // Code Observations
  // -----------------
  else {
    double sigP3 = 2.98 * OPT->_sigmaC1;
    ll(iObs)      = satData->P3 - cmpValue(satData, false);
    PP(iObs,iObs) = 1.0 / (sigP3 * sigP3) / (ellWgtCoef * ellWgtCoef);
    for (int iPar = 1; iPar <= _params.size(); iPar++) {
      AA(iObs, iPar) = _params[iPar-1]->partial(satData, false);
    }
  }
}

//
///////////////////////////////////////////////////////////////////////////
QByteArray t_pppFilter::printRes(int iPhase, const ColumnVector& vv,
                              const QMap<QString, t_satData*>& satDataMap) {

  Tracer tracer("t_pppFilter::printRes");

  ostringstream str;
  str.setf(ios::fixed);
  bool useObs;
  QMapIterator<QString, t_satData*> it(satDataMap);
  while (it.hasNext()) {
    it.next();
    t_satData* satData = it.value();
    (iPhase == 0) ? useObs = OPT->codeLCs(satData->system()).size() :
                    useObs = OPT->ambLCs(satData->system()).size();
    if (satData->obsIndex != 0 && useObs) {
      str << _time.datestr() << "_" << _time.timestr(3)
          << " RES " << satData->prn.mid(0,3).toAscii().data()
          << (iPhase ? "   L3 " : "   P3 ")
          << setw(9) << setprecision(4) << vv(satData->obsIndex) << endl;
    }
  }

  return QByteArray(str.str().c_str());
}

//
///////////////////////////////////////////////////////////////////////////
void t_pppFilter::findMaxRes(const ColumnVector& vv,
                          const QMap<QString, t_satData*>& satData,
                          QString& prnGPS, QString& prnGlo,
                          double& maxResGPS, double& maxResGlo) {

  Tracer tracer("t_pppFilter::findMaxRes");

  maxResGPS  = 0.0;
  maxResGlo  = 0.0;

  QMapIterator<QString, t_satData*> it(satData);
  while (it.hasNext()) {
    it.next();
    t_satData* satData = it.value();
    if (satData->obsIndex != 0) {
      QString prn = satData->prn;
      if (prn[0] == 'R' || prn[0] == 'C') {
        if (fabs(vv(satData->obsIndex)) > maxResGlo) {
          maxResGlo = fabs(vv(satData->obsIndex));
          prnGlo    = prn;
        }
      }
      else {
        if (fabs(vv(satData->obsIndex)) > maxResGPS) {
          maxResGPS = fabs(vv(satData->obsIndex));
          prnGPS    = prn;
        }
      }
    }
  }
}

// Update Step (private - loop over outliers)
////////////////////////////////////////////////////////////////////////////
t_irc t_pppFilter::update_p(t_epoData* epoData) {

  Tracer tracer("t_pppFilter::update_p");

  // Save Variance-Covariance Matrix, and Status Vector
  // --------------------------------------------------
  rememberState(epoData);

  QString lastOutlierPrn;

  // Try with all satellites, then with all minus one, etc.
  // ------------------------------------------------------
  while (selectSatellites(lastOutlierPrn, epoData->satData) == success) {

    QByteArray strResCode;
    QByteArray strResPhase;

    // Bancroft Solution
    // -----------------
    if (cmpBancroft(epoData) != success) {
      break;
    }

    // First update using code observations, then phase observations
    // -------------------------------------------------------------
    bool usePhase = OPT->ambLCs('G').size() || OPT->ambLCs('R').size() ||
                    OPT->ambLCs('E').size() || OPT->ambLCs('C').size() ;

    char sys[] ={'G', 'R', 'E', 'C'};

    bool satnumPrinted[] = {false, false, false, false};

    for (int iPhase = 0; iPhase <= (usePhase ? 1 : 0); iPhase++) {

      // Status Prediction
      // -----------------
      predict(iPhase, epoData);

      // Create First-Design Matrix
      // --------------------------
      unsigned nPar = _params.size();
      unsigned nObs = 0;
      nObs = epoData->sizeAll();
      bool useObs = false;
      for (unsigned ii = 0; ii < sizeof(sys); ii++) {
        const char s = sys[ii];
        (iPhase == 0) ? useObs = OPT->codeLCs(s).size() : useObs = OPT->ambLCs(s).size();
        if (!useObs) {
          nObs -= epoData->sizeSys(s);
        }
        else {
          if (!satnumPrinted[ii]) {
            satnumPrinted[ii] = true;
            LOG << _time.datestr() << "_" << _time.timestr(3)
                << " SATNUM " << s << ' ' << right << setw(2)
                << epoData->sizeSys(s) << endl;
          }
        }
      }

      if (int(nObs) < OPT->_minObs) {
        restoreState(epoData);
        return failure;
      }

      // Prepare first-design Matrix, vector observed-computed
      // -----------------------------------------------------
      Matrix          AA(nObs, nPar);  // first design matrix
      ColumnVector    ll(nObs);        // terms observed-computed
      DiagonalMatrix  PP(nObs); PP = 0.0;

      unsigned iObs = 0;
      QMapIterator<QString, t_satData*> it(epoData->satData);

      while (it.hasNext()) {
        it.next();
        t_satData* satData = it.value();
        QString prn = satData->prn;
        (iPhase == 0) ? useObs = OPT->codeLCs(satData->system()).size() :
                        useObs = OPT->ambLCs(satData->system()).size();
        if (useObs) {
          addObs(iPhase, iObs, satData, AA, ll, PP);
        } else {
          satData->obsIndex = 0;
        }
      }

      // Compute Filter Update
      // ---------------------
      ColumnVector dx(nPar); dx = 0.0;
      kalman(AA, ll, PP, _QQ, dx);
      ColumnVector vv = ll - AA * dx;

      // Print Residuals
      // ---------------
      if (iPhase == 0) {
        strResCode  = printRes(iPhase, vv, epoData->satData);
      }
      else {
        strResPhase = printRes(iPhase, vv, epoData->satData);
      }

      // Check the residuals
      // -------------------
      lastOutlierPrn = outlierDetection(iPhase, vv, epoData->satData);

      // No Outlier Detected
      // -------------------
      if (lastOutlierPrn.isEmpty()) {

        QVectorIterator<t_pppParam*> itPar(_params);
        while (itPar.hasNext()) {
          t_pppParam* par = itPar.next();
          par->xx += dx(par->index);
        }

        if (!usePhase || iPhase == 1) {
          if (_outlierGPS.size() > 0 || _outlierGlo.size() > 0) {
            LOG << "Neglected PRNs: ";
            if (!_outlierGPS.isEmpty()) {
              LOG << _outlierGPS.last().mid(0,3).toAscii().data() << ' ';
            }
            QStringListIterator itGlo(_outlierGlo);
            while (itGlo.hasNext()) {
              QString prn = itGlo.next();
              LOG << prn.mid(0,3).toAscii().data() << ' ';
            }
            LOG << endl;
          }
          LOG << strResCode.data() << strResPhase.data();

          return success;
        }
      }

      // Outlier Found
      // -------------
      else {
        restoreState(epoData);
        break;
      }

    } // for iPhase

  } // while selectSatellites

  restoreState(epoData);
  return failure;
}

// Remeber Original State Vector and Variance-Covariance Matrix
////////////////////////////////////////////////////////////////////////////
void t_pppFilter::rememberState(t_epoData* epoData) {

  _QQ_sav = _QQ;

  QVectorIterator<t_pppParam*> itSav(_params_sav);
  while (itSav.hasNext()) {
    t_pppParam* par = itSav.next();
    delete par;
  }
  _params_sav.clear();

  QVectorIterator<t_pppParam*> it(_params);
  while (it.hasNext()) {
    t_pppParam* par = it.next();
    _params_sav.push_back(new t_pppParam(*par));
  }

  _epoData_sav->deepCopy(epoData);
}

// Restore Original State Vector and Variance-Covariance Matrix
////////////////////////////////////////////////////////////////////////////
void t_pppFilter::restoreState(t_epoData* epoData) {

  _QQ = _QQ_sav;

  QVectorIterator<t_pppParam*> it(_params);
  while (it.hasNext()) {
    t_pppParam* par = it.next();
    delete par;
  }
  _params.clear();

  QVectorIterator<t_pppParam*> itSav(_params_sav);
  while (itSav.hasNext()) {
    t_pppParam* par = itSav.next();
    _params.push_back(new t_pppParam(*par));
  }

  epoData->deepCopy(_epoData_sav);
}

//
////////////////////////////////////////////////////////////////////////////
t_irc t_pppFilter::selectSatellites(const QString& lastOutlierPrn,
                                 QMap<QString, t_satData*>& satData) {

  // First Call
  // ----------
  if (lastOutlierPrn.isEmpty()) {
    _outlierGPS.clear();
    _outlierGlo.clear();
    return success;
  }

  // Second and next trials
  // ----------------------
  else {

    if (lastOutlierPrn[0] == 'R' || lastOutlierPrn[0] == 'C') {
      _outlierGlo << lastOutlierPrn;
    }

    // Remove all Glonass Outliers
    // ---------------------------
    QStringListIterator it(_outlierGlo);
    while (it.hasNext()) {
      QString prn = it.next();
      if (satData.contains(prn)) {
        delete satData.take(prn);
      }
    }

    if (lastOutlierPrn[0] == 'R' || lastOutlierPrn[0] == 'C') {
      _outlierGPS.clear();
      return success;
    }

    // GPS Outlier appeared for the first time - try to delete it
    // ----------------------------------------------------------
    if (_outlierGPS.indexOf(lastOutlierPrn) == -1) {
      _outlierGPS << lastOutlierPrn;
      if (satData.contains(lastOutlierPrn)) {
        delete satData.take(lastOutlierPrn);
      }
      return success;
    }

  }

  return failure;
}

//
////////////////////////////////////////////////////////////////////////////
double lorentz(const ColumnVector& aa, const ColumnVector& bb) {
  return aa(1)*bb(1) +  aa(2)*bb(2) +  aa(3)*bb(3) -  aa(4)*bb(4);
}

//
////////////////////////////////////////////////////////////////////////////
void t_pppFilter::bancroft(const Matrix& BBpass, ColumnVector& pos) {

  if (pos.Nrows() != 4) {
    pos.ReSize(4);
  }
  pos = 0.0;

  for (int iter = 1; iter <= 2; iter++) {
    Matrix BB = BBpass;
    int mm = BB.Nrows();
    for (int ii = 1; ii <= mm; ii++) {
      double xx = BB(ii,1);
      double yy = BB(ii,2);
      double traveltime = 0.072;
      if (iter > 1) {
        double zz  = BB(ii,3);
        double rho = sqrt( (xx-pos(1)) * (xx-pos(1)) +
                           (yy-pos(2)) * (yy-pos(2)) +
                           (zz-pos(3)) * (zz-pos(3)) );
        traveltime = rho / t_CST::c;
      }
      double angle = traveltime * t_CST::omega;
      double cosa  = cos(angle);
      double sina  = sin(angle);
      BB(ii,1) =  cosa * xx + sina * yy;
      BB(ii,2) = -sina * xx + cosa * yy;
    }

    Matrix BBB;
    if (mm > 4) {
      SymmetricMatrix hlp; hlp << BB.t() * BB;
      BBB = hlp.i() * BB.t();
    }
    else {
      BBB = BB.i();
    }
    ColumnVector ee(mm); ee = 1.0;
    ColumnVector alpha(mm); alpha = 0.0;
    for (int ii = 1; ii <= mm; ii++) {
      alpha(ii) = lorentz(BB.Row(ii).t(),BB.Row(ii).t())/2.0;
    }
    ColumnVector BBBe     = BBB * ee;
    ColumnVector BBBalpha = BBB * alpha;
    double aa = lorentz(BBBe, BBBe);
    double bb = lorentz(BBBe, BBBalpha)-1;
    double cc = lorentz(BBBalpha, BBBalpha);
    double root = sqrt(bb*bb-aa*cc);

    Matrix hlpPos(4,2);
    hlpPos.Column(1) = (-bb-root)/aa * BBBe + BBBalpha;
    hlpPos.Column(2) = (-bb+root)/aa * BBBe + BBBalpha;

    ColumnVector omc(2);
    for (int pp = 1; pp <= 2; pp++) {
      hlpPos(4,pp)      = -hlpPos(4,pp);
      omc(pp) = BB(1,4) -
                sqrt( (BB(1,1)-hlpPos(1,pp)) * (BB(1,1)-hlpPos(1,pp)) +
                      (BB(1,2)-hlpPos(2,pp)) * (BB(1,2)-hlpPos(2,pp)) +
                      (BB(1,3)-hlpPos(3,pp)) * (BB(1,3)-hlpPos(3,pp)) ) -
                hlpPos(4,pp);
    }
    if ( fabs(omc(1)) > fabs(omc(2)) ) {
      pos = hlpPos.Column(2);
    }
    else {
      pos = hlpPos.Column(1);
    }
  }
}

//
////////////////////////////////////////////////////////////////////////////
void t_pppFilter::cmpDOP(t_epoData* epoData) {

  Tracer tracer("t_pppFilter::cmpDOP");

  _numSat = 0;
  _hDop   = 0.0;

  if (_params.size() < 4) {
    return;
  }

  const unsigned numPar = 4;
  Matrix AA(epoData->sizeAll(), numPar);
  QMapIterator<QString, t_satData*> it(epoData->satData);
  while (it.hasNext()) {
    it.next();
    t_satData* satData = it.value();
    _numSat += 1;
    for (unsigned iPar = 0; iPar < numPar; iPar++) {
      AA[_numSat-1][iPar] = _params[iPar]->partial(satData, false);
    }
  }
  if (_numSat < 4) {
    return;
  }
  AA = AA.Rows(1, _numSat);
  SymmetricMatrix NN; NN << AA.t() * AA;
  SymmetricMatrix QQ = NN.i();

  _hDop = sqrt(QQ(1,1) + QQ(2,2));
}
